
SensorFusion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003720  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080038b8  080038b8  000138b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800393c  0800393c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800393c  0800393c  0001393c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003944  08003944  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003944  08003944  00013944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003948  08003948  00013948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800394c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000070  080039bc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  080039bc  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba53  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ebf  00000000  00000000  0002baf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  0002d9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  0002e540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001718d  00000000  00000000  0002efe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e767  00000000  00000000  00046175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008af4e  00000000  00000000  000548dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df82a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035e4  00000000  00000000  000df87c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080038a0 	.word	0x080038a0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	080038a0 	.word	0x080038a0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004ec:	f003 0301 	and.w	r3, r3, #1
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d013      	beq.n	800051c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004fc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000500:	2b00      	cmp	r3, #0
 8000502:	d00b      	beq.n	800051c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000504:	e000      	b.n	8000508 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000506:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000508:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d0f9      	beq.n	8000506 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000512:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	b2d2      	uxtb	r2, r2
 800051a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800051c:	687b      	ldr	r3, [r7, #4]
}
 800051e:	4618      	mov	r0, r3
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// overrides system _write so we can use SWD
int _write(int file, char* ptr, int len)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b086      	sub	sp, #24
 800052e:	af00      	add	r7, sp, #0
 8000530:	60f8      	str	r0, [r7, #12]
 8000532:	60b9      	str	r1, [r7, #8]
 8000534:	607a      	str	r2, [r7, #4]
	for (int DataIdx = 0; DataIdx < len; DataIdx++)
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
 800053a:	e009      	b.n	8000550 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	1c5a      	adds	r2, r3, #1
 8000540:	60ba      	str	r2, [r7, #8]
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	4618      	mov	r0, r3
 8000546:	f7ff ffc9 	bl	80004dc <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++)
 800054a:	697b      	ldr	r3, [r7, #20]
 800054c:	3301      	adds	r3, #1
 800054e:	617b      	str	r3, [r7, #20]
 8000550:	697a      	ldr	r2, [r7, #20]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	429a      	cmp	r2, r3
 8000556:	dbf1      	blt.n	800053c <_write+0x12>
	}
	return len;
 8000558:	687b      	ldr	r3, [r7, #4]
}
 800055a:	4618      	mov	r0, r3
 800055c:	3718      	adds	r7, #24
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
	...

08000564 <my_init>:

void my_init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
	printf("\rInit\n");
 8000568:	4802      	ldr	r0, [pc, #8]	; (8000574 <my_init+0x10>)
 800056a:	f002 fd09 	bl	8002f80 <puts>
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	080038b8 	.word	0x080038b8

08000578 <toggle_led>:


void toggle_led(led_t led)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOD, led);
 8000582:	88fb      	ldrh	r3, [r7, #6]
 8000584:	4619      	mov	r1, r3
 8000586:	4803      	ldr	r0, [pc, #12]	; (8000594 <toggle_led+0x1c>)
 8000588:	f000 fffd 	bl	8001586 <HAL_GPIO_TogglePin>
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40020c00 	.word	0x40020c00

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 fcda 	bl	8000f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f81a 	bl	80005d8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005a4:	f000 f880 	bl	80006a8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f968 	bl	800087c <MX_GPIO_Init>
  MX_I2C1_Init();
 80005ac:	f000 f89c 	bl	80006e8 <MX_I2C1_Init>
  MX_I2S2_Init();
 80005b0:	f000 f8c8 	bl	8000744 <MX_I2S2_Init>
  MX_I2S3_Init();
 80005b4:	f000 f8f4 	bl	80007a0 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005b8:	f000 f922 	bl	8000800 <MX_SPI1_Init>
  MX_USB_OTG_FS_USB_Init();
 80005bc:	f000 f956 	bl	800086c <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  my_init();
 80005c0:	f7ff ffd0 	bl	8000564 <my_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	toggle_led(GREEN);
 80005c4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80005c8:	f7ff ffd6 	bl	8000578 <toggle_led>

    HAL_Delay(500);
 80005cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005d0:	f000 fd32 	bl	8001038 <HAL_Delay>
	toggle_led(GREEN);
 80005d4:	e7f6      	b.n	80005c4 <main+0x2c>
	...

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2230      	movs	r2, #48	; 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 fc54 	bl	8002e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <SystemClock_Config+0xc8>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	4a26      	ldr	r2, [pc, #152]	; (80006a0 <SystemClock_Config+0xc8>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	; 0x40
 800060c:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <SystemClock_Config+0xc8>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <SystemClock_Config+0xcc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a20      	ldr	r2, [pc, #128]	; (80006a4 <SystemClock_Config+0xcc>)
 8000622:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <SystemClock_Config+0xcc>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000634:	2301      	movs	r3, #1
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000638:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800063c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000642:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000648:	2304      	movs	r3, #4
 800064a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800064c:	23c0      	movs	r3, #192	; 0xc0
 800064e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000650:	2304      	movs	r3, #4
 8000652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000654:	2308      	movs	r3, #8
 8000656:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 0320 	add.w	r3, r7, #32
 800065c:	4618      	mov	r0, r3
 800065e:	f001 fd91 	bl	8002184 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000668:	f000 f9f4 	bl	8000a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	230f      	movs	r3, #15
 800066e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000670:	2302      	movs	r3, #2
 8000672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000678:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800067c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2103      	movs	r1, #3
 8000688:	4618      	mov	r0, r3
 800068a:	f001 fff3 	bl	8002674 <HAL_RCC_ClockConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000694:	f000 f9de 	bl	8000a54 <Error_Handler>
  }
}
 8000698:	bf00      	nop
 800069a:	3750      	adds	r7, #80	; 0x50
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006ae:	463b      	mov	r3, r7
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
 80006bc:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006be:	2301      	movs	r3, #1
 80006c0:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80006c2:	23c8      	movs	r3, #200	; 0xc8
 80006c4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80006c6:	2305      	movs	r3, #5
 80006c8:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006ce:	463b      	mov	r3, r7
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 f9db 	bl	8002a8c <HAL_RCCEx_PeriphCLKConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80006dc:	f000 f9ba 	bl	8000a54 <Error_Handler>
  }
}
 80006e0:	bf00      	nop
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006ec:	4b12      	ldr	r3, [pc, #72]	; (8000738 <MX_I2C1_Init+0x50>)
 80006ee:	4a13      	ldr	r2, [pc, #76]	; (800073c <MX_I2C1_Init+0x54>)
 80006f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_I2C1_Init+0x50>)
 80006f4:	4a12      	ldr	r2, [pc, #72]	; (8000740 <MX_I2C1_Init+0x58>)
 80006f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_I2C1_Init+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_I2C1_Init+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_I2C1_Init+0x50>)
 8000706:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800070a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <MX_I2C1_Init+0x50>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_I2C1_Init+0x50>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000724:	4804      	ldr	r0, [pc, #16]	; (8000738 <MX_I2C1_Init+0x50>)
 8000726:	f000 ff49 	bl	80015bc <HAL_I2C_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000730:	f000 f990 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	2000008c 	.word	0x2000008c
 800073c:	40005400 	.word	0x40005400
 8000740:	000186a0 	.word	0x000186a0

08000744 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_I2S2_Init+0x50>)
 800074a:	4a13      	ldr	r2, [pc, #76]	; (8000798 <MX_I2S2_Init+0x54>)
 800074c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_I2S2_Init+0x50>)
 8000750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000754:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_I2S2_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800075c:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <MX_I2S2_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_I2S2_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000768:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <MX_I2S2_Init+0x50>)
 800076a:	4a0c      	ldr	r2, [pc, #48]	; (800079c <MX_I2S2_Init+0x58>)
 800076c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_I2S2_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <MX_I2S2_Init+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_I2S2_Init+0x50>)
 800077c:	2201      	movs	r2, #1
 800077e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_I2S2_Init+0x50>)
 8000782:	f001 f85f 	bl	8001844 <HAL_I2S_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 800078c:	f000 f962 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200000e0 	.word	0x200000e0
 8000798:	40003800 	.word	0x40003800
 800079c:	00017700 	.word	0x00017700

080007a0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <MX_I2S3_Init+0x54>)
 80007a6:	4a14      	ldr	r2, [pc, #80]	; (80007f8 <MX_I2S3_Init+0x58>)
 80007a8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_I2S3_Init+0x54>)
 80007ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <MX_I2S3_Init+0x54>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_I2S3_Init+0x54>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <MX_I2S3_Init+0x54>)
 80007c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_I2S3_Init+0x54>)
 80007c8:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <MX_I2S3_Init+0x5c>)
 80007ca:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_I2S3_Init+0x54>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <MX_I2S3_Init+0x54>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_I2S3_Init+0x54>)
 80007da:	2200      	movs	r2, #0
 80007dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_I2S3_Init+0x54>)
 80007e0:	f001 f830 	bl	8001844 <HAL_I2S_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007ea:	f000 f933 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000128 	.word	0x20000128
 80007f8:	40003c00 	.word	0x40003c00
 80007fc:	00017700 	.word	0x00017700

08000800 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000804:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_SPI1_Init+0x64>)
 8000806:	4a18      	ldr	r2, [pc, #96]	; (8000868 <MX_SPI1_Init+0x68>)
 8000808:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_SPI1_Init+0x64>)
 800080c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000810:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_SPI1_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_SPI1_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_SPI1_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_SPI1_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_SPI1_Init+0x64>)
 800082c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000830:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_SPI1_Init+0x64>)
 8000834:	2200      	movs	r2, #0
 8000836:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <MX_SPI1_Init+0x64>)
 800083a:	2200      	movs	r2, #0
 800083c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_SPI1_Init+0x64>)
 8000840:	2200      	movs	r2, #0
 8000842:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <MX_SPI1_Init+0x64>)
 8000846:	2200      	movs	r2, #0
 8000848:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_SPI1_Init+0x64>)
 800084c:	220a      	movs	r2, #10
 800084e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_SPI1_Init+0x64>)
 8000852:	f002 fa6b 	bl	8002d2c <HAL_SPI_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800085c:	f000 f8fa 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000170 	.word	0x20000170
 8000868:	40013000 	.word	0x40013000

0800086c <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
	...

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	; 0x30
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]
 8000896:	4b6a      	ldr	r3, [pc, #424]	; (8000a40 <MX_GPIO_Init+0x1c4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a69      	ldr	r2, [pc, #420]	; (8000a40 <MX_GPIO_Init+0x1c4>)
 800089c:	f043 0310 	orr.w	r3, r3, #16
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b67      	ldr	r3, [pc, #412]	; (8000a40 <MX_GPIO_Init+0x1c4>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0310 	and.w	r3, r3, #16
 80008aa:	61bb      	str	r3, [r7, #24]
 80008ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
 80008b2:	4b63      	ldr	r3, [pc, #396]	; (8000a40 <MX_GPIO_Init+0x1c4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a62      	ldr	r2, [pc, #392]	; (8000a40 <MX_GPIO_Init+0x1c4>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b60      	ldr	r3, [pc, #384]	; (8000a40 <MX_GPIO_Init+0x1c4>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b5c      	ldr	r3, [pc, #368]	; (8000a40 <MX_GPIO_Init+0x1c4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a5b      	ldr	r2, [pc, #364]	; (8000a40 <MX_GPIO_Init+0x1c4>)
 80008d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b59      	ldr	r3, [pc, #356]	; (8000a40 <MX_GPIO_Init+0x1c4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b55      	ldr	r3, [pc, #340]	; (8000a40 <MX_GPIO_Init+0x1c4>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a54      	ldr	r2, [pc, #336]	; (8000a40 <MX_GPIO_Init+0x1c4>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b52      	ldr	r3, [pc, #328]	; (8000a40 <MX_GPIO_Init+0x1c4>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	4b4e      	ldr	r3, [pc, #312]	; (8000a40 <MX_GPIO_Init+0x1c4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a4d      	ldr	r2, [pc, #308]	; (8000a40 <MX_GPIO_Init+0x1c4>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b4b      	ldr	r3, [pc, #300]	; (8000a40 <MX_GPIO_Init+0x1c4>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b47      	ldr	r3, [pc, #284]	; (8000a40 <MX_GPIO_Init+0x1c4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a46      	ldr	r2, [pc, #280]	; (8000a40 <MX_GPIO_Init+0x1c4>)
 8000928:	f043 0308 	orr.w	r3, r3, #8
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b44      	ldr	r3, [pc, #272]	; (8000a40 <MX_GPIO_Init+0x1c4>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0308 	and.w	r3, r3, #8
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2108      	movs	r1, #8
 800093e:	4841      	ldr	r0, [pc, #260]	; (8000a44 <MX_GPIO_Init+0x1c8>)
 8000940:	f000 fe08 	bl	8001554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	2101      	movs	r1, #1
 8000948:	483f      	ldr	r0, [pc, #252]	; (8000a48 <MX_GPIO_Init+0x1cc>)
 800094a:	f000 fe03 	bl	8001554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800094e:	2200      	movs	r2, #0
 8000950:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000954:	483d      	ldr	r0, [pc, #244]	; (8000a4c <MX_GPIO_Init+0x1d0>)
 8000956:	f000 fdfd 	bl	8001554 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800095a:	2304      	movs	r3, #4
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4835      	ldr	r0, [pc, #212]	; (8000a44 <MX_GPIO_Init+0x1c8>)
 800096e:	f000 fc6d 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000972:	2308      	movs	r3, #8
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	482e      	ldr	r0, [pc, #184]	; (8000a44 <MX_GPIO_Init+0x1c8>)
 800098a:	f000 fc5f 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800098e:	2332      	movs	r3, #50	; 0x32
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000992:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	4828      	ldr	r0, [pc, #160]	; (8000a44 <MX_GPIO_Init+0x1c8>)
 80009a4:	f000 fc52 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009a8:	2301      	movs	r3, #1
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	4822      	ldr	r0, [pc, #136]	; (8000a48 <MX_GPIO_Init+0x1cc>)
 80009c0:	f000 fc44 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009c4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009c8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	481b      	ldr	r0, [pc, #108]	; (8000a4c <MX_GPIO_Init+0x1d0>)
 80009de:	f000 fc35 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4816      	ldr	r0, [pc, #88]	; (8000a50 <MX_GPIO_Init+0x1d4>)
 80009f8:	f000 fc28 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009fc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a0e:	230a      	movs	r3, #10
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	480d      	ldr	r0, [pc, #52]	; (8000a50 <MX_GPIO_Init+0x1d4>)
 8000a1a:	f000 fc17 	bl	800124c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a1e:	2320      	movs	r3, #32
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a22:	2300      	movs	r3, #0
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4806      	ldr	r0, [pc, #24]	; (8000a4c <MX_GPIO_Init+0x1d0>)
 8000a32:	f000 fc0b 	bl	800124c <HAL_GPIO_Init>

}
 8000a36:	bf00      	nop
 8000a38:	3730      	adds	r7, #48	; 0x30
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40020800 	.word	0x40020800
 8000a4c:	40020c00 	.word	0x40020c00
 8000a50:	40020000 	.word	0x40020000

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
}
 8000a5a:	bf00      	nop

  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  toggle_led(RED);
 8000a5c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a60:	f7ff fd8a 	bl	8000578 <toggle_led>
	  HAL_Delay(50);
 8000a64:	2032      	movs	r0, #50	; 0x32
 8000a66:	f000 fae7 	bl	8001038 <HAL_Delay>
	  toggle_led(RED);
 8000a6a:	e7f7      	b.n	8000a5c <Error_Handler+0x8>

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a0f      	ldr	r2, [pc, #60]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aaa:	2007      	movs	r0, #7
 8000aac:	f000 fb9a 	bl	80011e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800

08000abc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a19      	ldr	r2, [pc, #100]	; (8000b40 <HAL_I2C_MspInit+0x84>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d12c      	bne.n	8000b38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000afa:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b00:	2312      	movs	r3, #18
 8000b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	480c      	ldr	r0, [pc, #48]	; (8000b48 <HAL_I2C_MspInit+0x8c>)
 8000b18:	f000 fb98 	bl	800124c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000b26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40005400 	.word	0x40005400
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020400 	.word	0x40020400

08000b4c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08e      	sub	sp, #56	; 0x38
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a59      	ldr	r2, [pc, #356]	; (8000cd0 <HAL_I2S_MspInit+0x184>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d15b      	bne.n	8000c26 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
 8000b72:	4b58      	ldr	r3, [pc, #352]	; (8000cd4 <HAL_I2S_MspInit+0x188>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	4a57      	ldr	r2, [pc, #348]	; (8000cd4 <HAL_I2S_MspInit+0x188>)
 8000b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7e:	4b55      	ldr	r3, [pc, #340]	; (8000cd4 <HAL_I2S_MspInit+0x188>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b86:	623b      	str	r3, [r7, #32]
 8000b88:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
 8000b8e:	4b51      	ldr	r3, [pc, #324]	; (8000cd4 <HAL_I2S_MspInit+0x188>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a50      	ldr	r2, [pc, #320]	; (8000cd4 <HAL_I2S_MspInit+0x188>)
 8000b94:	f043 0304 	orr.w	r3, r3, #4
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b4e      	ldr	r3, [pc, #312]	; (8000cd4 <HAL_I2S_MspInit+0x188>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0304 	and.w	r3, r3, #4
 8000ba2:	61fb      	str	r3, [r7, #28]
 8000ba4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
 8000baa:	4b4a      	ldr	r3, [pc, #296]	; (8000cd4 <HAL_I2S_MspInit+0x188>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a49      	ldr	r2, [pc, #292]	; (8000cd4 <HAL_I2S_MspInit+0x188>)
 8000bb0:	f043 0302 	orr.w	r3, r3, #2
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b47      	ldr	r3, [pc, #284]	; (8000cd4 <HAL_I2S_MspInit+0x188>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	61bb      	str	r3, [r7, #24]
 8000bc0:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000bd2:	2306      	movs	r3, #6
 8000bd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bda:	4619      	mov	r1, r3
 8000bdc:	483e      	ldr	r0, [pc, #248]	; (8000cd8 <HAL_I2S_MspInit+0x18c>)
 8000bde:	f000 fb35 	bl	800124c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000be2:	2308      	movs	r3, #8
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bf2:	2305      	movs	r3, #5
 8000bf4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4836      	ldr	r0, [pc, #216]	; (8000cd8 <HAL_I2S_MspInit+0x18c>)
 8000bfe:	f000 fb25 	bl	800124c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000c02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c14:	2305      	movs	r3, #5
 8000c16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	482f      	ldr	r0, [pc, #188]	; (8000cdc <HAL_I2S_MspInit+0x190>)
 8000c20:	f000 fb14 	bl	800124c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c24:	e04f      	b.n	8000cc6 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a2d      	ldr	r2, [pc, #180]	; (8000ce0 <HAL_I2S_MspInit+0x194>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d14a      	bne.n	8000cc6 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <HAL_I2S_MspInit+0x188>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c38:	4a26      	ldr	r2, [pc, #152]	; (8000cd4 <HAL_I2S_MspInit+0x188>)
 8000c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c40:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <HAL_I2S_MspInit+0x188>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <HAL_I2S_MspInit+0x188>)
 8000c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c54:	4a1f      	ldr	r2, [pc, #124]	; (8000cd4 <HAL_I2S_MspInit+0x188>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <HAL_I2S_MspInit+0x188>)
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <HAL_I2S_MspInit+0x188>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	4a18      	ldr	r2, [pc, #96]	; (8000cd4 <HAL_I2S_MspInit+0x188>)
 8000c72:	f043 0304 	orr.w	r3, r3, #4
 8000c76:	6313      	str	r3, [r2, #48]	; 0x30
 8000c78:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <HAL_I2S_MspInit+0x188>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7c:	f003 0304 	and.w	r3, r3, #4
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c84:	2310      	movs	r3, #16
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c94:	2306      	movs	r3, #6
 8000c96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4811      	ldr	r0, [pc, #68]	; (8000ce4 <HAL_I2S_MspInit+0x198>)
 8000ca0:	f000 fad4 	bl	800124c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ca4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000cb6:	2306      	movs	r3, #6
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <HAL_I2S_MspInit+0x18c>)
 8000cc2:	f000 fac3 	bl	800124c <HAL_GPIO_Init>
}
 8000cc6:	bf00      	nop
 8000cc8:	3738      	adds	r7, #56	; 0x38
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40003800 	.word	0x40003800
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020800 	.word	0x40020800
 8000cdc:	40020400 	.word	0x40020400
 8000ce0:	40003c00 	.word	0x40003c00
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a19      	ldr	r2, [pc, #100]	; (8000d6c <HAL_SPI_MspInit+0x84>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d12b      	bne.n	8000d62 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <HAL_SPI_MspInit+0x88>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a17      	ldr	r2, [pc, #92]	; (8000d70 <HAL_SPI_MspInit+0x88>)
 8000d14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_SPI_MspInit+0x88>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_SPI_MspInit+0x88>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a10      	ldr	r2, [pc, #64]	; (8000d70 <HAL_SPI_MspInit+0x88>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <HAL_SPI_MspInit+0x88>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d42:	23e0      	movs	r3, #224	; 0xe0
 8000d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d52:	2305      	movs	r3, #5
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4805      	ldr	r0, [pc, #20]	; (8000d74 <HAL_SPI_MspInit+0x8c>)
 8000d5e:	f000 fa75 	bl	800124c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d62:	bf00      	nop
 8000d64:	3728      	adds	r7, #40	; 0x28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40013000 	.word	0x40013000
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020000 	.word	0x40020000

08000d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <NMI_Handler+0x4>

08000d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <HardFault_Handler+0x4>

08000d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <MemManage_Handler+0x4>

08000d8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <BusFault_Handler+0x4>

08000d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <UsageFault_Handler+0x4>

08000d96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc4:	f000 f918 	bl	8000ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	e00a      	b.n	8000df4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000dde:	f3af 8000 	nop.w
 8000de2:	4601      	mov	r1, r0
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	1c5a      	adds	r2, r3, #1
 8000de8:	60ba      	str	r2, [r7, #8]
 8000dea:	b2ca      	uxtb	r2, r1
 8000dec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	3301      	adds	r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	dbf0      	blt.n	8000dde <_read+0x12>
	}

return len;
 8000dfc:	687b      	ldr	r3, [r7, #4]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b083      	sub	sp, #12
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e2e:	605a      	str	r2, [r3, #4]
	return 0;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <_isatty>:

int _isatty(int file)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
	return 1;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e78:	4a14      	ldr	r2, [pc, #80]	; (8000ecc <_sbrk+0x5c>)
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <_sbrk+0x60>)
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <_sbrk+0x64>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d102      	bne.n	8000e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <_sbrk+0x64>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <_sbrk+0x68>)
 8000e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <_sbrk+0x64>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d207      	bcs.n	8000eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea0:	f001 ffce 	bl	8002e40 <__errno>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000eae:	e009      	b.n	8000ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eb6:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <_sbrk+0x64>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <_sbrk+0x64>)
 8000ec0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20020000 	.word	0x20020000
 8000ed0:	00000400 	.word	0x00000400
 8000ed4:	200001c8 	.word	0x200001c8
 8000ed8:	200001e0 	.word	0x200001e0

08000edc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <SystemInit+0x20>)
 8000ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <SystemInit+0x20>)
 8000ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f04:	480d      	ldr	r0, [pc, #52]	; (8000f3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f06:	490e      	ldr	r1, [pc, #56]	; (8000f40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f08:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f1c:	4c0b      	ldr	r4, [pc, #44]	; (8000f4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f2a:	f7ff ffd7 	bl	8000edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2e:	f001 ff8d 	bl	8002e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f32:	f7ff fb31 	bl	8000598 <main>
  bx  lr    
 8000f36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f44:	0800394c 	.word	0x0800394c
  ldr r2, =_sbss
 8000f48:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f4c:	200001e0 	.word	0x200001e0

08000f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC_IRQHandler>
	...

08000f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f58:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <HAL_Init+0x40>)
 8000f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <HAL_Init+0x40>)
 8000f6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <HAL_Init+0x40>)
 8000f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f7c:	2003      	movs	r0, #3
 8000f7e:	f000 f931 	bl	80011e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f82:	2000      	movs	r0, #0
 8000f84:	f000 f808 	bl	8000f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f88:	f7ff fd70 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023c00 	.word	0x40023c00

08000f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_InitTick+0x54>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_InitTick+0x58>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 f93b 	bl	8001232 <HAL_SYSTICK_Config>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00e      	b.n	8000fe4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b0f      	cmp	r3, #15
 8000fca:	d80a      	bhi.n	8000fe2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd4:	f000 f911 	bl	80011fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd8:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <HAL_InitTick+0x5c>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e000      	b.n	8000fe4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	20000004 	.word	0x20000004

08000ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_IncTick+0x20>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x24>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <HAL_IncTick+0x24>)
 800100a:	6013      	str	r3, [r2, #0]
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000008 	.word	0x20000008
 800101c:	200001cc 	.word	0x200001cc

08001020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b03      	ldr	r3, [pc, #12]	; (8001034 <HAL_GetTick+0x14>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	200001cc 	.word	0x200001cc

08001038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001040:	f7ff ffee 	bl	8001020 <HAL_GetTick>
 8001044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001050:	d005      	beq.n	800105e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <HAL_Delay+0x44>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4413      	add	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800105e:	bf00      	nop
 8001060:	f7ff ffde 	bl	8001020 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	429a      	cmp	r2, r3
 800106e:	d8f7      	bhi.n	8001060 <HAL_Delay+0x28>
  {
  }
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000008 	.word	0x20000008

08001080 <__NVIC_SetPriorityGrouping>:
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800109c:	4013      	ands	r3, r2
 800109e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b2:	4a04      	ldr	r2, [pc, #16]	; (80010c4 <__NVIC_SetPriorityGrouping+0x44>)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	60d3      	str	r3, [r2, #12]
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <__NVIC_GetPriorityGrouping>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	0a1b      	lsrs	r3, r3, #8
 80010d2:	f003 0307 	and.w	r3, r3, #7
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_SetPriority>:
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	db0a      	blt.n	800110e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	490c      	ldr	r1, [pc, #48]	; (8001130 <__NVIC_SetPriority+0x4c>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	0112      	lsls	r2, r2, #4
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	440b      	add	r3, r1
 8001108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800110c:	e00a      	b.n	8001124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4908      	ldr	r1, [pc, #32]	; (8001134 <__NVIC_SetPriority+0x50>)
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	3b04      	subs	r3, #4
 800111c:	0112      	lsls	r2, r2, #4
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	440b      	add	r3, r1
 8001122:	761a      	strb	r2, [r3, #24]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000e100 	.word	0xe000e100
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <NVIC_EncodePriority>:
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f1c3 0307 	rsb	r3, r3, #7
 8001152:	2b04      	cmp	r3, #4
 8001154:	bf28      	it	cs
 8001156:	2304      	movcs	r3, #4
 8001158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3304      	adds	r3, #4
 800115e:	2b06      	cmp	r3, #6
 8001160:	d902      	bls.n	8001168 <NVIC_EncodePriority+0x30>
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3b03      	subs	r3, #3
 8001166:	e000      	b.n	800116a <NVIC_EncodePriority+0x32>
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	f04f 32ff 	mov.w	r2, #4294967295
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43da      	mvns	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	401a      	ands	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001180:	f04f 31ff 	mov.w	r1, #4294967295
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	43d9      	mvns	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	4313      	orrs	r3, r2
}
 8001192:	4618      	mov	r0, r3
 8001194:	3724      	adds	r7, #36	; 0x24
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <SysTick_Config>:
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b0:	d301      	bcc.n	80011b6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00f      	b.n	80011d6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b6:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <SysTick_Config+0x40>)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011be:	210f      	movs	r1, #15
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f7ff ff8e 	bl	80010e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <SysTick_Config+0x40>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ce:	4b04      	ldr	r3, [pc, #16]	; (80011e0 <SysTick_Config+0x40>)
 80011d0:	2207      	movs	r2, #7
 80011d2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	e000e010 	.word	0xe000e010

080011e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff47 	bl	8001080 <__NVIC_SetPriorityGrouping>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b086      	sub	sp, #24
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
 8001206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800120c:	f7ff ff5c 	bl	80010c8 <__NVIC_GetPriorityGrouping>
 8001210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	6978      	ldr	r0, [r7, #20]
 8001218:	f7ff ff8e 	bl	8001138 <NVIC_EncodePriority>
 800121c:	4602      	mov	r2, r0
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff5d 	bl	80010e4 <__NVIC_SetPriority>
}
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ffb0 	bl	80011a0 <SysTick_Config>
 8001240:	4603      	mov	r3, r0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	; 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
 8001266:	e159      	b.n	800151c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001268:	2201      	movs	r2, #1
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	4013      	ands	r3, r2
 800127a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	429a      	cmp	r2, r3
 8001282:	f040 8148 	bne.w	8001516 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f003 0303 	and.w	r3, r3, #3
 800128e:	2b01      	cmp	r3, #1
 8001290:	d005      	beq.n	800129e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800129a:	2b02      	cmp	r3, #2
 800129c:	d130      	bne.n	8001300 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	2203      	movs	r2, #3
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	68da      	ldr	r2, [r3, #12]
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012d4:	2201      	movs	r2, #1
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	f003 0201 	and.w	r2, r3, #1
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	2b03      	cmp	r3, #3
 800130a:	d017      	beq.n	800133c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2203      	movs	r2, #3
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d123      	bne.n	8001390 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	08da      	lsrs	r2, r3, #3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3208      	adds	r2, #8
 8001350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001354:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	220f      	movs	r2, #15
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	691a      	ldr	r2, [r3, #16]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	08da      	lsrs	r2, r3, #3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3208      	adds	r2, #8
 800138a:	69b9      	ldr	r1, [r7, #24]
 800138c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0203 	and.w	r2, r3, #3
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 80a2 	beq.w	8001516 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b57      	ldr	r3, [pc, #348]	; (8001534 <HAL_GPIO_Init+0x2e8>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	4a56      	ldr	r2, [pc, #344]	; (8001534 <HAL_GPIO_Init+0x2e8>)
 80013dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e0:	6453      	str	r3, [r2, #68]	; 0x44
 80013e2:	4b54      	ldr	r3, [pc, #336]	; (8001534 <HAL_GPIO_Init+0x2e8>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ee:	4a52      	ldr	r2, [pc, #328]	; (8001538 <HAL_GPIO_Init+0x2ec>)
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	089b      	lsrs	r3, r3, #2
 80013f4:	3302      	adds	r3, #2
 80013f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	220f      	movs	r2, #15
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a49      	ldr	r2, [pc, #292]	; (800153c <HAL_GPIO_Init+0x2f0>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d019      	beq.n	800144e <HAL_GPIO_Init+0x202>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a48      	ldr	r2, [pc, #288]	; (8001540 <HAL_GPIO_Init+0x2f4>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d013      	beq.n	800144a <HAL_GPIO_Init+0x1fe>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a47      	ldr	r2, [pc, #284]	; (8001544 <HAL_GPIO_Init+0x2f8>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d00d      	beq.n	8001446 <HAL_GPIO_Init+0x1fa>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a46      	ldr	r2, [pc, #280]	; (8001548 <HAL_GPIO_Init+0x2fc>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d007      	beq.n	8001442 <HAL_GPIO_Init+0x1f6>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a45      	ldr	r2, [pc, #276]	; (800154c <HAL_GPIO_Init+0x300>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d101      	bne.n	800143e <HAL_GPIO_Init+0x1f2>
 800143a:	2304      	movs	r3, #4
 800143c:	e008      	b.n	8001450 <HAL_GPIO_Init+0x204>
 800143e:	2307      	movs	r3, #7
 8001440:	e006      	b.n	8001450 <HAL_GPIO_Init+0x204>
 8001442:	2303      	movs	r3, #3
 8001444:	e004      	b.n	8001450 <HAL_GPIO_Init+0x204>
 8001446:	2302      	movs	r3, #2
 8001448:	e002      	b.n	8001450 <HAL_GPIO_Init+0x204>
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <HAL_GPIO_Init+0x204>
 800144e:	2300      	movs	r3, #0
 8001450:	69fa      	ldr	r2, [r7, #28]
 8001452:	f002 0203 	and.w	r2, r2, #3
 8001456:	0092      	lsls	r2, r2, #2
 8001458:	4093      	lsls	r3, r2
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001460:	4935      	ldr	r1, [pc, #212]	; (8001538 <HAL_GPIO_Init+0x2ec>)
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	089b      	lsrs	r3, r3, #2
 8001466:	3302      	adds	r3, #2
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800146e:	4b38      	ldr	r3, [pc, #224]	; (8001550 <HAL_GPIO_Init+0x304>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001492:	4a2f      	ldr	r2, [pc, #188]	; (8001550 <HAL_GPIO_Init+0x304>)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001498:	4b2d      	ldr	r3, [pc, #180]	; (8001550 <HAL_GPIO_Init+0x304>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014bc:	4a24      	ldr	r2, [pc, #144]	; (8001550 <HAL_GPIO_Init+0x304>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014c2:	4b23      	ldr	r3, [pc, #140]	; (8001550 <HAL_GPIO_Init+0x304>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014e6:	4a1a      	ldr	r2, [pc, #104]	; (8001550 <HAL_GPIO_Init+0x304>)
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014ec:	4b18      	ldr	r3, [pc, #96]	; (8001550 <HAL_GPIO_Init+0x304>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001510:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <HAL_GPIO_Init+0x304>)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3301      	adds	r3, #1
 800151a:	61fb      	str	r3, [r7, #28]
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	2b0f      	cmp	r3, #15
 8001520:	f67f aea2 	bls.w	8001268 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3724      	adds	r7, #36	; 0x24
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800
 8001538:	40013800 	.word	0x40013800
 800153c:	40020000 	.word	0x40020000
 8001540:	40020400 	.word	0x40020400
 8001544:	40020800 	.word	0x40020800
 8001548:	40020c00 	.word	0x40020c00
 800154c:	40021000 	.word	0x40021000
 8001550:	40013c00 	.word	0x40013c00

08001554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	807b      	strh	r3, [r7, #2]
 8001560:	4613      	mov	r3, r2
 8001562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001564:	787b      	ldrb	r3, [r7, #1]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800156a:	887a      	ldrh	r2, [r7, #2]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001570:	e003      	b.n	800157a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001572:	887b      	ldrh	r3, [r7, #2]
 8001574:	041a      	lsls	r2, r3, #16
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	619a      	str	r2, [r3, #24]
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001586:	b480      	push	{r7}
 8001588:	b085      	sub	sp, #20
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	460b      	mov	r3, r1
 8001590:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001598:	887a      	ldrh	r2, [r7, #2]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4013      	ands	r3, r2
 800159e:	041a      	lsls	r2, r3, #16
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	43d9      	mvns	r1, r3
 80015a4:	887b      	ldrh	r3, [r7, #2]
 80015a6:	400b      	ands	r3, r1
 80015a8:	431a      	orrs	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	619a      	str	r2, [r3, #24]
}
 80015ae:	bf00      	nop
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e12b      	b.n	8001826 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d106      	bne.n	80015e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff fa6a 	bl	8000abc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2224      	movs	r2, #36	; 0x24
 80015ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0201 	bic.w	r2, r2, #1
 80015fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800160e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800161e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001620:	f001 fa20 	bl	8002a64 <HAL_RCC_GetPCLK1Freq>
 8001624:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	4a81      	ldr	r2, [pc, #516]	; (8001830 <HAL_I2C_Init+0x274>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d807      	bhi.n	8001640 <HAL_I2C_Init+0x84>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4a80      	ldr	r2, [pc, #512]	; (8001834 <HAL_I2C_Init+0x278>)
 8001634:	4293      	cmp	r3, r2
 8001636:	bf94      	ite	ls
 8001638:	2301      	movls	r3, #1
 800163a:	2300      	movhi	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	e006      	b.n	800164e <HAL_I2C_Init+0x92>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4a7d      	ldr	r2, [pc, #500]	; (8001838 <HAL_I2C_Init+0x27c>)
 8001644:	4293      	cmp	r3, r2
 8001646:	bf94      	ite	ls
 8001648:	2301      	movls	r3, #1
 800164a:	2300      	movhi	r3, #0
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e0e7      	b.n	8001826 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4a78      	ldr	r2, [pc, #480]	; (800183c <HAL_I2C_Init+0x280>)
 800165a:	fba2 2303 	umull	r2, r3, r2, r3
 800165e:	0c9b      	lsrs	r3, r3, #18
 8001660:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68ba      	ldr	r2, [r7, #8]
 8001672:	430a      	orrs	r2, r1
 8001674:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	4a6a      	ldr	r2, [pc, #424]	; (8001830 <HAL_I2C_Init+0x274>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d802      	bhi.n	8001690 <HAL_I2C_Init+0xd4>
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	3301      	adds	r3, #1
 800168e:	e009      	b.n	80016a4 <HAL_I2C_Init+0xe8>
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001696:	fb02 f303 	mul.w	r3, r2, r3
 800169a:	4a69      	ldr	r2, [pc, #420]	; (8001840 <HAL_I2C_Init+0x284>)
 800169c:	fba2 2303 	umull	r2, r3, r2, r3
 80016a0:	099b      	lsrs	r3, r3, #6
 80016a2:	3301      	adds	r3, #1
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	430b      	orrs	r3, r1
 80016aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	495c      	ldr	r1, [pc, #368]	; (8001830 <HAL_I2C_Init+0x274>)
 80016c0:	428b      	cmp	r3, r1
 80016c2:	d819      	bhi.n	80016f8 <HAL_I2C_Init+0x13c>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	1e59      	subs	r1, r3, #1
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80016d2:	1c59      	adds	r1, r3, #1
 80016d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80016d8:	400b      	ands	r3, r1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00a      	beq.n	80016f4 <HAL_I2C_Init+0x138>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1e59      	subs	r1, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80016ec:	3301      	adds	r3, #1
 80016ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f2:	e051      	b.n	8001798 <HAL_I2C_Init+0x1dc>
 80016f4:	2304      	movs	r3, #4
 80016f6:	e04f      	b.n	8001798 <HAL_I2C_Init+0x1dc>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d111      	bne.n	8001724 <HAL_I2C_Init+0x168>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	1e58      	subs	r0, r3, #1
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6859      	ldr	r1, [r3, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	440b      	add	r3, r1
 800170e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001712:	3301      	adds	r3, #1
 8001714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001718:	2b00      	cmp	r3, #0
 800171a:	bf0c      	ite	eq
 800171c:	2301      	moveq	r3, #1
 800171e:	2300      	movne	r3, #0
 8001720:	b2db      	uxtb	r3, r3
 8001722:	e012      	b.n	800174a <HAL_I2C_Init+0x18e>
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	1e58      	subs	r0, r3, #1
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6859      	ldr	r1, [r3, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	0099      	lsls	r1, r3, #2
 8001734:	440b      	add	r3, r1
 8001736:	fbb0 f3f3 	udiv	r3, r0, r3
 800173a:	3301      	adds	r3, #1
 800173c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001740:	2b00      	cmp	r3, #0
 8001742:	bf0c      	ite	eq
 8001744:	2301      	moveq	r3, #1
 8001746:	2300      	movne	r3, #0
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_I2C_Init+0x196>
 800174e:	2301      	movs	r3, #1
 8001750:	e022      	b.n	8001798 <HAL_I2C_Init+0x1dc>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d10e      	bne.n	8001778 <HAL_I2C_Init+0x1bc>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	1e58      	subs	r0, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6859      	ldr	r1, [r3, #4]
 8001762:	460b      	mov	r3, r1
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	440b      	add	r3, r1
 8001768:	fbb0 f3f3 	udiv	r3, r0, r3
 800176c:	3301      	adds	r3, #1
 800176e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001776:	e00f      	b.n	8001798 <HAL_I2C_Init+0x1dc>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	1e58      	subs	r0, r3, #1
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6859      	ldr	r1, [r3, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	440b      	add	r3, r1
 8001786:	0099      	lsls	r1, r3, #2
 8001788:	440b      	add	r3, r1
 800178a:	fbb0 f3f3 	udiv	r3, r0, r3
 800178e:	3301      	adds	r3, #1
 8001790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001794:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	6809      	ldr	r1, [r1, #0]
 800179c:	4313      	orrs	r3, r2
 800179e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69da      	ldr	r2, [r3, #28]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6911      	ldr	r1, [r2, #16]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	68d2      	ldr	r2, [r2, #12]
 80017d2:	4311      	orrs	r1, r2
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	430b      	orrs	r3, r1
 80017da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	695a      	ldr	r2, [r3, #20]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0201 	orr.w	r2, r2, #1
 8001806:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2220      	movs	r2, #32
 8001812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	000186a0 	.word	0x000186a0
 8001834:	001e847f 	.word	0x001e847f
 8001838:	003d08ff 	.word	0x003d08ff
 800183c:	431bde83 	.word	0x431bde83
 8001840:	10624dd3 	.word	0x10624dd3

08001844 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e128      	b.n	8001aa8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d109      	bne.n	8001876 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a90      	ldr	r2, [pc, #576]	; (8001ab0 <HAL_I2S_Init+0x26c>)
 800186e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff f96b 	bl	8000b4c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2202      	movs	r2, #2
 800187a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800188c:	f023 030f 	bic.w	r3, r3, #15
 8001890:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2202      	movs	r2, #2
 8001898:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d060      	beq.n	8001964 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d102      	bne.n	80018b0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80018aa:	2310      	movs	r3, #16
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	e001      	b.n	80018b4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80018b0:	2320      	movs	r3, #32
 80018b2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b20      	cmp	r3, #32
 80018ba:	d802      	bhi.n	80018c2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80018c2:	2001      	movs	r0, #1
 80018c4:	f001 f9d2 	bl	8002c6c <HAL_RCCEx_GetPeriphCLKFreq>
 80018c8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018d2:	d125      	bne.n	8001920 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d010      	beq.n	80018fe <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	461a      	mov	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f8:	3305      	adds	r3, #5
 80018fa:	613b      	str	r3, [r7, #16]
 80018fc:	e01f      	b.n	800193e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	fbb2 f2f3 	udiv	r2, r2, r3
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	461a      	mov	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	fbb2 f3f3 	udiv	r3, r2, r3
 800191a:	3305      	adds	r3, #5
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	e00e      	b.n	800193e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	fbb2 f2f3 	udiv	r2, r2, r3
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	461a      	mov	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	fbb2 f3f3 	udiv	r3, r2, r3
 800193a:	3305      	adds	r3, #5
 800193c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4a5c      	ldr	r2, [pc, #368]	; (8001ab4 <HAL_I2S_Init+0x270>)
 8001942:	fba2 2303 	umull	r2, r3, r2, r3
 8001946:	08db      	lsrs	r3, r3, #3
 8001948:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	085b      	lsrs	r3, r3, #1
 800195a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	021b      	lsls	r3, r3, #8
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	e003      	b.n	800196c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001964:	2302      	movs	r3, #2
 8001966:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d902      	bls.n	8001978 <HAL_I2S_Init+0x134>
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	2bff      	cmp	r3, #255	; 0xff
 8001976:	d907      	bls.n	8001988 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197c:	f043 0210 	orr.w	r2, r3, #16
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e08f      	b.n	8001aa8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691a      	ldr	r2, [r3, #16]
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	ea42 0103 	orr.w	r1, r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	430a      	orrs	r2, r1
 800199a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80019a6:	f023 030f 	bic.w	r3, r3, #15
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6851      	ldr	r1, [r2, #4]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6892      	ldr	r2, [r2, #8]
 80019b2:	4311      	orrs	r1, r2
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	68d2      	ldr	r2, [r2, #12]
 80019b8:	4311      	orrs	r1, r2
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6992      	ldr	r2, [r2, #24]
 80019be:	430a      	orrs	r2, r1
 80019c0:	431a      	orrs	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019ca:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d161      	bne.n	8001a98 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a38      	ldr	r2, [pc, #224]	; (8001ab8 <HAL_I2S_Init+0x274>)
 80019d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a37      	ldr	r2, [pc, #220]	; (8001abc <HAL_I2S_Init+0x278>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d101      	bne.n	80019e8 <HAL_I2S_Init+0x1a4>
 80019e4:	4b36      	ldr	r3, [pc, #216]	; (8001ac0 <HAL_I2S_Init+0x27c>)
 80019e6:	e001      	b.n	80019ec <HAL_I2S_Init+0x1a8>
 80019e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6812      	ldr	r2, [r2, #0]
 80019f2:	4932      	ldr	r1, [pc, #200]	; (8001abc <HAL_I2S_Init+0x278>)
 80019f4:	428a      	cmp	r2, r1
 80019f6:	d101      	bne.n	80019fc <HAL_I2S_Init+0x1b8>
 80019f8:	4a31      	ldr	r2, [pc, #196]	; (8001ac0 <HAL_I2S_Init+0x27c>)
 80019fa:	e001      	b.n	8001a00 <HAL_I2S_Init+0x1bc>
 80019fc:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001a00:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a04:	f023 030f 	bic.w	r3, r3, #15
 8001a08:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a2b      	ldr	r2, [pc, #172]	; (8001abc <HAL_I2S_Init+0x278>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d101      	bne.n	8001a18 <HAL_I2S_Init+0x1d4>
 8001a14:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <HAL_I2S_Init+0x27c>)
 8001a16:	e001      	b.n	8001a1c <HAL_I2S_Init+0x1d8>
 8001a18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a25      	ldr	r2, [pc, #148]	; (8001abc <HAL_I2S_Init+0x278>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d101      	bne.n	8001a2e <HAL_I2S_Init+0x1ea>
 8001a2a:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <HAL_I2S_Init+0x27c>)
 8001a2c:	e001      	b.n	8001a32 <HAL_I2S_Init+0x1ee>
 8001a2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a3e:	d003      	beq.n	8001a48 <HAL_I2S_Init+0x204>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d103      	bne.n	8001a50 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001a48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	e001      	b.n	8001a54 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001a50:	2300      	movs	r3, #0
 8001a52:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001a72:	4313      	orrs	r3, r2
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	897b      	ldrh	r3, [r7, #10]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a80:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a0d      	ldr	r2, [pc, #52]	; (8001abc <HAL_I2S_Init+0x278>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d101      	bne.n	8001a90 <HAL_I2S_Init+0x24c>
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <HAL_I2S_Init+0x27c>)
 8001a8e:	e001      	b.n	8001a94 <HAL_I2S_Init+0x250>
 8001a90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a94:	897a      	ldrh	r2, [r7, #10]
 8001a96:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3720      	adds	r7, #32
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	08001bbb 	.word	0x08001bbb
 8001ab4:	cccccccd 	.word	0xcccccccd
 8001ab8:	08001cd1 	.word	0x08001cd1
 8001abc:	40003800 	.word	0x40003800
 8001ac0:	40003400 	.word	0x40003400

08001ac4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	881a      	ldrh	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	1c9a      	adds	r2, r3, #2
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	3b01      	subs	r3, #1
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10e      	bne.n	8001b54 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b44:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff ffb8 	bl	8001ac4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6e:	b292      	uxth	r2, r2
 8001b70:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b76:	1c9a      	adds	r2, r3, #2
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	3b01      	subs	r3, #1
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10e      	bne.n	8001bb2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ba2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ff93 	bl	8001ad8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d13a      	bne.n	8001c4c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d109      	bne.n	8001bf4 <I2S_IRQHandler+0x3a>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bea:	2b40      	cmp	r3, #64	; 0x40
 8001bec:	d102      	bne.n	8001bf4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff ffb4 	bl	8001b5c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bfa:	2b40      	cmp	r3, #64	; 0x40
 8001bfc:	d126      	bne.n	8001c4c <I2S_IRQHandler+0x92>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0320 	and.w	r3, r3, #32
 8001c08:	2b20      	cmp	r3, #32
 8001c0a:	d11f      	bne.n	8001c4c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c1a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	f043 0202 	orr.w	r2, r3, #2
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff ff50 	bl	8001aec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d136      	bne.n	8001cc6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d109      	bne.n	8001c76 <I2S_IRQHandler+0xbc>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6c:	2b80      	cmp	r3, #128	; 0x80
 8001c6e:	d102      	bne.n	8001c76 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff ff45 	bl	8001b00 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d122      	bne.n	8001cc6 <I2S_IRQHandler+0x10c>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 0320 	and.w	r3, r3, #32
 8001c8a:	2b20      	cmp	r3, #32
 8001c8c:	d11b      	bne.n	8001cc6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c9c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb8:	f043 0204 	orr.w	r2, r3, #4
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ff13 	bl	8001aec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001cc6:	bf00      	nop
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a92      	ldr	r2, [pc, #584]	; (8001f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d101      	bne.n	8001cee <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001cea:	4b92      	ldr	r3, [pc, #584]	; (8001f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001cec:	e001      	b.n	8001cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001cee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a8b      	ldr	r2, [pc, #556]	; (8001f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d101      	bne.n	8001d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001d08:	4b8a      	ldr	r3, [pc, #552]	; (8001f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d0a:	e001      	b.n	8001d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001d0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d1c:	d004      	beq.n	8001d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f040 8099 	bne.w	8001e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d107      	bne.n	8001d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f925 	bl	8001f8c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d107      	bne.n	8001d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d002      	beq.n	8001d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f9c8 	bl	80020ec <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d62:	2b40      	cmp	r3, #64	; 0x40
 8001d64:	d13a      	bne.n	8001ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	f003 0320 	and.w	r3, r3, #32
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d035      	beq.n	8001ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a6e      	ldr	r2, [pc, #440]	; (8001f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d101      	bne.n	8001d7e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001d7a:	4b6e      	ldr	r3, [pc, #440]	; (8001f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d7c:	e001      	b.n	8001d82 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001d7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4969      	ldr	r1, [pc, #420]	; (8001f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d8a:	428b      	cmp	r3, r1
 8001d8c:	d101      	bne.n	8001d92 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001d8e:	4b69      	ldr	r3, [pc, #420]	; (8001f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d90:	e001      	b.n	8001d96 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001d92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d9a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001daa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	f043 0202 	orr.w	r2, r3, #2
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff fe88 	bl	8001aec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	2b08      	cmp	r3, #8
 8001de4:	f040 80c3 	bne.w	8001f6e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f003 0320 	and.w	r3, r3, #32
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 80bd 	beq.w	8001f6e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e02:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a49      	ldr	r2, [pc, #292]	; (8001f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d101      	bne.n	8001e12 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001e0e:	4b49      	ldr	r3, [pc, #292]	; (8001f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e10:	e001      	b.n	8001e16 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001e12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4944      	ldr	r1, [pc, #272]	; (8001f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e1e:	428b      	cmp	r3, r1
 8001e20:	d101      	bne.n	8001e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001e22:	4b44      	ldr	r3, [pc, #272]	; (8001f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e24:	e001      	b.n	8001e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001e26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e2e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001e30:	2300      	movs	r3, #0
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	f043 0204 	orr.w	r2, r3, #4
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff fe4a 	bl	8001aec <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e58:	e089      	b.n	8001f6e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d107      	bne.n	8001e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d002      	beq.n	8001e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f8be 	bl	8001ff0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d107      	bne.n	8001e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f8fd 	bl	8002088 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e94:	2b40      	cmp	r3, #64	; 0x40
 8001e96:	d12f      	bne.n	8001ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f003 0320 	and.w	r3, r3, #32
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d02a      	beq.n	8001ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001eb0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a1e      	ldr	r2, [pc, #120]	; (8001f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d101      	bne.n	8001ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001ebc:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ebe:	e001      	b.n	8001ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001ec0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4919      	ldr	r1, [pc, #100]	; (8001f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ecc:	428b      	cmp	r3, r1
 8001ece:	d101      	bne.n	8001ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001ed0:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ed2:	e001      	b.n	8001ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001ed4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ed8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001edc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	f043 0202 	orr.w	r2, r3, #2
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff fdfa 	bl	8001aec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d136      	bne.n	8001f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	f003 0320 	and.w	r3, r3, #32
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d031      	beq.n	8001f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a07      	ldr	r2, [pc, #28]	; (8001f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d101      	bne.n	8001f1a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001f16:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f18:	e001      	b.n	8001f1e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001f1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4902      	ldr	r1, [pc, #8]	; (8001f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f26:	428b      	cmp	r3, r1
 8001f28:	d106      	bne.n	8001f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001f2a:	4b02      	ldr	r3, [pc, #8]	; (8001f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f2c:	e006      	b.n	8001f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001f2e:	bf00      	nop
 8001f30:	40003800 	.word	0x40003800
 8001f34:	40003400 	.word	0x40003400
 8001f38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f40:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f50:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	f043 0204 	orr.w	r2, r3, #4
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff fdc0 	bl	8001aec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f6c:	e000      	b.n	8001f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f6e:	bf00      	nop
}
 8001f70:	bf00      	nop
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	1c99      	adds	r1, r3, #2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6251      	str	r1, [r2, #36]	; 0x24
 8001f9e:	881a      	ldrh	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	3b01      	subs	r3, #1
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d113      	bne.n	8001fe6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fcc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d106      	bne.n	8001fe6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ffc9 	bl	8001f78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	1c99      	adds	r1, r3, #2
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6251      	str	r1, [r2, #36]	; 0x24
 8002002:	8819      	ldrh	r1, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a1d      	ldr	r2, [pc, #116]	; (8002080 <I2SEx_TxISR_I2SExt+0x90>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d101      	bne.n	8002012 <I2SEx_TxISR_I2SExt+0x22>
 800200e:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <I2SEx_TxISR_I2SExt+0x94>)
 8002010:	e001      	b.n	8002016 <I2SEx_TxISR_I2SExt+0x26>
 8002012:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002016:	460a      	mov	r2, r1
 8002018:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800201e:	b29b      	uxth	r3, r3
 8002020:	3b01      	subs	r3, #1
 8002022:	b29a      	uxth	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800202c:	b29b      	uxth	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d121      	bne.n	8002076 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a12      	ldr	r2, [pc, #72]	; (8002080 <I2SEx_TxISR_I2SExt+0x90>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d101      	bne.n	8002040 <I2SEx_TxISR_I2SExt+0x50>
 800203c:	4b11      	ldr	r3, [pc, #68]	; (8002084 <I2SEx_TxISR_I2SExt+0x94>)
 800203e:	e001      	b.n	8002044 <I2SEx_TxISR_I2SExt+0x54>
 8002040:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	490d      	ldr	r1, [pc, #52]	; (8002080 <I2SEx_TxISR_I2SExt+0x90>)
 800204c:	428b      	cmp	r3, r1
 800204e:	d101      	bne.n	8002054 <I2SEx_TxISR_I2SExt+0x64>
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <I2SEx_TxISR_I2SExt+0x94>)
 8002052:	e001      	b.n	8002058 <I2SEx_TxISR_I2SExt+0x68>
 8002054:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002058:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800205c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002062:	b29b      	uxth	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d106      	bne.n	8002076 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff ff81 	bl	8001f78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40003800 	.word	0x40003800
 8002084:	40003400 	.word	0x40003400

08002088 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68d8      	ldr	r0, [r3, #12]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209a:	1c99      	adds	r1, r3, #2
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	62d1      	str	r1, [r2, #44]	; 0x2c
 80020a0:	b282      	uxth	r2, r0
 80020a2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d113      	bne.n	80020e4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020ca:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d106      	bne.n	80020e4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff ff4a 	bl	8001f78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a20      	ldr	r2, [pc, #128]	; (800217c <I2SEx_RxISR_I2SExt+0x90>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d101      	bne.n	8002102 <I2SEx_RxISR_I2SExt+0x16>
 80020fe:	4b20      	ldr	r3, [pc, #128]	; (8002180 <I2SEx_RxISR_I2SExt+0x94>)
 8002100:	e001      	b.n	8002106 <I2SEx_RxISR_I2SExt+0x1a>
 8002102:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002106:	68d8      	ldr	r0, [r3, #12]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210c:	1c99      	adds	r1, r3, #2
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002112:	b282      	uxth	r2, r0
 8002114:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800211a:	b29b      	uxth	r3, r3
 800211c:	3b01      	subs	r3, #1
 800211e:	b29a      	uxth	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002128:	b29b      	uxth	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d121      	bne.n	8002172 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a12      	ldr	r2, [pc, #72]	; (800217c <I2SEx_RxISR_I2SExt+0x90>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d101      	bne.n	800213c <I2SEx_RxISR_I2SExt+0x50>
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <I2SEx_RxISR_I2SExt+0x94>)
 800213a:	e001      	b.n	8002140 <I2SEx_RxISR_I2SExt+0x54>
 800213c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	490d      	ldr	r1, [pc, #52]	; (800217c <I2SEx_RxISR_I2SExt+0x90>)
 8002148:	428b      	cmp	r3, r1
 800214a:	d101      	bne.n	8002150 <I2SEx_RxISR_I2SExt+0x64>
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <I2SEx_RxISR_I2SExt+0x94>)
 800214e:	e001      	b.n	8002154 <I2SEx_RxISR_I2SExt+0x68>
 8002150:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002154:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002158:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215e:	b29b      	uxth	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	d106      	bne.n	8002172 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f7ff ff03 	bl	8001f78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40003800 	.word	0x40003800
 8002180:	40003400 	.word	0x40003400

08002184 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e267      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d075      	beq.n	800228e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021a2:	4b88      	ldr	r3, [pc, #544]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d00c      	beq.n	80021c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ae:	4b85      	ldr	r3, [pc, #532]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d112      	bne.n	80021e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ba:	4b82      	ldr	r3, [pc, #520]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021c6:	d10b      	bne.n	80021e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c8:	4b7e      	ldr	r3, [pc, #504]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d05b      	beq.n	800228c <HAL_RCC_OscConfig+0x108>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d157      	bne.n	800228c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e242      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e8:	d106      	bne.n	80021f8 <HAL_RCC_OscConfig+0x74>
 80021ea:	4b76      	ldr	r3, [pc, #472]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a75      	ldr	r2, [pc, #468]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e01d      	b.n	8002234 <HAL_RCC_OscConfig+0xb0>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0x98>
 8002202:	4b70      	ldr	r3, [pc, #448]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a6f      	ldr	r2, [pc, #444]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	4b6d      	ldr	r3, [pc, #436]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a6c      	ldr	r2, [pc, #432]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e00b      	b.n	8002234 <HAL_RCC_OscConfig+0xb0>
 800221c:	4b69      	ldr	r3, [pc, #420]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a68      	ldr	r2, [pc, #416]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	4b66      	ldr	r3, [pc, #408]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a65      	ldr	r2, [pc, #404]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 800222e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d013      	beq.n	8002264 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223c:	f7fe fef0 	bl	8001020 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002242:	e008      	b.n	8002256 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002244:	f7fe feec 	bl	8001020 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	; 0x64
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e207      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002256:	4b5b      	ldr	r3, [pc, #364]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0xc0>
 8002262:	e014      	b.n	800228e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7fe fedc 	bl	8001020 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800226c:	f7fe fed8 	bl	8001020 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	; 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e1f3      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227e:	4b51      	ldr	r3, [pc, #324]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0xe8>
 800228a:	e000      	b.n	800228e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d063      	beq.n	8002362 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800229a:	4b4a      	ldr	r3, [pc, #296]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 030c 	and.w	r3, r3, #12
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00b      	beq.n	80022be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022a6:	4b47      	ldr	r3, [pc, #284]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d11c      	bne.n	80022ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022b2:	4b44      	ldr	r3, [pc, #272]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d116      	bne.n	80022ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022be:	4b41      	ldr	r3, [pc, #260]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d005      	beq.n	80022d6 <HAL_RCC_OscConfig+0x152>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d001      	beq.n	80022d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e1c7      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d6:	4b3b      	ldr	r3, [pc, #236]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4937      	ldr	r1, [pc, #220]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ea:	e03a      	b.n	8002362 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d020      	beq.n	8002336 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f4:	4b34      	ldr	r3, [pc, #208]	; (80023c8 <HAL_RCC_OscConfig+0x244>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fa:	f7fe fe91 	bl	8001020 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002302:	f7fe fe8d 	bl	8001020 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e1a8      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002314:	4b2b      	ldr	r3, [pc, #172]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f0      	beq.n	8002302 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002320:	4b28      	ldr	r3, [pc, #160]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4925      	ldr	r1, [pc, #148]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002330:	4313      	orrs	r3, r2
 8002332:	600b      	str	r3, [r1, #0]
 8002334:	e015      	b.n	8002362 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002336:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <HAL_RCC_OscConfig+0x244>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233c:	f7fe fe70 	bl	8001020 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002344:	f7fe fe6c 	bl	8001020 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e187      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b00      	cmp	r3, #0
 800236c:	d036      	beq.n	80023dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d016      	beq.n	80023a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <HAL_RCC_OscConfig+0x248>)
 8002378:	2201      	movs	r2, #1
 800237a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237c:	f7fe fe50 	bl	8001020 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002384:	f7fe fe4c 	bl	8001020 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e167      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002396:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <HAL_RCC_OscConfig+0x240>)
 8002398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0x200>
 80023a2:	e01b      	b.n	80023dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <HAL_RCC_OscConfig+0x248>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023aa:	f7fe fe39 	bl	8001020 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b0:	e00e      	b.n	80023d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023b2:	f7fe fe35 	bl	8001020 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d907      	bls.n	80023d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e150      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
 80023c4:	40023800 	.word	0x40023800
 80023c8:	42470000 	.word	0x42470000
 80023cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023d0:	4b88      	ldr	r3, [pc, #544]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 80023d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1ea      	bne.n	80023b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 8097 	beq.w	8002518 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ea:	2300      	movs	r3, #0
 80023ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ee:	4b81      	ldr	r3, [pc, #516]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10f      	bne.n	800241a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	4b7d      	ldr	r3, [pc, #500]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002402:	4a7c      	ldr	r2, [pc, #496]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002408:	6413      	str	r3, [r2, #64]	; 0x40
 800240a:	4b7a      	ldr	r3, [pc, #488]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002416:	2301      	movs	r3, #1
 8002418:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241a:	4b77      	ldr	r3, [pc, #476]	; (80025f8 <HAL_RCC_OscConfig+0x474>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002422:	2b00      	cmp	r3, #0
 8002424:	d118      	bne.n	8002458 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002426:	4b74      	ldr	r3, [pc, #464]	; (80025f8 <HAL_RCC_OscConfig+0x474>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a73      	ldr	r2, [pc, #460]	; (80025f8 <HAL_RCC_OscConfig+0x474>)
 800242c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002432:	f7fe fdf5 	bl	8001020 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243a:	f7fe fdf1 	bl	8001020 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e10c      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244c:	4b6a      	ldr	r3, [pc, #424]	; (80025f8 <HAL_RCC_OscConfig+0x474>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d106      	bne.n	800246e <HAL_RCC_OscConfig+0x2ea>
 8002460:	4b64      	ldr	r3, [pc, #400]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002464:	4a63      	ldr	r2, [pc, #396]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	6713      	str	r3, [r2, #112]	; 0x70
 800246c:	e01c      	b.n	80024a8 <HAL_RCC_OscConfig+0x324>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b05      	cmp	r3, #5
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0x30c>
 8002476:	4b5f      	ldr	r3, [pc, #380]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247a:	4a5e      	ldr	r2, [pc, #376]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 800247c:	f043 0304 	orr.w	r3, r3, #4
 8002480:	6713      	str	r3, [r2, #112]	; 0x70
 8002482:	4b5c      	ldr	r3, [pc, #368]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002486:	4a5b      	ldr	r2, [pc, #364]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	6713      	str	r3, [r2, #112]	; 0x70
 800248e:	e00b      	b.n	80024a8 <HAL_RCC_OscConfig+0x324>
 8002490:	4b58      	ldr	r3, [pc, #352]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002494:	4a57      	ldr	r2, [pc, #348]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002496:	f023 0301 	bic.w	r3, r3, #1
 800249a:	6713      	str	r3, [r2, #112]	; 0x70
 800249c:	4b55      	ldr	r3, [pc, #340]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 800249e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a0:	4a54      	ldr	r2, [pc, #336]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 80024a2:	f023 0304 	bic.w	r3, r3, #4
 80024a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d015      	beq.n	80024dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b0:	f7fe fdb6 	bl	8001020 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b6:	e00a      	b.n	80024ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b8:	f7fe fdb2 	bl	8001020 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e0cb      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ce:	4b49      	ldr	r3, [pc, #292]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 80024d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0ee      	beq.n	80024b8 <HAL_RCC_OscConfig+0x334>
 80024da:	e014      	b.n	8002506 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024dc:	f7fe fda0 	bl	8001020 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e2:	e00a      	b.n	80024fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e4:	f7fe fd9c 	bl	8001020 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e0b5      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fa:	4b3e      	ldr	r3, [pc, #248]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1ee      	bne.n	80024e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002506:	7dfb      	ldrb	r3, [r7, #23]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d105      	bne.n	8002518 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800250c:	4b39      	ldr	r3, [pc, #228]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	4a38      	ldr	r2, [pc, #224]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002516:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 80a1 	beq.w	8002664 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002522:	4b34      	ldr	r3, [pc, #208]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b08      	cmp	r3, #8
 800252c:	d05c      	beq.n	80025e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d141      	bne.n	80025ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002536:	4b31      	ldr	r3, [pc, #196]	; (80025fc <HAL_RCC_OscConfig+0x478>)
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7fe fd70 	bl	8001020 <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002544:	f7fe fd6c 	bl	8001020 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e087      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002556:	4b27      	ldr	r3, [pc, #156]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69da      	ldr	r2, [r3, #28]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	019b      	lsls	r3, r3, #6
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002578:	085b      	lsrs	r3, r3, #1
 800257a:	3b01      	subs	r3, #1
 800257c:	041b      	lsls	r3, r3, #16
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	061b      	lsls	r3, r3, #24
 8002586:	491b      	ldr	r1, [pc, #108]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800258c:	4b1b      	ldr	r3, [pc, #108]	; (80025fc <HAL_RCC_OscConfig+0x478>)
 800258e:	2201      	movs	r2, #1
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002592:	f7fe fd45 	bl	8001020 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259a:	f7fe fd41 	bl	8001020 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e05c      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x416>
 80025b8:	e054      	b.n	8002664 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <HAL_RCC_OscConfig+0x478>)
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7fe fd2e 	bl	8001020 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c8:	f7fe fd2a 	bl	8001020 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e045      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_RCC_OscConfig+0x470>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x444>
 80025e6:	e03d      	b.n	8002664 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d107      	bne.n	8002600 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e038      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40007000 	.word	0x40007000
 80025fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002600:	4b1b      	ldr	r3, [pc, #108]	; (8002670 <HAL_RCC_OscConfig+0x4ec>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d028      	beq.n	8002660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002618:	429a      	cmp	r2, r3
 800261a:	d121      	bne.n	8002660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002626:	429a      	cmp	r2, r3
 8002628:	d11a      	bne.n	8002660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002630:	4013      	ands	r3, r2
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002636:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002638:	4293      	cmp	r3, r2
 800263a:	d111      	bne.n	8002660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002646:	085b      	lsrs	r3, r3, #1
 8002648:	3b01      	subs	r3, #1
 800264a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d107      	bne.n	8002660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e000      	b.n	8002666 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800

08002674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0cc      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002688:	4b68      	ldr	r3, [pc, #416]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d90c      	bls.n	80026b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002696:	4b65      	ldr	r3, [pc, #404]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800269e:	4b63      	ldr	r3, [pc, #396]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d001      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e0b8      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d020      	beq.n	80026fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d005      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026c8:	4b59      	ldr	r3, [pc, #356]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	4a58      	ldr	r2, [pc, #352]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0308 	and.w	r3, r3, #8
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026e0:	4b53      	ldr	r3, [pc, #332]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4a52      	ldr	r2, [pc, #328]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ec:	4b50      	ldr	r3, [pc, #320]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	494d      	ldr	r1, [pc, #308]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d044      	beq.n	8002794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d107      	bne.n	8002722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002712:	4b47      	ldr	r3, [pc, #284]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d119      	bne.n	8002752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e07f      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d003      	beq.n	8002732 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800272e:	2b03      	cmp	r3, #3
 8002730:	d107      	bne.n	8002742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002732:	4b3f      	ldr	r3, [pc, #252]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d109      	bne.n	8002752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e06f      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002742:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e067      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002752:	4b37      	ldr	r3, [pc, #220]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f023 0203 	bic.w	r2, r3, #3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4934      	ldr	r1, [pc, #208]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	4313      	orrs	r3, r2
 8002762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002764:	f7fe fc5c 	bl	8001020 <HAL_GetTick>
 8002768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276a:	e00a      	b.n	8002782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800276c:	f7fe fc58 	bl	8001020 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f241 3288 	movw	r2, #5000	; 0x1388
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e04f      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002782:	4b2b      	ldr	r3, [pc, #172]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 020c 	and.w	r2, r3, #12
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	429a      	cmp	r2, r3
 8002792:	d1eb      	bne.n	800276c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002794:	4b25      	ldr	r3, [pc, #148]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d20c      	bcs.n	80027bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a2:	4b22      	ldr	r3, [pc, #136]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027aa:	4b20      	ldr	r3, [pc, #128]	; (800282c <HAL_RCC_ClockConfig+0x1b8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e032      	b.n	8002822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0304 	and.w	r3, r3, #4
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c8:	4b19      	ldr	r3, [pc, #100]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	4916      	ldr	r1, [pc, #88]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d009      	beq.n	80027fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027e6:	4b12      	ldr	r3, [pc, #72]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	490e      	ldr	r1, [pc, #56]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027fa:	f000 f821 	bl	8002840 <HAL_RCC_GetSysClockFreq>
 80027fe:	4602      	mov	r2, r0
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	490a      	ldr	r1, [pc, #40]	; (8002834 <HAL_RCC_ClockConfig+0x1c0>)
 800280c:	5ccb      	ldrb	r3, [r1, r3]
 800280e:	fa22 f303 	lsr.w	r3, r2, r3
 8002812:	4a09      	ldr	r2, [pc, #36]	; (8002838 <HAL_RCC_ClockConfig+0x1c4>)
 8002814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002816:	4b09      	ldr	r3, [pc, #36]	; (800283c <HAL_RCC_ClockConfig+0x1c8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe fbbc 	bl	8000f98 <HAL_InitTick>

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40023c00 	.word	0x40023c00
 8002830:	40023800 	.word	0x40023800
 8002834:	080038c0 	.word	0x080038c0
 8002838:	20000000 	.word	0x20000000
 800283c:	20000004 	.word	0x20000004

08002840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002844:	b094      	sub	sp, #80	; 0x50
 8002846:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	647b      	str	r3, [r7, #68]	; 0x44
 800284c:	2300      	movs	r3, #0
 800284e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002850:	2300      	movs	r3, #0
 8002852:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002858:	4b79      	ldr	r3, [pc, #484]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x200>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 030c 	and.w	r3, r3, #12
 8002860:	2b08      	cmp	r3, #8
 8002862:	d00d      	beq.n	8002880 <HAL_RCC_GetSysClockFreq+0x40>
 8002864:	2b08      	cmp	r3, #8
 8002866:	f200 80e1 	bhi.w	8002a2c <HAL_RCC_GetSysClockFreq+0x1ec>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x34>
 800286e:	2b04      	cmp	r3, #4
 8002870:	d003      	beq.n	800287a <HAL_RCC_GetSysClockFreq+0x3a>
 8002872:	e0db      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002874:	4b73      	ldr	r3, [pc, #460]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x204>)
 8002876:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002878:	e0db      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800287a:	4b73      	ldr	r3, [pc, #460]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x208>)
 800287c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800287e:	e0d8      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002880:	4b6f      	ldr	r3, [pc, #444]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002888:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800288a:	4b6d      	ldr	r3, [pc, #436]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x200>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d063      	beq.n	800295e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002896:	4b6a      	ldr	r3, [pc, #424]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	099b      	lsrs	r3, r3, #6
 800289c:	2200      	movs	r2, #0
 800289e:	63bb      	str	r3, [r7, #56]	; 0x38
 80028a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028a8:	633b      	str	r3, [r7, #48]	; 0x30
 80028aa:	2300      	movs	r3, #0
 80028ac:	637b      	str	r3, [r7, #52]	; 0x34
 80028ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028b2:	4622      	mov	r2, r4
 80028b4:	462b      	mov	r3, r5
 80028b6:	f04f 0000 	mov.w	r0, #0
 80028ba:	f04f 0100 	mov.w	r1, #0
 80028be:	0159      	lsls	r1, r3, #5
 80028c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028c4:	0150      	lsls	r0, r2, #5
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4621      	mov	r1, r4
 80028cc:	1a51      	subs	r1, r2, r1
 80028ce:	6139      	str	r1, [r7, #16]
 80028d0:	4629      	mov	r1, r5
 80028d2:	eb63 0301 	sbc.w	r3, r3, r1
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028e4:	4659      	mov	r1, fp
 80028e6:	018b      	lsls	r3, r1, #6
 80028e8:	4651      	mov	r1, sl
 80028ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ee:	4651      	mov	r1, sl
 80028f0:	018a      	lsls	r2, r1, #6
 80028f2:	4651      	mov	r1, sl
 80028f4:	ebb2 0801 	subs.w	r8, r2, r1
 80028f8:	4659      	mov	r1, fp
 80028fa:	eb63 0901 	sbc.w	r9, r3, r1
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	f04f 0300 	mov.w	r3, #0
 8002906:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800290a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800290e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002912:	4690      	mov	r8, r2
 8002914:	4699      	mov	r9, r3
 8002916:	4623      	mov	r3, r4
 8002918:	eb18 0303 	adds.w	r3, r8, r3
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	462b      	mov	r3, r5
 8002920:	eb49 0303 	adc.w	r3, r9, r3
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002932:	4629      	mov	r1, r5
 8002934:	024b      	lsls	r3, r1, #9
 8002936:	4621      	mov	r1, r4
 8002938:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800293c:	4621      	mov	r1, r4
 800293e:	024a      	lsls	r2, r1, #9
 8002940:	4610      	mov	r0, r2
 8002942:	4619      	mov	r1, r3
 8002944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002946:	2200      	movs	r2, #0
 8002948:	62bb      	str	r3, [r7, #40]	; 0x28
 800294a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800294c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002950:	f7fd fc42 	bl	80001d8 <__aeabi_uldivmod>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4613      	mov	r3, r2
 800295a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800295c:	e058      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800295e:	4b38      	ldr	r3, [pc, #224]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	099b      	lsrs	r3, r3, #6
 8002964:	2200      	movs	r2, #0
 8002966:	4618      	mov	r0, r3
 8002968:	4611      	mov	r1, r2
 800296a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800296e:	623b      	str	r3, [r7, #32]
 8002970:	2300      	movs	r3, #0
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
 8002974:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002978:	4642      	mov	r2, r8
 800297a:	464b      	mov	r3, r9
 800297c:	f04f 0000 	mov.w	r0, #0
 8002980:	f04f 0100 	mov.w	r1, #0
 8002984:	0159      	lsls	r1, r3, #5
 8002986:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800298a:	0150      	lsls	r0, r2, #5
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4641      	mov	r1, r8
 8002992:	ebb2 0a01 	subs.w	sl, r2, r1
 8002996:	4649      	mov	r1, r9
 8002998:	eb63 0b01 	sbc.w	fp, r3, r1
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029b0:	ebb2 040a 	subs.w	r4, r2, sl
 80029b4:	eb63 050b 	sbc.w	r5, r3, fp
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	00eb      	lsls	r3, r5, #3
 80029c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029c6:	00e2      	lsls	r2, r4, #3
 80029c8:	4614      	mov	r4, r2
 80029ca:	461d      	mov	r5, r3
 80029cc:	4643      	mov	r3, r8
 80029ce:	18e3      	adds	r3, r4, r3
 80029d0:	603b      	str	r3, [r7, #0]
 80029d2:	464b      	mov	r3, r9
 80029d4:	eb45 0303 	adc.w	r3, r5, r3
 80029d8:	607b      	str	r3, [r7, #4]
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	f04f 0300 	mov.w	r3, #0
 80029e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029e6:	4629      	mov	r1, r5
 80029e8:	028b      	lsls	r3, r1, #10
 80029ea:	4621      	mov	r1, r4
 80029ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029f0:	4621      	mov	r1, r4
 80029f2:	028a      	lsls	r2, r1, #10
 80029f4:	4610      	mov	r0, r2
 80029f6:	4619      	mov	r1, r3
 80029f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029fa:	2200      	movs	r2, #0
 80029fc:	61bb      	str	r3, [r7, #24]
 80029fe:	61fa      	str	r2, [r7, #28]
 8002a00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a04:	f7fd fbe8 	bl	80001d8 <__aeabi_uldivmod>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a10:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	0c1b      	lsrs	r3, r3, #16
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a2a:	e002      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3750      	adds	r7, #80	; 0x50
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a3e:	bf00      	nop
 8002a40:	40023800 	.word	0x40023800
 8002a44:	00f42400 	.word	0x00f42400
 8002a48:	007a1200 	.word	0x007a1200

08002a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a50:	4b03      	ldr	r3, [pc, #12]	; (8002a60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a52:	681b      	ldr	r3, [r3, #0]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	20000000 	.word	0x20000000

08002a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a68:	f7ff fff0 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	0a9b      	lsrs	r3, r3, #10
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	4903      	ldr	r1, [pc, #12]	; (8002a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a7a:	5ccb      	ldrb	r3, [r1, r3]
 8002a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40023800 	.word	0x40023800
 8002a88:	080038d0 	.word	0x080038d0

08002a8c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d105      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d038      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ab4:	4b68      	ldr	r3, [pc, #416]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002aba:	f7fe fab1 	bl	8001020 <HAL_GetTick>
 8002abe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ac2:	f7fe faad 	bl	8001020 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e0bd      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ad4:	4b61      	ldr	r3, [pc, #388]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1f0      	bne.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	019b      	lsls	r3, r3, #6
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	071b      	lsls	r3, r3, #28
 8002af2:	495a      	ldr	r1, [pc, #360]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002afa:	4b57      	ldr	r3, [pc, #348]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b00:	f7fe fa8e 	bl	8001020 <HAL_GetTick>
 8002b04:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b08:	f7fe fa8a 	bl	8001020 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e09a      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b1a:	4b50      	ldr	r3, [pc, #320]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 8083 	beq.w	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	4b48      	ldr	r3, [pc, #288]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	4a47      	ldr	r2, [pc, #284]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b42:	6413      	str	r3, [r2, #64]	; 0x40
 8002b44:	4b45      	ldr	r3, [pc, #276]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002b50:	4b43      	ldr	r3, [pc, #268]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a42      	ldr	r2, [pc, #264]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b5a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b5c:	f7fe fa60 	bl	8001020 <HAL_GetTick>
 8002b60:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b62:	e008      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b64:	f7fe fa5c 	bl	8001020 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e06c      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002b76:	4b3a      	ldr	r3, [pc, #232]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b82:	4b36      	ldr	r3, [pc, #216]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b8a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d02f      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d028      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ba0:	4b2e      	ldr	r3, [pc, #184]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002baa:	4b2e      	ldr	r3, [pc, #184]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bb0:	4b2c      	ldr	r3, [pc, #176]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002bb6:	4a29      	ldr	r2, [pc, #164]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002bbc:	4b27      	ldr	r3, [pc, #156]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d114      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002bc8:	f7fe fa2a 	bl	8001020 <HAL_GetTick>
 8002bcc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bce:	e00a      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd0:	f7fe fa26 	bl	8001020 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e034      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be6:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0ee      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bfe:	d10d      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002c00:	4b16      	ldr	r3, [pc, #88]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c14:	4911      	ldr	r1, [pc, #68]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	608b      	str	r3, [r1, #8]
 8002c1a:	e005      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002c1c:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	4a0e      	ldr	r2, [pc, #56]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c22:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c26:	6093      	str	r3, [r2, #8]
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c34:	4909      	ldr	r1, [pc, #36]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	7d1a      	ldrb	r2, [r3, #20]
 8002c4a:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002c4c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	42470068 	.word	0x42470068
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40007000 	.word	0x40007000
 8002c64:	42470e40 	.word	0x42470e40
 8002c68:	424711e0 	.word	0x424711e0

08002c6c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b087      	sub	sp, #28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d140      	bne.n	8002d0c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002c8a:	4b24      	ldr	r3, [pc, #144]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d005      	beq.n	8002ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d131      	bne.n	8002d04 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002ca0:	4b1f      	ldr	r3, [pc, #124]	; (8002d20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002ca2:	617b      	str	r3, [r7, #20]
          break;
 8002ca4:	e031      	b.n	8002d0a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002ca6:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cb2:	d109      	bne.n	8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002cb4:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cbe:	4a19      	ldr	r2, [pc, #100]	; (8002d24 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	e008      	b.n	8002cda <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002cc8:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cd2:	4a15      	ldr	r2, [pc, #84]	; (8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8002cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd8:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002cda:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ce0:	099b      	lsrs	r3, r3, #6
 8002ce2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	fb02 f303 	mul.w	r3, r2, r3
 8002cec:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002cee:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cf4:	0f1b      	lsrs	r3, r3, #28
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d00:	617b      	str	r3, [r7, #20]
          break;
 8002d02:	e002      	b.n	8002d0a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]
          break;
 8002d08:	bf00      	nop
        }
      }
      break;
 8002d0a:	bf00      	nop
    }
  }
  return frequency;
 8002d0c:	697b      	ldr	r3, [r7, #20]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	371c      	adds	r7, #28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	00bb8000 	.word	0x00bb8000
 8002d24:	007a1200 	.word	0x007a1200
 8002d28:	00f42400 	.word	0x00f42400

08002d2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e07b      	b.n	8002e36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d108      	bne.n	8002d58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d4e:	d009      	beq.n	8002d64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	61da      	str	r2, [r3, #28]
 8002d56:	e005      	b.n	8002d64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7fd ffb2 	bl	8000ce8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002dac:	431a      	orrs	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695b      	ldr	r3, [r3, #20]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de8:	ea42 0103 	orr.w	r1, r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	0c1b      	lsrs	r3, r3, #16
 8002e02:	f003 0104 	and.w	r1, r3, #4
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	f003 0210 	and.w	r2, r3, #16
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	69da      	ldr	r2, [r3, #28]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <__errno>:
 8002e40:	4b01      	ldr	r3, [pc, #4]	; (8002e48 <__errno+0x8>)
 8002e42:	6818      	ldr	r0, [r3, #0]
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	2000000c 	.word	0x2000000c

08002e4c <__libc_init_array>:
 8002e4c:	b570      	push	{r4, r5, r6, lr}
 8002e4e:	4d0d      	ldr	r5, [pc, #52]	; (8002e84 <__libc_init_array+0x38>)
 8002e50:	4c0d      	ldr	r4, [pc, #52]	; (8002e88 <__libc_init_array+0x3c>)
 8002e52:	1b64      	subs	r4, r4, r5
 8002e54:	10a4      	asrs	r4, r4, #2
 8002e56:	2600      	movs	r6, #0
 8002e58:	42a6      	cmp	r6, r4
 8002e5a:	d109      	bne.n	8002e70 <__libc_init_array+0x24>
 8002e5c:	4d0b      	ldr	r5, [pc, #44]	; (8002e8c <__libc_init_array+0x40>)
 8002e5e:	4c0c      	ldr	r4, [pc, #48]	; (8002e90 <__libc_init_array+0x44>)
 8002e60:	f000 fd1e 	bl	80038a0 <_init>
 8002e64:	1b64      	subs	r4, r4, r5
 8002e66:	10a4      	asrs	r4, r4, #2
 8002e68:	2600      	movs	r6, #0
 8002e6a:	42a6      	cmp	r6, r4
 8002e6c:	d105      	bne.n	8002e7a <__libc_init_array+0x2e>
 8002e6e:	bd70      	pop	{r4, r5, r6, pc}
 8002e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e74:	4798      	blx	r3
 8002e76:	3601      	adds	r6, #1
 8002e78:	e7ee      	b.n	8002e58 <__libc_init_array+0xc>
 8002e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e7e:	4798      	blx	r3
 8002e80:	3601      	adds	r6, #1
 8002e82:	e7f2      	b.n	8002e6a <__libc_init_array+0x1e>
 8002e84:	08003944 	.word	0x08003944
 8002e88:	08003944 	.word	0x08003944
 8002e8c:	08003944 	.word	0x08003944
 8002e90:	08003948 	.word	0x08003948

08002e94 <memset>:
 8002e94:	4402      	add	r2, r0
 8002e96:	4603      	mov	r3, r0
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d100      	bne.n	8002e9e <memset+0xa>
 8002e9c:	4770      	bx	lr
 8002e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002ea2:	e7f9      	b.n	8002e98 <memset+0x4>

08002ea4 <_puts_r>:
 8002ea4:	b570      	push	{r4, r5, r6, lr}
 8002ea6:	460e      	mov	r6, r1
 8002ea8:	4605      	mov	r5, r0
 8002eaa:	b118      	cbz	r0, 8002eb4 <_puts_r+0x10>
 8002eac:	6983      	ldr	r3, [r0, #24]
 8002eae:	b90b      	cbnz	r3, 8002eb4 <_puts_r+0x10>
 8002eb0:	f000 fa48 	bl	8003344 <__sinit>
 8002eb4:	69ab      	ldr	r3, [r5, #24]
 8002eb6:	68ac      	ldr	r4, [r5, #8]
 8002eb8:	b913      	cbnz	r3, 8002ec0 <_puts_r+0x1c>
 8002eba:	4628      	mov	r0, r5
 8002ebc:	f000 fa42 	bl	8003344 <__sinit>
 8002ec0:	4b2c      	ldr	r3, [pc, #176]	; (8002f74 <_puts_r+0xd0>)
 8002ec2:	429c      	cmp	r4, r3
 8002ec4:	d120      	bne.n	8002f08 <_puts_r+0x64>
 8002ec6:	686c      	ldr	r4, [r5, #4]
 8002ec8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002eca:	07db      	lsls	r3, r3, #31
 8002ecc:	d405      	bmi.n	8002eda <_puts_r+0x36>
 8002ece:	89a3      	ldrh	r3, [r4, #12]
 8002ed0:	0598      	lsls	r0, r3, #22
 8002ed2:	d402      	bmi.n	8002eda <_puts_r+0x36>
 8002ed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ed6:	f000 fad3 	bl	8003480 <__retarget_lock_acquire_recursive>
 8002eda:	89a3      	ldrh	r3, [r4, #12]
 8002edc:	0719      	lsls	r1, r3, #28
 8002ede:	d51d      	bpl.n	8002f1c <_puts_r+0x78>
 8002ee0:	6923      	ldr	r3, [r4, #16]
 8002ee2:	b1db      	cbz	r3, 8002f1c <_puts_r+0x78>
 8002ee4:	3e01      	subs	r6, #1
 8002ee6:	68a3      	ldr	r3, [r4, #8]
 8002ee8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002eec:	3b01      	subs	r3, #1
 8002eee:	60a3      	str	r3, [r4, #8]
 8002ef0:	bb39      	cbnz	r1, 8002f42 <_puts_r+0x9e>
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	da38      	bge.n	8002f68 <_puts_r+0xc4>
 8002ef6:	4622      	mov	r2, r4
 8002ef8:	210a      	movs	r1, #10
 8002efa:	4628      	mov	r0, r5
 8002efc:	f000 f848 	bl	8002f90 <__swbuf_r>
 8002f00:	3001      	adds	r0, #1
 8002f02:	d011      	beq.n	8002f28 <_puts_r+0x84>
 8002f04:	250a      	movs	r5, #10
 8002f06:	e011      	b.n	8002f2c <_puts_r+0x88>
 8002f08:	4b1b      	ldr	r3, [pc, #108]	; (8002f78 <_puts_r+0xd4>)
 8002f0a:	429c      	cmp	r4, r3
 8002f0c:	d101      	bne.n	8002f12 <_puts_r+0x6e>
 8002f0e:	68ac      	ldr	r4, [r5, #8]
 8002f10:	e7da      	b.n	8002ec8 <_puts_r+0x24>
 8002f12:	4b1a      	ldr	r3, [pc, #104]	; (8002f7c <_puts_r+0xd8>)
 8002f14:	429c      	cmp	r4, r3
 8002f16:	bf08      	it	eq
 8002f18:	68ec      	ldreq	r4, [r5, #12]
 8002f1a:	e7d5      	b.n	8002ec8 <_puts_r+0x24>
 8002f1c:	4621      	mov	r1, r4
 8002f1e:	4628      	mov	r0, r5
 8002f20:	f000 f888 	bl	8003034 <__swsetup_r>
 8002f24:	2800      	cmp	r0, #0
 8002f26:	d0dd      	beq.n	8002ee4 <_puts_r+0x40>
 8002f28:	f04f 35ff 	mov.w	r5, #4294967295
 8002f2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f2e:	07da      	lsls	r2, r3, #31
 8002f30:	d405      	bmi.n	8002f3e <_puts_r+0x9a>
 8002f32:	89a3      	ldrh	r3, [r4, #12]
 8002f34:	059b      	lsls	r3, r3, #22
 8002f36:	d402      	bmi.n	8002f3e <_puts_r+0x9a>
 8002f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f3a:	f000 faa2 	bl	8003482 <__retarget_lock_release_recursive>
 8002f3e:	4628      	mov	r0, r5
 8002f40:	bd70      	pop	{r4, r5, r6, pc}
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	da04      	bge.n	8002f50 <_puts_r+0xac>
 8002f46:	69a2      	ldr	r2, [r4, #24]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	dc06      	bgt.n	8002f5a <_puts_r+0xb6>
 8002f4c:	290a      	cmp	r1, #10
 8002f4e:	d004      	beq.n	8002f5a <_puts_r+0xb6>
 8002f50:	6823      	ldr	r3, [r4, #0]
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	6022      	str	r2, [r4, #0]
 8002f56:	7019      	strb	r1, [r3, #0]
 8002f58:	e7c5      	b.n	8002ee6 <_puts_r+0x42>
 8002f5a:	4622      	mov	r2, r4
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	f000 f817 	bl	8002f90 <__swbuf_r>
 8002f62:	3001      	adds	r0, #1
 8002f64:	d1bf      	bne.n	8002ee6 <_puts_r+0x42>
 8002f66:	e7df      	b.n	8002f28 <_puts_r+0x84>
 8002f68:	6823      	ldr	r3, [r4, #0]
 8002f6a:	250a      	movs	r5, #10
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	6022      	str	r2, [r4, #0]
 8002f70:	701d      	strb	r5, [r3, #0]
 8002f72:	e7db      	b.n	8002f2c <_puts_r+0x88>
 8002f74:	080038fc 	.word	0x080038fc
 8002f78:	0800391c 	.word	0x0800391c
 8002f7c:	080038dc 	.word	0x080038dc

08002f80 <puts>:
 8002f80:	4b02      	ldr	r3, [pc, #8]	; (8002f8c <puts+0xc>)
 8002f82:	4601      	mov	r1, r0
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	f7ff bf8d 	b.w	8002ea4 <_puts_r>
 8002f8a:	bf00      	nop
 8002f8c:	2000000c 	.word	0x2000000c

08002f90 <__swbuf_r>:
 8002f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f92:	460e      	mov	r6, r1
 8002f94:	4614      	mov	r4, r2
 8002f96:	4605      	mov	r5, r0
 8002f98:	b118      	cbz	r0, 8002fa2 <__swbuf_r+0x12>
 8002f9a:	6983      	ldr	r3, [r0, #24]
 8002f9c:	b90b      	cbnz	r3, 8002fa2 <__swbuf_r+0x12>
 8002f9e:	f000 f9d1 	bl	8003344 <__sinit>
 8002fa2:	4b21      	ldr	r3, [pc, #132]	; (8003028 <__swbuf_r+0x98>)
 8002fa4:	429c      	cmp	r4, r3
 8002fa6:	d12b      	bne.n	8003000 <__swbuf_r+0x70>
 8002fa8:	686c      	ldr	r4, [r5, #4]
 8002faa:	69a3      	ldr	r3, [r4, #24]
 8002fac:	60a3      	str	r3, [r4, #8]
 8002fae:	89a3      	ldrh	r3, [r4, #12]
 8002fb0:	071a      	lsls	r2, r3, #28
 8002fb2:	d52f      	bpl.n	8003014 <__swbuf_r+0x84>
 8002fb4:	6923      	ldr	r3, [r4, #16]
 8002fb6:	b36b      	cbz	r3, 8003014 <__swbuf_r+0x84>
 8002fb8:	6923      	ldr	r3, [r4, #16]
 8002fba:	6820      	ldr	r0, [r4, #0]
 8002fbc:	1ac0      	subs	r0, r0, r3
 8002fbe:	6963      	ldr	r3, [r4, #20]
 8002fc0:	b2f6      	uxtb	r6, r6
 8002fc2:	4283      	cmp	r3, r0
 8002fc4:	4637      	mov	r7, r6
 8002fc6:	dc04      	bgt.n	8002fd2 <__swbuf_r+0x42>
 8002fc8:	4621      	mov	r1, r4
 8002fca:	4628      	mov	r0, r5
 8002fcc:	f000 f926 	bl	800321c <_fflush_r>
 8002fd0:	bb30      	cbnz	r0, 8003020 <__swbuf_r+0x90>
 8002fd2:	68a3      	ldr	r3, [r4, #8]
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	60a3      	str	r3, [r4, #8]
 8002fd8:	6823      	ldr	r3, [r4, #0]
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	6022      	str	r2, [r4, #0]
 8002fde:	701e      	strb	r6, [r3, #0]
 8002fe0:	6963      	ldr	r3, [r4, #20]
 8002fe2:	3001      	adds	r0, #1
 8002fe4:	4283      	cmp	r3, r0
 8002fe6:	d004      	beq.n	8002ff2 <__swbuf_r+0x62>
 8002fe8:	89a3      	ldrh	r3, [r4, #12]
 8002fea:	07db      	lsls	r3, r3, #31
 8002fec:	d506      	bpl.n	8002ffc <__swbuf_r+0x6c>
 8002fee:	2e0a      	cmp	r6, #10
 8002ff0:	d104      	bne.n	8002ffc <__swbuf_r+0x6c>
 8002ff2:	4621      	mov	r1, r4
 8002ff4:	4628      	mov	r0, r5
 8002ff6:	f000 f911 	bl	800321c <_fflush_r>
 8002ffa:	b988      	cbnz	r0, 8003020 <__swbuf_r+0x90>
 8002ffc:	4638      	mov	r0, r7
 8002ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003000:	4b0a      	ldr	r3, [pc, #40]	; (800302c <__swbuf_r+0x9c>)
 8003002:	429c      	cmp	r4, r3
 8003004:	d101      	bne.n	800300a <__swbuf_r+0x7a>
 8003006:	68ac      	ldr	r4, [r5, #8]
 8003008:	e7cf      	b.n	8002faa <__swbuf_r+0x1a>
 800300a:	4b09      	ldr	r3, [pc, #36]	; (8003030 <__swbuf_r+0xa0>)
 800300c:	429c      	cmp	r4, r3
 800300e:	bf08      	it	eq
 8003010:	68ec      	ldreq	r4, [r5, #12]
 8003012:	e7ca      	b.n	8002faa <__swbuf_r+0x1a>
 8003014:	4621      	mov	r1, r4
 8003016:	4628      	mov	r0, r5
 8003018:	f000 f80c 	bl	8003034 <__swsetup_r>
 800301c:	2800      	cmp	r0, #0
 800301e:	d0cb      	beq.n	8002fb8 <__swbuf_r+0x28>
 8003020:	f04f 37ff 	mov.w	r7, #4294967295
 8003024:	e7ea      	b.n	8002ffc <__swbuf_r+0x6c>
 8003026:	bf00      	nop
 8003028:	080038fc 	.word	0x080038fc
 800302c:	0800391c 	.word	0x0800391c
 8003030:	080038dc 	.word	0x080038dc

08003034 <__swsetup_r>:
 8003034:	4b32      	ldr	r3, [pc, #200]	; (8003100 <__swsetup_r+0xcc>)
 8003036:	b570      	push	{r4, r5, r6, lr}
 8003038:	681d      	ldr	r5, [r3, #0]
 800303a:	4606      	mov	r6, r0
 800303c:	460c      	mov	r4, r1
 800303e:	b125      	cbz	r5, 800304a <__swsetup_r+0x16>
 8003040:	69ab      	ldr	r3, [r5, #24]
 8003042:	b913      	cbnz	r3, 800304a <__swsetup_r+0x16>
 8003044:	4628      	mov	r0, r5
 8003046:	f000 f97d 	bl	8003344 <__sinit>
 800304a:	4b2e      	ldr	r3, [pc, #184]	; (8003104 <__swsetup_r+0xd0>)
 800304c:	429c      	cmp	r4, r3
 800304e:	d10f      	bne.n	8003070 <__swsetup_r+0x3c>
 8003050:	686c      	ldr	r4, [r5, #4]
 8003052:	89a3      	ldrh	r3, [r4, #12]
 8003054:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003058:	0719      	lsls	r1, r3, #28
 800305a:	d42c      	bmi.n	80030b6 <__swsetup_r+0x82>
 800305c:	06dd      	lsls	r5, r3, #27
 800305e:	d411      	bmi.n	8003084 <__swsetup_r+0x50>
 8003060:	2309      	movs	r3, #9
 8003062:	6033      	str	r3, [r6, #0]
 8003064:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003068:	81a3      	strh	r3, [r4, #12]
 800306a:	f04f 30ff 	mov.w	r0, #4294967295
 800306e:	e03e      	b.n	80030ee <__swsetup_r+0xba>
 8003070:	4b25      	ldr	r3, [pc, #148]	; (8003108 <__swsetup_r+0xd4>)
 8003072:	429c      	cmp	r4, r3
 8003074:	d101      	bne.n	800307a <__swsetup_r+0x46>
 8003076:	68ac      	ldr	r4, [r5, #8]
 8003078:	e7eb      	b.n	8003052 <__swsetup_r+0x1e>
 800307a:	4b24      	ldr	r3, [pc, #144]	; (800310c <__swsetup_r+0xd8>)
 800307c:	429c      	cmp	r4, r3
 800307e:	bf08      	it	eq
 8003080:	68ec      	ldreq	r4, [r5, #12]
 8003082:	e7e6      	b.n	8003052 <__swsetup_r+0x1e>
 8003084:	0758      	lsls	r0, r3, #29
 8003086:	d512      	bpl.n	80030ae <__swsetup_r+0x7a>
 8003088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800308a:	b141      	cbz	r1, 800309e <__swsetup_r+0x6a>
 800308c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003090:	4299      	cmp	r1, r3
 8003092:	d002      	beq.n	800309a <__swsetup_r+0x66>
 8003094:	4630      	mov	r0, r6
 8003096:	f000 fa5b 	bl	8003550 <_free_r>
 800309a:	2300      	movs	r3, #0
 800309c:	6363      	str	r3, [r4, #52]	; 0x34
 800309e:	89a3      	ldrh	r3, [r4, #12]
 80030a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80030a4:	81a3      	strh	r3, [r4, #12]
 80030a6:	2300      	movs	r3, #0
 80030a8:	6063      	str	r3, [r4, #4]
 80030aa:	6923      	ldr	r3, [r4, #16]
 80030ac:	6023      	str	r3, [r4, #0]
 80030ae:	89a3      	ldrh	r3, [r4, #12]
 80030b0:	f043 0308 	orr.w	r3, r3, #8
 80030b4:	81a3      	strh	r3, [r4, #12]
 80030b6:	6923      	ldr	r3, [r4, #16]
 80030b8:	b94b      	cbnz	r3, 80030ce <__swsetup_r+0x9a>
 80030ba:	89a3      	ldrh	r3, [r4, #12]
 80030bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80030c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030c4:	d003      	beq.n	80030ce <__swsetup_r+0x9a>
 80030c6:	4621      	mov	r1, r4
 80030c8:	4630      	mov	r0, r6
 80030ca:	f000 fa01 	bl	80034d0 <__smakebuf_r>
 80030ce:	89a0      	ldrh	r0, [r4, #12]
 80030d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80030d4:	f010 0301 	ands.w	r3, r0, #1
 80030d8:	d00a      	beq.n	80030f0 <__swsetup_r+0xbc>
 80030da:	2300      	movs	r3, #0
 80030dc:	60a3      	str	r3, [r4, #8]
 80030de:	6963      	ldr	r3, [r4, #20]
 80030e0:	425b      	negs	r3, r3
 80030e2:	61a3      	str	r3, [r4, #24]
 80030e4:	6923      	ldr	r3, [r4, #16]
 80030e6:	b943      	cbnz	r3, 80030fa <__swsetup_r+0xc6>
 80030e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80030ec:	d1ba      	bne.n	8003064 <__swsetup_r+0x30>
 80030ee:	bd70      	pop	{r4, r5, r6, pc}
 80030f0:	0781      	lsls	r1, r0, #30
 80030f2:	bf58      	it	pl
 80030f4:	6963      	ldrpl	r3, [r4, #20]
 80030f6:	60a3      	str	r3, [r4, #8]
 80030f8:	e7f4      	b.n	80030e4 <__swsetup_r+0xb0>
 80030fa:	2000      	movs	r0, #0
 80030fc:	e7f7      	b.n	80030ee <__swsetup_r+0xba>
 80030fe:	bf00      	nop
 8003100:	2000000c 	.word	0x2000000c
 8003104:	080038fc 	.word	0x080038fc
 8003108:	0800391c 	.word	0x0800391c
 800310c:	080038dc 	.word	0x080038dc

08003110 <__sflush_r>:
 8003110:	898a      	ldrh	r2, [r1, #12]
 8003112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003116:	4605      	mov	r5, r0
 8003118:	0710      	lsls	r0, r2, #28
 800311a:	460c      	mov	r4, r1
 800311c:	d458      	bmi.n	80031d0 <__sflush_r+0xc0>
 800311e:	684b      	ldr	r3, [r1, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	dc05      	bgt.n	8003130 <__sflush_r+0x20>
 8003124:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003126:	2b00      	cmp	r3, #0
 8003128:	dc02      	bgt.n	8003130 <__sflush_r+0x20>
 800312a:	2000      	movs	r0, #0
 800312c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003130:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003132:	2e00      	cmp	r6, #0
 8003134:	d0f9      	beq.n	800312a <__sflush_r+0x1a>
 8003136:	2300      	movs	r3, #0
 8003138:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800313c:	682f      	ldr	r7, [r5, #0]
 800313e:	602b      	str	r3, [r5, #0]
 8003140:	d032      	beq.n	80031a8 <__sflush_r+0x98>
 8003142:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003144:	89a3      	ldrh	r3, [r4, #12]
 8003146:	075a      	lsls	r2, r3, #29
 8003148:	d505      	bpl.n	8003156 <__sflush_r+0x46>
 800314a:	6863      	ldr	r3, [r4, #4]
 800314c:	1ac0      	subs	r0, r0, r3
 800314e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003150:	b10b      	cbz	r3, 8003156 <__sflush_r+0x46>
 8003152:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003154:	1ac0      	subs	r0, r0, r3
 8003156:	2300      	movs	r3, #0
 8003158:	4602      	mov	r2, r0
 800315a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800315c:	6a21      	ldr	r1, [r4, #32]
 800315e:	4628      	mov	r0, r5
 8003160:	47b0      	blx	r6
 8003162:	1c43      	adds	r3, r0, #1
 8003164:	89a3      	ldrh	r3, [r4, #12]
 8003166:	d106      	bne.n	8003176 <__sflush_r+0x66>
 8003168:	6829      	ldr	r1, [r5, #0]
 800316a:	291d      	cmp	r1, #29
 800316c:	d82c      	bhi.n	80031c8 <__sflush_r+0xb8>
 800316e:	4a2a      	ldr	r2, [pc, #168]	; (8003218 <__sflush_r+0x108>)
 8003170:	40ca      	lsrs	r2, r1
 8003172:	07d6      	lsls	r6, r2, #31
 8003174:	d528      	bpl.n	80031c8 <__sflush_r+0xb8>
 8003176:	2200      	movs	r2, #0
 8003178:	6062      	str	r2, [r4, #4]
 800317a:	04d9      	lsls	r1, r3, #19
 800317c:	6922      	ldr	r2, [r4, #16]
 800317e:	6022      	str	r2, [r4, #0]
 8003180:	d504      	bpl.n	800318c <__sflush_r+0x7c>
 8003182:	1c42      	adds	r2, r0, #1
 8003184:	d101      	bne.n	800318a <__sflush_r+0x7a>
 8003186:	682b      	ldr	r3, [r5, #0]
 8003188:	b903      	cbnz	r3, 800318c <__sflush_r+0x7c>
 800318a:	6560      	str	r0, [r4, #84]	; 0x54
 800318c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800318e:	602f      	str	r7, [r5, #0]
 8003190:	2900      	cmp	r1, #0
 8003192:	d0ca      	beq.n	800312a <__sflush_r+0x1a>
 8003194:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003198:	4299      	cmp	r1, r3
 800319a:	d002      	beq.n	80031a2 <__sflush_r+0x92>
 800319c:	4628      	mov	r0, r5
 800319e:	f000 f9d7 	bl	8003550 <_free_r>
 80031a2:	2000      	movs	r0, #0
 80031a4:	6360      	str	r0, [r4, #52]	; 0x34
 80031a6:	e7c1      	b.n	800312c <__sflush_r+0x1c>
 80031a8:	6a21      	ldr	r1, [r4, #32]
 80031aa:	2301      	movs	r3, #1
 80031ac:	4628      	mov	r0, r5
 80031ae:	47b0      	blx	r6
 80031b0:	1c41      	adds	r1, r0, #1
 80031b2:	d1c7      	bne.n	8003144 <__sflush_r+0x34>
 80031b4:	682b      	ldr	r3, [r5, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0c4      	beq.n	8003144 <__sflush_r+0x34>
 80031ba:	2b1d      	cmp	r3, #29
 80031bc:	d001      	beq.n	80031c2 <__sflush_r+0xb2>
 80031be:	2b16      	cmp	r3, #22
 80031c0:	d101      	bne.n	80031c6 <__sflush_r+0xb6>
 80031c2:	602f      	str	r7, [r5, #0]
 80031c4:	e7b1      	b.n	800312a <__sflush_r+0x1a>
 80031c6:	89a3      	ldrh	r3, [r4, #12]
 80031c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031cc:	81a3      	strh	r3, [r4, #12]
 80031ce:	e7ad      	b.n	800312c <__sflush_r+0x1c>
 80031d0:	690f      	ldr	r7, [r1, #16]
 80031d2:	2f00      	cmp	r7, #0
 80031d4:	d0a9      	beq.n	800312a <__sflush_r+0x1a>
 80031d6:	0793      	lsls	r3, r2, #30
 80031d8:	680e      	ldr	r6, [r1, #0]
 80031da:	bf08      	it	eq
 80031dc:	694b      	ldreq	r3, [r1, #20]
 80031de:	600f      	str	r7, [r1, #0]
 80031e0:	bf18      	it	ne
 80031e2:	2300      	movne	r3, #0
 80031e4:	eba6 0807 	sub.w	r8, r6, r7
 80031e8:	608b      	str	r3, [r1, #8]
 80031ea:	f1b8 0f00 	cmp.w	r8, #0
 80031ee:	dd9c      	ble.n	800312a <__sflush_r+0x1a>
 80031f0:	6a21      	ldr	r1, [r4, #32]
 80031f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80031f4:	4643      	mov	r3, r8
 80031f6:	463a      	mov	r2, r7
 80031f8:	4628      	mov	r0, r5
 80031fa:	47b0      	blx	r6
 80031fc:	2800      	cmp	r0, #0
 80031fe:	dc06      	bgt.n	800320e <__sflush_r+0xfe>
 8003200:	89a3      	ldrh	r3, [r4, #12]
 8003202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003206:	81a3      	strh	r3, [r4, #12]
 8003208:	f04f 30ff 	mov.w	r0, #4294967295
 800320c:	e78e      	b.n	800312c <__sflush_r+0x1c>
 800320e:	4407      	add	r7, r0
 8003210:	eba8 0800 	sub.w	r8, r8, r0
 8003214:	e7e9      	b.n	80031ea <__sflush_r+0xda>
 8003216:	bf00      	nop
 8003218:	20400001 	.word	0x20400001

0800321c <_fflush_r>:
 800321c:	b538      	push	{r3, r4, r5, lr}
 800321e:	690b      	ldr	r3, [r1, #16]
 8003220:	4605      	mov	r5, r0
 8003222:	460c      	mov	r4, r1
 8003224:	b913      	cbnz	r3, 800322c <_fflush_r+0x10>
 8003226:	2500      	movs	r5, #0
 8003228:	4628      	mov	r0, r5
 800322a:	bd38      	pop	{r3, r4, r5, pc}
 800322c:	b118      	cbz	r0, 8003236 <_fflush_r+0x1a>
 800322e:	6983      	ldr	r3, [r0, #24]
 8003230:	b90b      	cbnz	r3, 8003236 <_fflush_r+0x1a>
 8003232:	f000 f887 	bl	8003344 <__sinit>
 8003236:	4b14      	ldr	r3, [pc, #80]	; (8003288 <_fflush_r+0x6c>)
 8003238:	429c      	cmp	r4, r3
 800323a:	d11b      	bne.n	8003274 <_fflush_r+0x58>
 800323c:	686c      	ldr	r4, [r5, #4]
 800323e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0ef      	beq.n	8003226 <_fflush_r+0xa>
 8003246:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003248:	07d0      	lsls	r0, r2, #31
 800324a:	d404      	bmi.n	8003256 <_fflush_r+0x3a>
 800324c:	0599      	lsls	r1, r3, #22
 800324e:	d402      	bmi.n	8003256 <_fflush_r+0x3a>
 8003250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003252:	f000 f915 	bl	8003480 <__retarget_lock_acquire_recursive>
 8003256:	4628      	mov	r0, r5
 8003258:	4621      	mov	r1, r4
 800325a:	f7ff ff59 	bl	8003110 <__sflush_r>
 800325e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003260:	07da      	lsls	r2, r3, #31
 8003262:	4605      	mov	r5, r0
 8003264:	d4e0      	bmi.n	8003228 <_fflush_r+0xc>
 8003266:	89a3      	ldrh	r3, [r4, #12]
 8003268:	059b      	lsls	r3, r3, #22
 800326a:	d4dd      	bmi.n	8003228 <_fflush_r+0xc>
 800326c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800326e:	f000 f908 	bl	8003482 <__retarget_lock_release_recursive>
 8003272:	e7d9      	b.n	8003228 <_fflush_r+0xc>
 8003274:	4b05      	ldr	r3, [pc, #20]	; (800328c <_fflush_r+0x70>)
 8003276:	429c      	cmp	r4, r3
 8003278:	d101      	bne.n	800327e <_fflush_r+0x62>
 800327a:	68ac      	ldr	r4, [r5, #8]
 800327c:	e7df      	b.n	800323e <_fflush_r+0x22>
 800327e:	4b04      	ldr	r3, [pc, #16]	; (8003290 <_fflush_r+0x74>)
 8003280:	429c      	cmp	r4, r3
 8003282:	bf08      	it	eq
 8003284:	68ec      	ldreq	r4, [r5, #12]
 8003286:	e7da      	b.n	800323e <_fflush_r+0x22>
 8003288:	080038fc 	.word	0x080038fc
 800328c:	0800391c 	.word	0x0800391c
 8003290:	080038dc 	.word	0x080038dc

08003294 <std>:
 8003294:	2300      	movs	r3, #0
 8003296:	b510      	push	{r4, lr}
 8003298:	4604      	mov	r4, r0
 800329a:	e9c0 3300 	strd	r3, r3, [r0]
 800329e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032a2:	6083      	str	r3, [r0, #8]
 80032a4:	8181      	strh	r1, [r0, #12]
 80032a6:	6643      	str	r3, [r0, #100]	; 0x64
 80032a8:	81c2      	strh	r2, [r0, #14]
 80032aa:	6183      	str	r3, [r0, #24]
 80032ac:	4619      	mov	r1, r3
 80032ae:	2208      	movs	r2, #8
 80032b0:	305c      	adds	r0, #92	; 0x5c
 80032b2:	f7ff fdef 	bl	8002e94 <memset>
 80032b6:	4b05      	ldr	r3, [pc, #20]	; (80032cc <std+0x38>)
 80032b8:	6263      	str	r3, [r4, #36]	; 0x24
 80032ba:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <std+0x3c>)
 80032bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80032be:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <std+0x40>)
 80032c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80032c2:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <std+0x44>)
 80032c4:	6224      	str	r4, [r4, #32]
 80032c6:	6323      	str	r3, [r4, #48]	; 0x30
 80032c8:	bd10      	pop	{r4, pc}
 80032ca:	bf00      	nop
 80032cc:	08003731 	.word	0x08003731
 80032d0:	08003753 	.word	0x08003753
 80032d4:	0800378b 	.word	0x0800378b
 80032d8:	080037af 	.word	0x080037af

080032dc <_cleanup_r>:
 80032dc:	4901      	ldr	r1, [pc, #4]	; (80032e4 <_cleanup_r+0x8>)
 80032de:	f000 b8af 	b.w	8003440 <_fwalk_reent>
 80032e2:	bf00      	nop
 80032e4:	0800321d 	.word	0x0800321d

080032e8 <__sfmoreglue>:
 80032e8:	b570      	push	{r4, r5, r6, lr}
 80032ea:	2268      	movs	r2, #104	; 0x68
 80032ec:	1e4d      	subs	r5, r1, #1
 80032ee:	4355      	muls	r5, r2
 80032f0:	460e      	mov	r6, r1
 80032f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80032f6:	f000 f997 	bl	8003628 <_malloc_r>
 80032fa:	4604      	mov	r4, r0
 80032fc:	b140      	cbz	r0, 8003310 <__sfmoreglue+0x28>
 80032fe:	2100      	movs	r1, #0
 8003300:	e9c0 1600 	strd	r1, r6, [r0]
 8003304:	300c      	adds	r0, #12
 8003306:	60a0      	str	r0, [r4, #8]
 8003308:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800330c:	f7ff fdc2 	bl	8002e94 <memset>
 8003310:	4620      	mov	r0, r4
 8003312:	bd70      	pop	{r4, r5, r6, pc}

08003314 <__sfp_lock_acquire>:
 8003314:	4801      	ldr	r0, [pc, #4]	; (800331c <__sfp_lock_acquire+0x8>)
 8003316:	f000 b8b3 	b.w	8003480 <__retarget_lock_acquire_recursive>
 800331a:	bf00      	nop
 800331c:	200001d1 	.word	0x200001d1

08003320 <__sfp_lock_release>:
 8003320:	4801      	ldr	r0, [pc, #4]	; (8003328 <__sfp_lock_release+0x8>)
 8003322:	f000 b8ae 	b.w	8003482 <__retarget_lock_release_recursive>
 8003326:	bf00      	nop
 8003328:	200001d1 	.word	0x200001d1

0800332c <__sinit_lock_acquire>:
 800332c:	4801      	ldr	r0, [pc, #4]	; (8003334 <__sinit_lock_acquire+0x8>)
 800332e:	f000 b8a7 	b.w	8003480 <__retarget_lock_acquire_recursive>
 8003332:	bf00      	nop
 8003334:	200001d2 	.word	0x200001d2

08003338 <__sinit_lock_release>:
 8003338:	4801      	ldr	r0, [pc, #4]	; (8003340 <__sinit_lock_release+0x8>)
 800333a:	f000 b8a2 	b.w	8003482 <__retarget_lock_release_recursive>
 800333e:	bf00      	nop
 8003340:	200001d2 	.word	0x200001d2

08003344 <__sinit>:
 8003344:	b510      	push	{r4, lr}
 8003346:	4604      	mov	r4, r0
 8003348:	f7ff fff0 	bl	800332c <__sinit_lock_acquire>
 800334c:	69a3      	ldr	r3, [r4, #24]
 800334e:	b11b      	cbz	r3, 8003358 <__sinit+0x14>
 8003350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003354:	f7ff bff0 	b.w	8003338 <__sinit_lock_release>
 8003358:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800335c:	6523      	str	r3, [r4, #80]	; 0x50
 800335e:	4b13      	ldr	r3, [pc, #76]	; (80033ac <__sinit+0x68>)
 8003360:	4a13      	ldr	r2, [pc, #76]	; (80033b0 <__sinit+0x6c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	62a2      	str	r2, [r4, #40]	; 0x28
 8003366:	42a3      	cmp	r3, r4
 8003368:	bf04      	itt	eq
 800336a:	2301      	moveq	r3, #1
 800336c:	61a3      	streq	r3, [r4, #24]
 800336e:	4620      	mov	r0, r4
 8003370:	f000 f820 	bl	80033b4 <__sfp>
 8003374:	6060      	str	r0, [r4, #4]
 8003376:	4620      	mov	r0, r4
 8003378:	f000 f81c 	bl	80033b4 <__sfp>
 800337c:	60a0      	str	r0, [r4, #8]
 800337e:	4620      	mov	r0, r4
 8003380:	f000 f818 	bl	80033b4 <__sfp>
 8003384:	2200      	movs	r2, #0
 8003386:	60e0      	str	r0, [r4, #12]
 8003388:	2104      	movs	r1, #4
 800338a:	6860      	ldr	r0, [r4, #4]
 800338c:	f7ff ff82 	bl	8003294 <std>
 8003390:	68a0      	ldr	r0, [r4, #8]
 8003392:	2201      	movs	r2, #1
 8003394:	2109      	movs	r1, #9
 8003396:	f7ff ff7d 	bl	8003294 <std>
 800339a:	68e0      	ldr	r0, [r4, #12]
 800339c:	2202      	movs	r2, #2
 800339e:	2112      	movs	r1, #18
 80033a0:	f7ff ff78 	bl	8003294 <std>
 80033a4:	2301      	movs	r3, #1
 80033a6:	61a3      	str	r3, [r4, #24]
 80033a8:	e7d2      	b.n	8003350 <__sinit+0xc>
 80033aa:	bf00      	nop
 80033ac:	080038d8 	.word	0x080038d8
 80033b0:	080032dd 	.word	0x080032dd

080033b4 <__sfp>:
 80033b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b6:	4607      	mov	r7, r0
 80033b8:	f7ff ffac 	bl	8003314 <__sfp_lock_acquire>
 80033bc:	4b1e      	ldr	r3, [pc, #120]	; (8003438 <__sfp+0x84>)
 80033be:	681e      	ldr	r6, [r3, #0]
 80033c0:	69b3      	ldr	r3, [r6, #24]
 80033c2:	b913      	cbnz	r3, 80033ca <__sfp+0x16>
 80033c4:	4630      	mov	r0, r6
 80033c6:	f7ff ffbd 	bl	8003344 <__sinit>
 80033ca:	3648      	adds	r6, #72	; 0x48
 80033cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80033d0:	3b01      	subs	r3, #1
 80033d2:	d503      	bpl.n	80033dc <__sfp+0x28>
 80033d4:	6833      	ldr	r3, [r6, #0]
 80033d6:	b30b      	cbz	r3, 800341c <__sfp+0x68>
 80033d8:	6836      	ldr	r6, [r6, #0]
 80033da:	e7f7      	b.n	80033cc <__sfp+0x18>
 80033dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80033e0:	b9d5      	cbnz	r5, 8003418 <__sfp+0x64>
 80033e2:	4b16      	ldr	r3, [pc, #88]	; (800343c <__sfp+0x88>)
 80033e4:	60e3      	str	r3, [r4, #12]
 80033e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80033ea:	6665      	str	r5, [r4, #100]	; 0x64
 80033ec:	f000 f847 	bl	800347e <__retarget_lock_init_recursive>
 80033f0:	f7ff ff96 	bl	8003320 <__sfp_lock_release>
 80033f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80033f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80033fc:	6025      	str	r5, [r4, #0]
 80033fe:	61a5      	str	r5, [r4, #24]
 8003400:	2208      	movs	r2, #8
 8003402:	4629      	mov	r1, r5
 8003404:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003408:	f7ff fd44 	bl	8002e94 <memset>
 800340c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003410:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003414:	4620      	mov	r0, r4
 8003416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003418:	3468      	adds	r4, #104	; 0x68
 800341a:	e7d9      	b.n	80033d0 <__sfp+0x1c>
 800341c:	2104      	movs	r1, #4
 800341e:	4638      	mov	r0, r7
 8003420:	f7ff ff62 	bl	80032e8 <__sfmoreglue>
 8003424:	4604      	mov	r4, r0
 8003426:	6030      	str	r0, [r6, #0]
 8003428:	2800      	cmp	r0, #0
 800342a:	d1d5      	bne.n	80033d8 <__sfp+0x24>
 800342c:	f7ff ff78 	bl	8003320 <__sfp_lock_release>
 8003430:	230c      	movs	r3, #12
 8003432:	603b      	str	r3, [r7, #0]
 8003434:	e7ee      	b.n	8003414 <__sfp+0x60>
 8003436:	bf00      	nop
 8003438:	080038d8 	.word	0x080038d8
 800343c:	ffff0001 	.word	0xffff0001

08003440 <_fwalk_reent>:
 8003440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003444:	4606      	mov	r6, r0
 8003446:	4688      	mov	r8, r1
 8003448:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800344c:	2700      	movs	r7, #0
 800344e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003452:	f1b9 0901 	subs.w	r9, r9, #1
 8003456:	d505      	bpl.n	8003464 <_fwalk_reent+0x24>
 8003458:	6824      	ldr	r4, [r4, #0]
 800345a:	2c00      	cmp	r4, #0
 800345c:	d1f7      	bne.n	800344e <_fwalk_reent+0xe>
 800345e:	4638      	mov	r0, r7
 8003460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003464:	89ab      	ldrh	r3, [r5, #12]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d907      	bls.n	800347a <_fwalk_reent+0x3a>
 800346a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800346e:	3301      	adds	r3, #1
 8003470:	d003      	beq.n	800347a <_fwalk_reent+0x3a>
 8003472:	4629      	mov	r1, r5
 8003474:	4630      	mov	r0, r6
 8003476:	47c0      	blx	r8
 8003478:	4307      	orrs	r7, r0
 800347a:	3568      	adds	r5, #104	; 0x68
 800347c:	e7e9      	b.n	8003452 <_fwalk_reent+0x12>

0800347e <__retarget_lock_init_recursive>:
 800347e:	4770      	bx	lr

08003480 <__retarget_lock_acquire_recursive>:
 8003480:	4770      	bx	lr

08003482 <__retarget_lock_release_recursive>:
 8003482:	4770      	bx	lr

08003484 <__swhatbuf_r>:
 8003484:	b570      	push	{r4, r5, r6, lr}
 8003486:	460e      	mov	r6, r1
 8003488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800348c:	2900      	cmp	r1, #0
 800348e:	b096      	sub	sp, #88	; 0x58
 8003490:	4614      	mov	r4, r2
 8003492:	461d      	mov	r5, r3
 8003494:	da08      	bge.n	80034a8 <__swhatbuf_r+0x24>
 8003496:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	602a      	str	r2, [r5, #0]
 800349e:	061a      	lsls	r2, r3, #24
 80034a0:	d410      	bmi.n	80034c4 <__swhatbuf_r+0x40>
 80034a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034a6:	e00e      	b.n	80034c6 <__swhatbuf_r+0x42>
 80034a8:	466a      	mov	r2, sp
 80034aa:	f000 f9a7 	bl	80037fc <_fstat_r>
 80034ae:	2800      	cmp	r0, #0
 80034b0:	dbf1      	blt.n	8003496 <__swhatbuf_r+0x12>
 80034b2:	9a01      	ldr	r2, [sp, #4]
 80034b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80034b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80034bc:	425a      	negs	r2, r3
 80034be:	415a      	adcs	r2, r3
 80034c0:	602a      	str	r2, [r5, #0]
 80034c2:	e7ee      	b.n	80034a2 <__swhatbuf_r+0x1e>
 80034c4:	2340      	movs	r3, #64	; 0x40
 80034c6:	2000      	movs	r0, #0
 80034c8:	6023      	str	r3, [r4, #0]
 80034ca:	b016      	add	sp, #88	; 0x58
 80034cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080034d0 <__smakebuf_r>:
 80034d0:	898b      	ldrh	r3, [r1, #12]
 80034d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80034d4:	079d      	lsls	r5, r3, #30
 80034d6:	4606      	mov	r6, r0
 80034d8:	460c      	mov	r4, r1
 80034da:	d507      	bpl.n	80034ec <__smakebuf_r+0x1c>
 80034dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80034e0:	6023      	str	r3, [r4, #0]
 80034e2:	6123      	str	r3, [r4, #16]
 80034e4:	2301      	movs	r3, #1
 80034e6:	6163      	str	r3, [r4, #20]
 80034e8:	b002      	add	sp, #8
 80034ea:	bd70      	pop	{r4, r5, r6, pc}
 80034ec:	ab01      	add	r3, sp, #4
 80034ee:	466a      	mov	r2, sp
 80034f0:	f7ff ffc8 	bl	8003484 <__swhatbuf_r>
 80034f4:	9900      	ldr	r1, [sp, #0]
 80034f6:	4605      	mov	r5, r0
 80034f8:	4630      	mov	r0, r6
 80034fa:	f000 f895 	bl	8003628 <_malloc_r>
 80034fe:	b948      	cbnz	r0, 8003514 <__smakebuf_r+0x44>
 8003500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003504:	059a      	lsls	r2, r3, #22
 8003506:	d4ef      	bmi.n	80034e8 <__smakebuf_r+0x18>
 8003508:	f023 0303 	bic.w	r3, r3, #3
 800350c:	f043 0302 	orr.w	r3, r3, #2
 8003510:	81a3      	strh	r3, [r4, #12]
 8003512:	e7e3      	b.n	80034dc <__smakebuf_r+0xc>
 8003514:	4b0d      	ldr	r3, [pc, #52]	; (800354c <__smakebuf_r+0x7c>)
 8003516:	62b3      	str	r3, [r6, #40]	; 0x28
 8003518:	89a3      	ldrh	r3, [r4, #12]
 800351a:	6020      	str	r0, [r4, #0]
 800351c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003520:	81a3      	strh	r3, [r4, #12]
 8003522:	9b00      	ldr	r3, [sp, #0]
 8003524:	6163      	str	r3, [r4, #20]
 8003526:	9b01      	ldr	r3, [sp, #4]
 8003528:	6120      	str	r0, [r4, #16]
 800352a:	b15b      	cbz	r3, 8003544 <__smakebuf_r+0x74>
 800352c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003530:	4630      	mov	r0, r6
 8003532:	f000 f975 	bl	8003820 <_isatty_r>
 8003536:	b128      	cbz	r0, 8003544 <__smakebuf_r+0x74>
 8003538:	89a3      	ldrh	r3, [r4, #12]
 800353a:	f023 0303 	bic.w	r3, r3, #3
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	81a3      	strh	r3, [r4, #12]
 8003544:	89a0      	ldrh	r0, [r4, #12]
 8003546:	4305      	orrs	r5, r0
 8003548:	81a5      	strh	r5, [r4, #12]
 800354a:	e7cd      	b.n	80034e8 <__smakebuf_r+0x18>
 800354c:	080032dd 	.word	0x080032dd

08003550 <_free_r>:
 8003550:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003552:	2900      	cmp	r1, #0
 8003554:	d044      	beq.n	80035e0 <_free_r+0x90>
 8003556:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800355a:	9001      	str	r0, [sp, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	f1a1 0404 	sub.w	r4, r1, #4
 8003562:	bfb8      	it	lt
 8003564:	18e4      	addlt	r4, r4, r3
 8003566:	f000 f97d 	bl	8003864 <__malloc_lock>
 800356a:	4a1e      	ldr	r2, [pc, #120]	; (80035e4 <_free_r+0x94>)
 800356c:	9801      	ldr	r0, [sp, #4]
 800356e:	6813      	ldr	r3, [r2, #0]
 8003570:	b933      	cbnz	r3, 8003580 <_free_r+0x30>
 8003572:	6063      	str	r3, [r4, #4]
 8003574:	6014      	str	r4, [r2, #0]
 8003576:	b003      	add	sp, #12
 8003578:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800357c:	f000 b978 	b.w	8003870 <__malloc_unlock>
 8003580:	42a3      	cmp	r3, r4
 8003582:	d908      	bls.n	8003596 <_free_r+0x46>
 8003584:	6825      	ldr	r5, [r4, #0]
 8003586:	1961      	adds	r1, r4, r5
 8003588:	428b      	cmp	r3, r1
 800358a:	bf01      	itttt	eq
 800358c:	6819      	ldreq	r1, [r3, #0]
 800358e:	685b      	ldreq	r3, [r3, #4]
 8003590:	1949      	addeq	r1, r1, r5
 8003592:	6021      	streq	r1, [r4, #0]
 8003594:	e7ed      	b.n	8003572 <_free_r+0x22>
 8003596:	461a      	mov	r2, r3
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	b10b      	cbz	r3, 80035a0 <_free_r+0x50>
 800359c:	42a3      	cmp	r3, r4
 800359e:	d9fa      	bls.n	8003596 <_free_r+0x46>
 80035a0:	6811      	ldr	r1, [r2, #0]
 80035a2:	1855      	adds	r5, r2, r1
 80035a4:	42a5      	cmp	r5, r4
 80035a6:	d10b      	bne.n	80035c0 <_free_r+0x70>
 80035a8:	6824      	ldr	r4, [r4, #0]
 80035aa:	4421      	add	r1, r4
 80035ac:	1854      	adds	r4, r2, r1
 80035ae:	42a3      	cmp	r3, r4
 80035b0:	6011      	str	r1, [r2, #0]
 80035b2:	d1e0      	bne.n	8003576 <_free_r+0x26>
 80035b4:	681c      	ldr	r4, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	6053      	str	r3, [r2, #4]
 80035ba:	4421      	add	r1, r4
 80035bc:	6011      	str	r1, [r2, #0]
 80035be:	e7da      	b.n	8003576 <_free_r+0x26>
 80035c0:	d902      	bls.n	80035c8 <_free_r+0x78>
 80035c2:	230c      	movs	r3, #12
 80035c4:	6003      	str	r3, [r0, #0]
 80035c6:	e7d6      	b.n	8003576 <_free_r+0x26>
 80035c8:	6825      	ldr	r5, [r4, #0]
 80035ca:	1961      	adds	r1, r4, r5
 80035cc:	428b      	cmp	r3, r1
 80035ce:	bf04      	itt	eq
 80035d0:	6819      	ldreq	r1, [r3, #0]
 80035d2:	685b      	ldreq	r3, [r3, #4]
 80035d4:	6063      	str	r3, [r4, #4]
 80035d6:	bf04      	itt	eq
 80035d8:	1949      	addeq	r1, r1, r5
 80035da:	6021      	streq	r1, [r4, #0]
 80035dc:	6054      	str	r4, [r2, #4]
 80035de:	e7ca      	b.n	8003576 <_free_r+0x26>
 80035e0:	b003      	add	sp, #12
 80035e2:	bd30      	pop	{r4, r5, pc}
 80035e4:	200001d4 	.word	0x200001d4

080035e8 <sbrk_aligned>:
 80035e8:	b570      	push	{r4, r5, r6, lr}
 80035ea:	4e0e      	ldr	r6, [pc, #56]	; (8003624 <sbrk_aligned+0x3c>)
 80035ec:	460c      	mov	r4, r1
 80035ee:	6831      	ldr	r1, [r6, #0]
 80035f0:	4605      	mov	r5, r0
 80035f2:	b911      	cbnz	r1, 80035fa <sbrk_aligned+0x12>
 80035f4:	f000 f88c 	bl	8003710 <_sbrk_r>
 80035f8:	6030      	str	r0, [r6, #0]
 80035fa:	4621      	mov	r1, r4
 80035fc:	4628      	mov	r0, r5
 80035fe:	f000 f887 	bl	8003710 <_sbrk_r>
 8003602:	1c43      	adds	r3, r0, #1
 8003604:	d00a      	beq.n	800361c <sbrk_aligned+0x34>
 8003606:	1cc4      	adds	r4, r0, #3
 8003608:	f024 0403 	bic.w	r4, r4, #3
 800360c:	42a0      	cmp	r0, r4
 800360e:	d007      	beq.n	8003620 <sbrk_aligned+0x38>
 8003610:	1a21      	subs	r1, r4, r0
 8003612:	4628      	mov	r0, r5
 8003614:	f000 f87c 	bl	8003710 <_sbrk_r>
 8003618:	3001      	adds	r0, #1
 800361a:	d101      	bne.n	8003620 <sbrk_aligned+0x38>
 800361c:	f04f 34ff 	mov.w	r4, #4294967295
 8003620:	4620      	mov	r0, r4
 8003622:	bd70      	pop	{r4, r5, r6, pc}
 8003624:	200001d8 	.word	0x200001d8

08003628 <_malloc_r>:
 8003628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800362c:	1ccd      	adds	r5, r1, #3
 800362e:	f025 0503 	bic.w	r5, r5, #3
 8003632:	3508      	adds	r5, #8
 8003634:	2d0c      	cmp	r5, #12
 8003636:	bf38      	it	cc
 8003638:	250c      	movcc	r5, #12
 800363a:	2d00      	cmp	r5, #0
 800363c:	4607      	mov	r7, r0
 800363e:	db01      	blt.n	8003644 <_malloc_r+0x1c>
 8003640:	42a9      	cmp	r1, r5
 8003642:	d905      	bls.n	8003650 <_malloc_r+0x28>
 8003644:	230c      	movs	r3, #12
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	2600      	movs	r6, #0
 800364a:	4630      	mov	r0, r6
 800364c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003650:	4e2e      	ldr	r6, [pc, #184]	; (800370c <_malloc_r+0xe4>)
 8003652:	f000 f907 	bl	8003864 <__malloc_lock>
 8003656:	6833      	ldr	r3, [r6, #0]
 8003658:	461c      	mov	r4, r3
 800365a:	bb34      	cbnz	r4, 80036aa <_malloc_r+0x82>
 800365c:	4629      	mov	r1, r5
 800365e:	4638      	mov	r0, r7
 8003660:	f7ff ffc2 	bl	80035e8 <sbrk_aligned>
 8003664:	1c43      	adds	r3, r0, #1
 8003666:	4604      	mov	r4, r0
 8003668:	d14d      	bne.n	8003706 <_malloc_r+0xde>
 800366a:	6834      	ldr	r4, [r6, #0]
 800366c:	4626      	mov	r6, r4
 800366e:	2e00      	cmp	r6, #0
 8003670:	d140      	bne.n	80036f4 <_malloc_r+0xcc>
 8003672:	6823      	ldr	r3, [r4, #0]
 8003674:	4631      	mov	r1, r6
 8003676:	4638      	mov	r0, r7
 8003678:	eb04 0803 	add.w	r8, r4, r3
 800367c:	f000 f848 	bl	8003710 <_sbrk_r>
 8003680:	4580      	cmp	r8, r0
 8003682:	d13a      	bne.n	80036fa <_malloc_r+0xd2>
 8003684:	6821      	ldr	r1, [r4, #0]
 8003686:	3503      	adds	r5, #3
 8003688:	1a6d      	subs	r5, r5, r1
 800368a:	f025 0503 	bic.w	r5, r5, #3
 800368e:	3508      	adds	r5, #8
 8003690:	2d0c      	cmp	r5, #12
 8003692:	bf38      	it	cc
 8003694:	250c      	movcc	r5, #12
 8003696:	4629      	mov	r1, r5
 8003698:	4638      	mov	r0, r7
 800369a:	f7ff ffa5 	bl	80035e8 <sbrk_aligned>
 800369e:	3001      	adds	r0, #1
 80036a0:	d02b      	beq.n	80036fa <_malloc_r+0xd2>
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	442b      	add	r3, r5
 80036a6:	6023      	str	r3, [r4, #0]
 80036a8:	e00e      	b.n	80036c8 <_malloc_r+0xa0>
 80036aa:	6822      	ldr	r2, [r4, #0]
 80036ac:	1b52      	subs	r2, r2, r5
 80036ae:	d41e      	bmi.n	80036ee <_malloc_r+0xc6>
 80036b0:	2a0b      	cmp	r2, #11
 80036b2:	d916      	bls.n	80036e2 <_malloc_r+0xba>
 80036b4:	1961      	adds	r1, r4, r5
 80036b6:	42a3      	cmp	r3, r4
 80036b8:	6025      	str	r5, [r4, #0]
 80036ba:	bf18      	it	ne
 80036bc:	6059      	strne	r1, [r3, #4]
 80036be:	6863      	ldr	r3, [r4, #4]
 80036c0:	bf08      	it	eq
 80036c2:	6031      	streq	r1, [r6, #0]
 80036c4:	5162      	str	r2, [r4, r5]
 80036c6:	604b      	str	r3, [r1, #4]
 80036c8:	4638      	mov	r0, r7
 80036ca:	f104 060b 	add.w	r6, r4, #11
 80036ce:	f000 f8cf 	bl	8003870 <__malloc_unlock>
 80036d2:	f026 0607 	bic.w	r6, r6, #7
 80036d6:	1d23      	adds	r3, r4, #4
 80036d8:	1af2      	subs	r2, r6, r3
 80036da:	d0b6      	beq.n	800364a <_malloc_r+0x22>
 80036dc:	1b9b      	subs	r3, r3, r6
 80036de:	50a3      	str	r3, [r4, r2]
 80036e0:	e7b3      	b.n	800364a <_malloc_r+0x22>
 80036e2:	6862      	ldr	r2, [r4, #4]
 80036e4:	42a3      	cmp	r3, r4
 80036e6:	bf0c      	ite	eq
 80036e8:	6032      	streq	r2, [r6, #0]
 80036ea:	605a      	strne	r2, [r3, #4]
 80036ec:	e7ec      	b.n	80036c8 <_malloc_r+0xa0>
 80036ee:	4623      	mov	r3, r4
 80036f0:	6864      	ldr	r4, [r4, #4]
 80036f2:	e7b2      	b.n	800365a <_malloc_r+0x32>
 80036f4:	4634      	mov	r4, r6
 80036f6:	6876      	ldr	r6, [r6, #4]
 80036f8:	e7b9      	b.n	800366e <_malloc_r+0x46>
 80036fa:	230c      	movs	r3, #12
 80036fc:	603b      	str	r3, [r7, #0]
 80036fe:	4638      	mov	r0, r7
 8003700:	f000 f8b6 	bl	8003870 <__malloc_unlock>
 8003704:	e7a1      	b.n	800364a <_malloc_r+0x22>
 8003706:	6025      	str	r5, [r4, #0]
 8003708:	e7de      	b.n	80036c8 <_malloc_r+0xa0>
 800370a:	bf00      	nop
 800370c:	200001d4 	.word	0x200001d4

08003710 <_sbrk_r>:
 8003710:	b538      	push	{r3, r4, r5, lr}
 8003712:	4d06      	ldr	r5, [pc, #24]	; (800372c <_sbrk_r+0x1c>)
 8003714:	2300      	movs	r3, #0
 8003716:	4604      	mov	r4, r0
 8003718:	4608      	mov	r0, r1
 800371a:	602b      	str	r3, [r5, #0]
 800371c:	f7fd fba8 	bl	8000e70 <_sbrk>
 8003720:	1c43      	adds	r3, r0, #1
 8003722:	d102      	bne.n	800372a <_sbrk_r+0x1a>
 8003724:	682b      	ldr	r3, [r5, #0]
 8003726:	b103      	cbz	r3, 800372a <_sbrk_r+0x1a>
 8003728:	6023      	str	r3, [r4, #0]
 800372a:	bd38      	pop	{r3, r4, r5, pc}
 800372c:	200001dc 	.word	0x200001dc

08003730 <__sread>:
 8003730:	b510      	push	{r4, lr}
 8003732:	460c      	mov	r4, r1
 8003734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003738:	f000 f8a0 	bl	800387c <_read_r>
 800373c:	2800      	cmp	r0, #0
 800373e:	bfab      	itete	ge
 8003740:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003742:	89a3      	ldrhlt	r3, [r4, #12]
 8003744:	181b      	addge	r3, r3, r0
 8003746:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800374a:	bfac      	ite	ge
 800374c:	6563      	strge	r3, [r4, #84]	; 0x54
 800374e:	81a3      	strhlt	r3, [r4, #12]
 8003750:	bd10      	pop	{r4, pc}

08003752 <__swrite>:
 8003752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003756:	461f      	mov	r7, r3
 8003758:	898b      	ldrh	r3, [r1, #12]
 800375a:	05db      	lsls	r3, r3, #23
 800375c:	4605      	mov	r5, r0
 800375e:	460c      	mov	r4, r1
 8003760:	4616      	mov	r6, r2
 8003762:	d505      	bpl.n	8003770 <__swrite+0x1e>
 8003764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003768:	2302      	movs	r3, #2
 800376a:	2200      	movs	r2, #0
 800376c:	f000 f868 	bl	8003840 <_lseek_r>
 8003770:	89a3      	ldrh	r3, [r4, #12]
 8003772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003776:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800377a:	81a3      	strh	r3, [r4, #12]
 800377c:	4632      	mov	r2, r6
 800377e:	463b      	mov	r3, r7
 8003780:	4628      	mov	r0, r5
 8003782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003786:	f000 b817 	b.w	80037b8 <_write_r>

0800378a <__sseek>:
 800378a:	b510      	push	{r4, lr}
 800378c:	460c      	mov	r4, r1
 800378e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003792:	f000 f855 	bl	8003840 <_lseek_r>
 8003796:	1c43      	adds	r3, r0, #1
 8003798:	89a3      	ldrh	r3, [r4, #12]
 800379a:	bf15      	itete	ne
 800379c:	6560      	strne	r0, [r4, #84]	; 0x54
 800379e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80037a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80037a6:	81a3      	strheq	r3, [r4, #12]
 80037a8:	bf18      	it	ne
 80037aa:	81a3      	strhne	r3, [r4, #12]
 80037ac:	bd10      	pop	{r4, pc}

080037ae <__sclose>:
 80037ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037b2:	f000 b813 	b.w	80037dc <_close_r>
	...

080037b8 <_write_r>:
 80037b8:	b538      	push	{r3, r4, r5, lr}
 80037ba:	4d07      	ldr	r5, [pc, #28]	; (80037d8 <_write_r+0x20>)
 80037bc:	4604      	mov	r4, r0
 80037be:	4608      	mov	r0, r1
 80037c0:	4611      	mov	r1, r2
 80037c2:	2200      	movs	r2, #0
 80037c4:	602a      	str	r2, [r5, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	f7fc feaf 	bl	800052a <_write>
 80037cc:	1c43      	adds	r3, r0, #1
 80037ce:	d102      	bne.n	80037d6 <_write_r+0x1e>
 80037d0:	682b      	ldr	r3, [r5, #0]
 80037d2:	b103      	cbz	r3, 80037d6 <_write_r+0x1e>
 80037d4:	6023      	str	r3, [r4, #0]
 80037d6:	bd38      	pop	{r3, r4, r5, pc}
 80037d8:	200001dc 	.word	0x200001dc

080037dc <_close_r>:
 80037dc:	b538      	push	{r3, r4, r5, lr}
 80037de:	4d06      	ldr	r5, [pc, #24]	; (80037f8 <_close_r+0x1c>)
 80037e0:	2300      	movs	r3, #0
 80037e2:	4604      	mov	r4, r0
 80037e4:	4608      	mov	r0, r1
 80037e6:	602b      	str	r3, [r5, #0]
 80037e8:	f7fd fb0d 	bl	8000e06 <_close>
 80037ec:	1c43      	adds	r3, r0, #1
 80037ee:	d102      	bne.n	80037f6 <_close_r+0x1a>
 80037f0:	682b      	ldr	r3, [r5, #0]
 80037f2:	b103      	cbz	r3, 80037f6 <_close_r+0x1a>
 80037f4:	6023      	str	r3, [r4, #0]
 80037f6:	bd38      	pop	{r3, r4, r5, pc}
 80037f8:	200001dc 	.word	0x200001dc

080037fc <_fstat_r>:
 80037fc:	b538      	push	{r3, r4, r5, lr}
 80037fe:	4d07      	ldr	r5, [pc, #28]	; (800381c <_fstat_r+0x20>)
 8003800:	2300      	movs	r3, #0
 8003802:	4604      	mov	r4, r0
 8003804:	4608      	mov	r0, r1
 8003806:	4611      	mov	r1, r2
 8003808:	602b      	str	r3, [r5, #0]
 800380a:	f7fd fb08 	bl	8000e1e <_fstat>
 800380e:	1c43      	adds	r3, r0, #1
 8003810:	d102      	bne.n	8003818 <_fstat_r+0x1c>
 8003812:	682b      	ldr	r3, [r5, #0]
 8003814:	b103      	cbz	r3, 8003818 <_fstat_r+0x1c>
 8003816:	6023      	str	r3, [r4, #0]
 8003818:	bd38      	pop	{r3, r4, r5, pc}
 800381a:	bf00      	nop
 800381c:	200001dc 	.word	0x200001dc

08003820 <_isatty_r>:
 8003820:	b538      	push	{r3, r4, r5, lr}
 8003822:	4d06      	ldr	r5, [pc, #24]	; (800383c <_isatty_r+0x1c>)
 8003824:	2300      	movs	r3, #0
 8003826:	4604      	mov	r4, r0
 8003828:	4608      	mov	r0, r1
 800382a:	602b      	str	r3, [r5, #0]
 800382c:	f7fd fb07 	bl	8000e3e <_isatty>
 8003830:	1c43      	adds	r3, r0, #1
 8003832:	d102      	bne.n	800383a <_isatty_r+0x1a>
 8003834:	682b      	ldr	r3, [r5, #0]
 8003836:	b103      	cbz	r3, 800383a <_isatty_r+0x1a>
 8003838:	6023      	str	r3, [r4, #0]
 800383a:	bd38      	pop	{r3, r4, r5, pc}
 800383c:	200001dc 	.word	0x200001dc

08003840 <_lseek_r>:
 8003840:	b538      	push	{r3, r4, r5, lr}
 8003842:	4d07      	ldr	r5, [pc, #28]	; (8003860 <_lseek_r+0x20>)
 8003844:	4604      	mov	r4, r0
 8003846:	4608      	mov	r0, r1
 8003848:	4611      	mov	r1, r2
 800384a:	2200      	movs	r2, #0
 800384c:	602a      	str	r2, [r5, #0]
 800384e:	461a      	mov	r2, r3
 8003850:	f7fd fb00 	bl	8000e54 <_lseek>
 8003854:	1c43      	adds	r3, r0, #1
 8003856:	d102      	bne.n	800385e <_lseek_r+0x1e>
 8003858:	682b      	ldr	r3, [r5, #0]
 800385a:	b103      	cbz	r3, 800385e <_lseek_r+0x1e>
 800385c:	6023      	str	r3, [r4, #0]
 800385e:	bd38      	pop	{r3, r4, r5, pc}
 8003860:	200001dc 	.word	0x200001dc

08003864 <__malloc_lock>:
 8003864:	4801      	ldr	r0, [pc, #4]	; (800386c <__malloc_lock+0x8>)
 8003866:	f7ff be0b 	b.w	8003480 <__retarget_lock_acquire_recursive>
 800386a:	bf00      	nop
 800386c:	200001d0 	.word	0x200001d0

08003870 <__malloc_unlock>:
 8003870:	4801      	ldr	r0, [pc, #4]	; (8003878 <__malloc_unlock+0x8>)
 8003872:	f7ff be06 	b.w	8003482 <__retarget_lock_release_recursive>
 8003876:	bf00      	nop
 8003878:	200001d0 	.word	0x200001d0

0800387c <_read_r>:
 800387c:	b538      	push	{r3, r4, r5, lr}
 800387e:	4d07      	ldr	r5, [pc, #28]	; (800389c <_read_r+0x20>)
 8003880:	4604      	mov	r4, r0
 8003882:	4608      	mov	r0, r1
 8003884:	4611      	mov	r1, r2
 8003886:	2200      	movs	r2, #0
 8003888:	602a      	str	r2, [r5, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	f7fd fa9e 	bl	8000dcc <_read>
 8003890:	1c43      	adds	r3, r0, #1
 8003892:	d102      	bne.n	800389a <_read_r+0x1e>
 8003894:	682b      	ldr	r3, [r5, #0]
 8003896:	b103      	cbz	r3, 800389a <_read_r+0x1e>
 8003898:	6023      	str	r3, [r4, #0]
 800389a:	bd38      	pop	{r3, r4, r5, pc}
 800389c:	200001dc 	.word	0x200001dc

080038a0 <_init>:
 80038a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a2:	bf00      	nop
 80038a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038a6:	bc08      	pop	{r3}
 80038a8:	469e      	mov	lr, r3
 80038aa:	4770      	bx	lr

080038ac <_fini>:
 80038ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ae:	bf00      	nop
 80038b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038b2:	bc08      	pop	{r3}
 80038b4:	469e      	mov	lr, r3
 80038b6:	4770      	bx	lr
