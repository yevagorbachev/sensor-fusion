
SensorFusion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005040  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  080051e0  080051e0  000151e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053d4  080053d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080053d4  080053d4  000153d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053dc  080053dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053dc  080053dc  000153dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053e0  080053e0  000153e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080053e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000070  08005454  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08005454  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be63  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ebc  00000000  00000000  0002bf03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  0002ddc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af8  00000000  00000000  0002e998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a88  00000000  00000000  0002f490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e94e  00000000  00000000  00044f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aff2  00000000  00000000  00053866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de858  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000396c  00000000  00000000  000de8a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080051c8 	.word	0x080051c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080051c8 	.word	0x080051c8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	2b00      	cmp	r3, #0
 800059a:	d013      	beq.n	80005c4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00b      	beq.n	80005c4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005ac:	e000      	b.n	80005b0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0f9      	beq.n	80005ae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c4:	687b      	ldr	r3, [r7, #4]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// overrides system _write so we can use SWD
int _write(int file, char* ptr, int len)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b086      	sub	sp, #24
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	60f8      	str	r0, [r7, #12]
 80005da:	60b9      	str	r1, [r7, #8]
 80005dc:	607a      	str	r2, [r7, #4]
	for (int DataIdx = 0; DataIdx < len; DataIdx++)
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
 80005e2:	e009      	b.n	80005f8 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	1c5a      	adds	r2, r3, #1
 80005e8:	60ba      	str	r2, [r7, #8]
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ffc9 	bl	8000584 <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++)
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	3301      	adds	r3, #1
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697a      	ldr	r2, [r7, #20]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	dbf1      	blt.n	80005e4 <_write+0x12>
	}
	return len;
 8000600:	687b      	ldr	r3, [r7, #4]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3718      	adds	r7, #24
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <print_hex>:

void print_hex(const uint8_t* buf, int len)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < len; i++)
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	e00a      	b.n	8000632 <print_hex+0x26>
	{
		printf("%.2hX", buf[i]);
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	4619      	mov	r1, r3
 8000626:	4808      	ldr	r0, [pc, #32]	; (8000648 <print_hex+0x3c>)
 8000628:	f003 fd6c 	bl	8004104 <iprintf>
	for (int i = 0; i < len; i++)
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	3301      	adds	r3, #1
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	429a      	cmp	r2, r3
 8000638:	dbf0      	blt.n	800061c <print_hex+0x10>
	}
	printf("\n");
 800063a:	200a      	movs	r0, #10
 800063c:	f003 fd7a 	bl	8004134 <putchar>
}
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	080051e0 	.word	0x080051e0

0800064c <toggle_led>:


void toggle_led(led_t led)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOD, led);
 8000656:	88fb      	ldrh	r3, [r7, #6]
 8000658:	4619      	mov	r1, r3
 800065a:	4803      	ldr	r0, [pc, #12]	; (8000668 <toggle_led+0x1c>)
 800065c:	f001 fa47 	bl	8001aee <HAL_GPIO_TogglePin>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40020c00 	.word	0x40020c00

0800066c <set_led>:

void set_led(led_t led)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, led, GPIO_PIN_SET);
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	2201      	movs	r2, #1
 800067a:	4619      	mov	r1, r3
 800067c:	4803      	ldr	r0, [pc, #12]	; (800068c <set_led+0x20>)
 800067e:	f001 fa1d 	bl	8001abc <HAL_GPIO_WritePin>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40020c00 	.word	0x40020c00

08000690 <reset_led>:

void reset_led(led_t led)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, led, GPIO_PIN_RESET);
 800069a:	88fb      	ldrh	r3, [r7, #6]
 800069c:	2200      	movs	r2, #0
 800069e:	4619      	mov	r1, r3
 80006a0:	4803      	ldr	r0, [pc, #12]	; (80006b0 <reset_led+0x20>)
 80006a2:	f001 fa0b 	bl	8001abc <HAL_GPIO_WritePin>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40020c00 	.word	0x40020c00

080006b4 <print_hal>:

void print_hal(HAL_StatusTypeDef status)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
	switch (status)
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	2b03      	cmp	r3, #3
 80006c2:	d81b      	bhi.n	80006fc <print_hal+0x48>
 80006c4:	a201      	add	r2, pc, #4	; (adr r2, 80006cc <print_hal+0x18>)
 80006c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ca:	bf00      	nop
 80006cc:	080006dd 	.word	0x080006dd
 80006d0:	080006e5 	.word	0x080006e5
 80006d4:	080006f5 	.word	0x080006f5
 80006d8:	080006ed 	.word	0x080006ed
	{
		case HAL_OK:
			printf("HAL OK\n");
 80006dc:	4809      	ldr	r0, [pc, #36]	; (8000704 <print_hal+0x50>)
 80006de:	f003 fdad 	bl	800423c <puts>
			break;
 80006e2:	e00b      	b.n	80006fc <print_hal+0x48>
		case HAL_ERROR:
			printf("HAL ERROR\n");
 80006e4:	4808      	ldr	r0, [pc, #32]	; (8000708 <print_hal+0x54>)
 80006e6:	f003 fda9 	bl	800423c <puts>
			break;
 80006ea:	e007      	b.n	80006fc <print_hal+0x48>
		case HAL_TIMEOUT:
			printf("HAL TIMEOUT\n");
 80006ec:	4807      	ldr	r0, [pc, #28]	; (800070c <print_hal+0x58>)
 80006ee:	f003 fda5 	bl	800423c <puts>
			break;
 80006f2:	e003      	b.n	80006fc <print_hal+0x48>
		case HAL_BUSY:
			printf("HAL BUSY\n");
 80006f4:	4806      	ldr	r0, [pc, #24]	; (8000710 <print_hal+0x5c>)
 80006f6:	f003 fda1 	bl	800423c <puts>
			break;
 80006fa:	bf00      	nop
	}
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	080051e8 	.word	0x080051e8
 8000708:	080051f0 	.word	0x080051f0
 800070c:	080051fc 	.word	0x080051fc
 8000710:	08005208 	.word	0x08005208

08000714 <i2c1_write>:

HAL_StatusTypeDef i2c1_write(uint8_t reg, uint8_t* buf, uint16_t len)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af04      	add	r7, sp, #16
 800071a:	4603      	mov	r3, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	71fb      	strb	r3, [r7, #7]
 8000720:	4613      	mov	r3, r2
 8000722:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(&hi2c1, LSM303_WHOAMI, reg, 1, buf, len, 100);
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	b29a      	uxth	r2, r3
 8000728:	2364      	movs	r3, #100	; 0x64
 800072a:	9302      	str	r3, [sp, #8]
 800072c:	88bb      	ldrh	r3, [r7, #4]
 800072e:	9301      	str	r3, [sp, #4]
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	2301      	movs	r3, #1
 8000736:	2133      	movs	r1, #51	; 0x33
 8000738:	480b      	ldr	r0, [pc, #44]	; (8000768 <i2c1_write+0x54>)
 800073a:	f001 fb37 	bl	8001dac <HAL_I2C_Mem_Write>
 800073e:	4603      	mov	r3, r0
 8000740:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK)
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d009      	beq.n	800075c <i2c1_write+0x48>
	{
		printf("Failed to write %d bytes starting at register 0x%.2hX to LSM303: ", len, reg);
 8000748:	88bb      	ldrh	r3, [r7, #4]
 800074a:	79fa      	ldrb	r2, [r7, #7]
 800074c:	4619      	mov	r1, r3
 800074e:	4807      	ldr	r0, [pc, #28]	; (800076c <i2c1_write+0x58>)
 8000750:	f003 fcd8 	bl	8004104 <iprintf>
		print_hal(status);
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ffac 	bl	80006b4 <print_hal>
	}
	return status;
 800075c:	7bfb      	ldrb	r3, [r7, #15]
}
 800075e:	4618      	mov	r0, r3
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	2000008c 	.word	0x2000008c
 800076c:	08005214 	.word	0x08005214

08000770 <i2c1_read>:

HAL_StatusTypeDef i2c1_read(uint8_t reg, uint8_t* buf, uint16_t len)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af04      	add	r7, sp, #16
 8000776:	4603      	mov	r3, r0
 8000778:	6039      	str	r1, [r7, #0]
 800077a:	71fb      	strb	r3, [r7, #7]
 800077c:	4613      	mov	r3, r2
 800077e:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(&hi2c1, LSM303_WHOAMI, reg, 1, buf, len, 100);
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	b29a      	uxth	r2, r3
 8000784:	2364      	movs	r3, #100	; 0x64
 8000786:	9302      	str	r3, [sp, #8]
 8000788:	88bb      	ldrh	r3, [r7, #4]
 800078a:	9301      	str	r3, [sp, #4]
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	2301      	movs	r3, #1
 8000792:	2133      	movs	r1, #51	; 0x33
 8000794:	480b      	ldr	r0, [pc, #44]	; (80007c4 <i2c1_read+0x54>)
 8000796:	f001 fc03 	bl	8001fa0 <HAL_I2C_Mem_Read>
 800079a:	4603      	mov	r3, r0
 800079c:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK)
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d009      	beq.n	80007b8 <i2c1_read+0x48>
	{
		printf("Failed to read %d bytes starting at register 0x%.2hX from LSM303: ", len, reg);
 80007a4:	88bb      	ldrh	r3, [r7, #4]
 80007a6:	79fa      	ldrb	r2, [r7, #7]
 80007a8:	4619      	mov	r1, r3
 80007aa:	4807      	ldr	r0, [pc, #28]	; (80007c8 <i2c1_read+0x58>)
 80007ac:	f003 fcaa 	bl	8004104 <iprintf>
		print_hal(status);
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ff7e 	bl	80006b4 <print_hal>
	}
	return status;
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	2000008c 	.word	0x2000008c
 80007c8:	08005258 	.word	0x08005258

080007cc <convert_accel>:
	float y;
	float z;
} accel_t;

accel_t convert_accel(const int8_t* buf)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b08d      	sub	sp, #52	; 0x34
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6178      	str	r0, [r7, #20]
	// little endian (ctrl4[1] set  to zero)
	accel_t ret;
	ret.x = ((int16_t) buf[1] * 256) + (int16_t) buf[0];
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	3301      	adds	r3, #1
 80007d8:	f993 3000 	ldrsb.w	r3, [r3]
 80007dc:	021b      	lsls	r3, r3, #8
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	f992 2000 	ldrsb.w	r2, [r2]
 80007e4:	4413      	add	r3, r2
 80007e6:	ee07 3a90 	vmov	s15, r3
 80007ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007ee:	edc7 7a06 	vstr	s15, [r7, #24]
	ret.y = ((int16_t) buf[3] * 256) + (int16_t) buf[2];
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	3303      	adds	r3, #3
 80007f6:	f993 3000 	ldrsb.w	r3, [r3]
 80007fa:	021b      	lsls	r3, r3, #8
 80007fc:	697a      	ldr	r2, [r7, #20]
 80007fe:	3202      	adds	r2, #2
 8000800:	f992 2000 	ldrsb.w	r2, [r2]
 8000804:	4413      	add	r3, r2
 8000806:	ee07 3a90 	vmov	s15, r3
 800080a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800080e:	edc7 7a07 	vstr	s15, [r7, #28]
	ret.z = ((int16_t) buf[5] * 256) + (int16_t) buf[4];
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	3305      	adds	r3, #5
 8000816:	f993 3000 	ldrsb.w	r3, [r3]
 800081a:	021b      	lsls	r3, r3, #8
 800081c:	697a      	ldr	r2, [r7, #20]
 800081e:	3204      	adds	r2, #4
 8000820:	f992 2000 	ldrsb.w	r2, [r2]
 8000824:	4413      	add	r3, r2
 8000826:	ee07 3a90 	vmov	s15, r3
 800082a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800082e:	edc7 7a08 	vstr	s15, [r7, #32]
	return ret;
 8000832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000836:	f107 0218 	add.w	r2, r7, #24
 800083a:	ca07      	ldmia	r2, {r0, r1, r2}
 800083c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000840:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000846:	ee06 1a90 	vmov	s13, r1
 800084a:	ee07 2a10 	vmov	s14, r2
 800084e:	ee07 3a90 	vmov	s15, r3
}
 8000852:	eeb0 0a66 	vmov.f32	s0, s13
 8000856:	eef0 0a47 	vmov.f32	s1, s14
 800085a:	eeb0 1a67 	vmov.f32	s2, s15
 800085e:	3734      	adds	r7, #52	; 0x34
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <accel_2g_hr_mg>:

float accel_2g_hr_mg(int16_t val)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	80fb      	strh	r3, [r7, #6]
	return ((float) val / 16.0f) * 0.98f;
 8000872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000876:	ee07 3a90 	vmov	s15, r3
 800087a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800087e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000882:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000886:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800089c <accel_2g_hr_mg+0x34>
 800088a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800088e:	eeb0 0a67 	vmov.f32	s0, s15
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	3f7ae148 	.word	0x3f7ae148

080008a0 <print_accel>:

void print_accel(accel_t accel)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	eef0 6a40 	vmov.f32	s13, s0
 80008aa:	eeb0 7a60 	vmov.f32	s14, s1
 80008ae:	eef0 7a41 	vmov.f32	s15, s2
 80008b2:	edc7 6a01 	vstr	s13, [r7, #4]
 80008b6:	ed87 7a02 	vstr	s14, [r7, #8]
 80008ba:	edc7 7a03 	vstr	s15, [r7, #12]
	int x = (int) accel_2g_hr_mg(accel.x);
 80008be:	edd7 7a01 	vldr	s15, [r7, #4]
 80008c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008c6:	ee17 3a90 	vmov	r3, s15
 80008ca:	b21b      	sxth	r3, r3
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ffcb 	bl	8000868 <accel_2g_hr_mg>
 80008d2:	eef0 7a40 	vmov.f32	s15, s0
 80008d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008da:	ee17 3a90 	vmov	r3, s15
 80008de:	61fb      	str	r3, [r7, #28]
	int y = (int) accel_2g_hr_mg(accel.y);
 80008e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80008e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008e8:	ee17 3a90 	vmov	r3, s15
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ffba 	bl	8000868 <accel_2g_hr_mg>
 80008f4:	eef0 7a40 	vmov.f32	s15, s0
 80008f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008fc:	ee17 3a90 	vmov	r3, s15
 8000900:	61bb      	str	r3, [r7, #24]
	int z = (int) accel_2g_hr_mg(accel.z);
 8000902:	edd7 7a03 	vldr	s15, [r7, #12]
 8000906:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800090a:	ee17 3a90 	vmov	r3, s15
 800090e:	b21b      	sxth	r3, r3
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff ffa9 	bl	8000868 <accel_2g_hr_mg>
 8000916:	eef0 7a40 	vmov.f32	s15, s0
 800091a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800091e:	ee17 3a90 	vmov	r3, s15
 8000922:	617b      	str	r3, [r7, #20]
	printf("X: %d, Y: %d, Z: %d [mg]\n", x, y, z);
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	69ba      	ldr	r2, [r7, #24]
 8000928:	69f9      	ldr	r1, [r7, #28]
 800092a:	4803      	ldr	r0, [pc, #12]	; (8000938 <print_accel+0x98>)
 800092c:	f003 fbea 	bl	8004104 <iprintf>
}
 8000930:	bf00      	nop
 8000932:	3720      	adds	r7, #32
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	0800529c 	.word	0x0800529c

0800093c <my_init>:

#define COMMENT "fixed full-scale"

void my_init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
	printf(COMMENT);
 8000942:	4820      	ldr	r0, [pc, #128]	; (80009c4 <my_init+0x88>)
 8000944:	f003 fbde 	bl	8004104 <iprintf>
	printf("\n");
 8000948:	200a      	movs	r0, #10
 800094a:	f003 fbf3 	bl	8004134 <putchar>

	uint8_t whoami = 0x00;
 800094e:	2300      	movs	r3, #0
 8000950:	71fb      	strb	r3, [r7, #7]
	i2c1_read(LSM303_WHOAMI_REG, &whoami, 1);
 8000952:	1dfb      	adds	r3, r7, #7
 8000954:	2201      	movs	r2, #1
 8000956:	4619      	mov	r1, r3
 8000958:	200f      	movs	r0, #15
 800095a:	f7ff ff09 	bl	8000770 <i2c1_read>
	printf("WHOAMI: 0x%.2x\n", whoami);
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	4619      	mov	r1, r3
 8000962:	4819      	ldr	r0, [pc, #100]	; (80009c8 <my_init+0x8c>)
 8000964:	f003 fbce 	bl	8004104 <iprintf>

	uint8_t ctrl_reg1 = 0b01010111;
 8000968:	2357      	movs	r3, #87	; 0x57
 800096a:	71bb      	strb	r3, [r7, #6]
	i2c1_write(LSM303_CTRL1, &ctrl_reg1, 1);
 800096c:	1dbb      	adds	r3, r7, #6
 800096e:	2201      	movs	r2, #1
 8000970:	4619      	mov	r1, r3
 8000972:	2020      	movs	r0, #32
 8000974:	f7ff fece 	bl	8000714 <i2c1_write>
	ctrl_reg1 = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	71bb      	strb	r3, [r7, #6]
	i2c1_read(LSM303_CTRL1, &ctrl_reg1, 1);
 800097c:	1dbb      	adds	r3, r7, #6
 800097e:	2201      	movs	r2, #1
 8000980:	4619      	mov	r1, r3
 8000982:	2020      	movs	r0, #32
 8000984:	f7ff fef4 	bl	8000770 <i2c1_read>
	printf("CTRL_REG1: 0x%.2x\n", ctrl_reg1);
 8000988:	79bb      	ldrb	r3, [r7, #6]
 800098a:	4619      	mov	r1, r3
 800098c:	480f      	ldr	r0, [pc, #60]	; (80009cc <my_init+0x90>)
 800098e:	f003 fbb9 	bl	8004104 <iprintf>

	uint8_t ctrl_reg4 = 0b00001000;
 8000992:	2308      	movs	r3, #8
 8000994:	717b      	strb	r3, [r7, #5]
	i2c1_write(LSM303_CTRL1 + 3, &ctrl_reg4, 1);
 8000996:	1d7b      	adds	r3, r7, #5
 8000998:	2201      	movs	r2, #1
 800099a:	4619      	mov	r1, r3
 800099c:	2023      	movs	r0, #35	; 0x23
 800099e:	f7ff feb9 	bl	8000714 <i2c1_write>
	ctrl_reg4 = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	717b      	strb	r3, [r7, #5]
	i2c1_read(LSM303_CTRL1 + 3, &ctrl_reg4, 1);
 80009a6:	1d7b      	adds	r3, r7, #5
 80009a8:	2201      	movs	r2, #1
 80009aa:	4619      	mov	r1, r3
 80009ac:	2023      	movs	r0, #35	; 0x23
 80009ae:	f7ff fedf 	bl	8000770 <i2c1_read>
	printf("CTRL_REG4: 0x%.2x\n", ctrl_reg4);
 80009b2:	797b      	ldrb	r3, [r7, #5]
 80009b4:	4619      	mov	r1, r3
 80009b6:	4806      	ldr	r0, [pc, #24]	; (80009d0 <my_init+0x94>)
 80009b8:	f003 fba4 	bl	8004104 <iprintf>
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	080052b8 	.word	0x080052b8
 80009c8:	080052cc 	.word	0x080052cc
 80009cc:	080052dc 	.word	0x080052dc
 80009d0:	080052f0 	.word	0x080052f0

080009d4 <loop>:


void loop(int loop_count)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b088      	sub	sp, #32
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	uint8_t status;
	int8_t accel[6];
	accel_t acceleration_mg;

	i2c1_read(LSM303_STATUS, &status, 1);
 80009dc:	f107 031b 	add.w	r3, r7, #27
 80009e0:	2201      	movs	r2, #1
 80009e2:	4619      	mov	r1, r3
 80009e4:	2027      	movs	r0, #39	; 0x27
 80009e6:	f7ff fec3 	bl	8000770 <i2c1_read>
	if (status & 0b00001000) // xyz ready
 80009ea:	7efb      	ldrb	r3, [r7, #27]
 80009ec:	f003 0308 	and.w	r3, r3, #8
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d03d      	beq.n	8000a70 <loop+0x9c>
	{
		for (int i = 0; i < 6; i++)
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
 80009f8:	e00e      	b.n	8000a18 <loop+0x44>
		{
			i2c1_read(LSM303_DATA + i, (uint8_t*)accel + i, 1);
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	3328      	adds	r3, #40	; 0x28
 8000a00:	b2d8      	uxtb	r0, r3
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	f107 0214 	add.w	r2, r7, #20
 8000a08:	4413      	add	r3, r2
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f7ff feaf 	bl	8000770 <i2c1_read>
		for (int i = 0; i < 6; i++)
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	3301      	adds	r3, #1
 8000a16:	61fb      	str	r3, [r7, #28]
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	2b05      	cmp	r3, #5
 8000a1c:	dded      	ble.n	80009fa <loop+0x26>
		}
		// i2c1_read(LSM303_DATA, accel, 6);
		printf("(%d) Acceleration register: ", loop_count);
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	4815      	ldr	r0, [pc, #84]	; (8000a78 <loop+0xa4>)
 8000a22:	f003 fb6f 	bl	8004104 <iprintf>
		print_hex((uint8_t*)accel, 6);
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	2106      	movs	r1, #6
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fded 	bl	800060c <print_hex>
		acceleration_mg = convert_accel(accel);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fec8 	bl	80007cc <convert_accel>
 8000a3c:	eef0 6a40 	vmov.f32	s13, s0
 8000a40:	eeb0 7a60 	vmov.f32	s14, s1
 8000a44:	eef0 7a41 	vmov.f32	s15, s2
 8000a48:	edc7 6a02 	vstr	s13, [r7, #8]
 8000a4c:	ed87 7a03 	vstr	s14, [r7, #12]
 8000a50:	edc7 7a04 	vstr	s15, [r7, #16]
		print_accel(acceleration_mg);
 8000a54:	edd7 6a02 	vldr	s13, [r7, #8]
 8000a58:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a60:	eeb0 0a66 	vmov.f32	s0, s13
 8000a64:	eef0 0a47 	vmov.f32	s1, s14
 8000a68:	eeb0 1a67 	vmov.f32	s2, s15
 8000a6c:	f7ff ff18 	bl	80008a0 <print_accel>
	}
}
 8000a70:	bf00      	nop
 8000a72:	3720      	adds	r7, #32
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	08005304 	.word	0x08005304

08000a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a82:	f000 fd03 	bl	800148c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a86:	f000 f837 	bl	8000af8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a8a:	f000 f89d 	bl	8000bc8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8e:	f000 f985 	bl	8000d9c <MX_GPIO_Init>
  MX_I2S2_Init();
 8000a92:	f000 f8e7 	bl	8000c64 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000a96:	f000 f913 	bl	8000cc0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000a9a:	f000 f941 	bl	8000d20 <MX_SPI1_Init>
  MX_USB_OTG_FS_USB_Init();
 8000a9e:	f000 f975 	bl	8000d8c <MX_USB_OTG_FS_USB_Init>
  MX_I2C1_Init();
 8000aa2:	f000 f8b1 	bl	8000c08 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  my_init();
 8000aa6:	f7ff ff49 	bl	800093c <my_init>
  int loop_counter = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 8000aae:	2101      	movs	r1, #1
 8000ab0:	4810      	ldr	r0, [pc, #64]	; (8000af4 <main+0x78>)
 8000ab2:	f000 ffeb 	bl	8001a8c <HAL_GPIO_ReadPin>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d10e      	bne.n	8000ada <main+0x5e>
	  {
		  loop(++loop_counter);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	f7ff ff86 	bl	80009d4 <loop>
		  toggle_led(BLUE);
 8000ac8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000acc:	f7ff fdbe 	bl	800064c <toggle_led>
		  set_led(ORANGE);
 8000ad0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ad4:	f7ff fdca 	bl	800066c <set_led>
 8000ad8:	e007      	b.n	8000aea <main+0x6e>
	  }
	  else
	  {
		  reset_led(BLUE);
 8000ada:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000ade:	f7ff fdd7 	bl	8000690 <reset_led>
		  toggle_led(ORANGE);
 8000ae2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ae6:	f7ff fdb1 	bl	800064c <toggle_led>
	  }
    HAL_Delay(100);
 8000aea:	2064      	movs	r0, #100	; 0x64
 8000aec:	f000 fd40 	bl	8001570 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 8000af0:	e7dd      	b.n	8000aae <main+0x32>
 8000af2:	bf00      	nop
 8000af4:	40020000 	.word	0x40020000

08000af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b094      	sub	sp, #80	; 0x50
 8000afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 0320 	add.w	r3, r7, #32
 8000b02:	2230      	movs	r2, #48	; 0x30
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f003 faf4 	bl	80040f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	4b27      	ldr	r3, [pc, #156]	; (8000bc0 <SystemClock_Config+0xc8>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	4a26      	ldr	r2, [pc, #152]	; (8000bc0 <SystemClock_Config+0xc8>)
 8000b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2c:	4b24      	ldr	r3, [pc, #144]	; (8000bc0 <SystemClock_Config+0xc8>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b38:	2300      	movs	r3, #0
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <SystemClock_Config+0xcc>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a20      	ldr	r2, [pc, #128]	; (8000bc4 <SystemClock_Config+0xcc>)
 8000b42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <SystemClock_Config+0xcc>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b54:	2301      	movs	r3, #1
 8000b56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b68:	2304      	movs	r3, #4
 8000b6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b6c:	23c0      	movs	r3, #192	; 0xc0
 8000b6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b70:	2304      	movs	r3, #4
 8000b72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000b74:	2308      	movs	r3, #8
 8000b76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b78:	f107 0320 	add.w	r3, r7, #32
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f002 fc31 	bl	80033e4 <HAL_RCC_OscConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b88:	f000 fa00 	bl	8000f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b90:	2302      	movs	r3, #2
 8000b92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	2103      	movs	r1, #3
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f002 fe93 	bl	80038d4 <HAL_RCC_ClockConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bb4:	f000 f9ea 	bl	8000f8c <Error_Handler>
  }
}
 8000bb8:	bf00      	nop
 8000bba:	3750      	adds	r7, #80	; 0x50
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40007000 	.word	0x40007000

08000bc8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bce:	463b      	mov	r3, r7
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
 8000bdc:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000bde:	2301      	movs	r3, #1
 8000be0:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000be2:	23c8      	movs	r3, #200	; 0xc8
 8000be4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000be6:	2305      	movs	r3, #5
 8000be8:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bea:	2302      	movs	r3, #2
 8000bec:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bee:	463b      	mov	r3, r7
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f003 f87b 	bl	8003cec <HAL_RCCEx_PeriphCLKConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000bfc:	f000 f9c6 	bl	8000f8c <Error_Handler>
  }
}
 8000c00:	bf00      	nop
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c0e:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <MX_I2C1_Init+0x54>)
 8000c10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c14:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <MX_I2C1_Init+0x58>)
 8000c16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 50;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c20:	2232      	movs	r2, #50	; 0x32
 8000c22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_I2C1_Init+0x50>)
 8000c46:	f000 ff6d 	bl	8001b24 <HAL_I2C_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c50:	f000 f99c 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	2000008c 	.word	0x2000008c
 8000c5c:	40005400 	.word	0x40005400
 8000c60:	000186a0 	.word	0x000186a0

08000c64 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <MX_I2S2_Init+0x50>)
 8000c6a:	4a13      	ldr	r2, [pc, #76]	; (8000cb8 <MX_I2S2_Init+0x54>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_I2S2_Init+0x50>)
 8000c70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c74:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <MX_I2S2_Init+0x50>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <MX_I2S2_Init+0x50>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_I2S2_Init+0x50>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <MX_I2S2_Init+0x50>)
 8000c8a:	4a0c      	ldr	r2, [pc, #48]	; (8000cbc <MX_I2S2_Init+0x58>)
 8000c8c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_I2S2_Init+0x50>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <MX_I2S2_Init+0x50>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_I2S2_Init+0x50>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <MX_I2S2_Init+0x50>)
 8000ca2:	f001 feff 	bl	8002aa4 <HAL_I2S_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000cac:	f000 f96e 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200000e0 	.word	0x200000e0
 8000cb8:	40003800 	.word	0x40003800
 8000cbc:	00017700 	.word	0x00017700

08000cc0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000cc4:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <MX_I2S3_Init+0x54>)
 8000cc6:	4a14      	ldr	r2, [pc, #80]	; (8000d18 <MX_I2S3_Init+0x58>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000cca:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <MX_I2S3_Init+0x54>)
 8000ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cd0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <MX_I2S3_Init+0x54>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000cd8:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <MX_I2S3_Init+0x54>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <MX_I2S3_Init+0x54>)
 8000ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ce4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <MX_I2S3_Init+0x54>)
 8000ce8:	4a0c      	ldr	r2, [pc, #48]	; (8000d1c <MX_I2S3_Init+0x5c>)
 8000cea:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_I2S3_Init+0x54>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <MX_I2S3_Init+0x54>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <MX_I2S3_Init+0x54>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_I2S3_Init+0x54>)
 8000d00:	f001 fed0 	bl	8002aa4 <HAL_I2S_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000d0a:	f000 f93f 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000128 	.word	0x20000128
 8000d18:	40003c00 	.word	0x40003c00
 8000d1c:	00017700 	.word	0x00017700

08000d20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d26:	4a18      	ldr	r2, [pc, #96]	; (8000d88 <MX_SPI1_Init+0x68>)
 8000d28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d2a:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d58:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d6c:	220a      	movs	r2, #10
 8000d6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d70:	4804      	ldr	r0, [pc, #16]	; (8000d84 <MX_SPI1_Init+0x64>)
 8000d72:	f003 f90b 	bl	8003f8c <HAL_SPI_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d7c:	f000 f906 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000170 	.word	0x20000170
 8000d88:	40013000 	.word	0x40013000

08000d8c <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	; 0x30
 8000da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	61bb      	str	r3, [r7, #24]
 8000db6:	4b70      	ldr	r3, [pc, #448]	; (8000f78 <MX_GPIO_Init+0x1dc>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a6f      	ldr	r2, [pc, #444]	; (8000f78 <MX_GPIO_Init+0x1dc>)
 8000dbc:	f043 0310 	orr.w	r3, r3, #16
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b6d      	ldr	r3, [pc, #436]	; (8000f78 <MX_GPIO_Init+0x1dc>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0310 	and.w	r3, r3, #16
 8000dca:	61bb      	str	r3, [r7, #24]
 8000dcc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	4b69      	ldr	r3, [pc, #420]	; (8000f78 <MX_GPIO_Init+0x1dc>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a68      	ldr	r2, [pc, #416]	; (8000f78 <MX_GPIO_Init+0x1dc>)
 8000dd8:	f043 0304 	orr.w	r3, r3, #4
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b66      	ldr	r3, [pc, #408]	; (8000f78 <MX_GPIO_Init+0x1dc>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	4b62      	ldr	r3, [pc, #392]	; (8000f78 <MX_GPIO_Init+0x1dc>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a61      	ldr	r2, [pc, #388]	; (8000f78 <MX_GPIO_Init+0x1dc>)
 8000df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b5f      	ldr	r3, [pc, #380]	; (8000f78 <MX_GPIO_Init+0x1dc>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b5b      	ldr	r3, [pc, #364]	; (8000f78 <MX_GPIO_Init+0x1dc>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a5a      	ldr	r2, [pc, #360]	; (8000f78 <MX_GPIO_Init+0x1dc>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b58      	ldr	r3, [pc, #352]	; (8000f78 <MX_GPIO_Init+0x1dc>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	4b54      	ldr	r3, [pc, #336]	; (8000f78 <MX_GPIO_Init+0x1dc>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a53      	ldr	r2, [pc, #332]	; (8000f78 <MX_GPIO_Init+0x1dc>)
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b51      	ldr	r3, [pc, #324]	; (8000f78 <MX_GPIO_Init+0x1dc>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	4b4d      	ldr	r3, [pc, #308]	; (8000f78 <MX_GPIO_Init+0x1dc>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a4c      	ldr	r2, [pc, #304]	; (8000f78 <MX_GPIO_Init+0x1dc>)
 8000e48:	f043 0308 	orr.w	r3, r3, #8
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b4a      	ldr	r3, [pc, #296]	; (8000f78 <MX_GPIO_Init+0x1dc>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0308 	and.w	r3, r3, #8
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2108      	movs	r1, #8
 8000e5e:	4847      	ldr	r0, [pc, #284]	; (8000f7c <MX_GPIO_Init+0x1e0>)
 8000e60:	f000 fe2c 	bl	8001abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000e64:	2201      	movs	r2, #1
 8000e66:	2101      	movs	r1, #1
 8000e68:	4845      	ldr	r0, [pc, #276]	; (8000f80 <MX_GPIO_Init+0x1e4>)
 8000e6a:	f000 fe27 	bl	8001abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000e74:	4843      	ldr	r0, [pc, #268]	; (8000f84 <MX_GPIO_Init+0x1e8>)
 8000e76:	f000 fe21 	bl	8001abc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000e86:	f107 031c 	add.w	r3, r7, #28
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	483b      	ldr	r0, [pc, #236]	; (8000f7c <MX_GPIO_Init+0x1e0>)
 8000e8e:	f000 fc79 	bl	8001784 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e92:	2308      	movs	r3, #8
 8000e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e96:	2301      	movs	r3, #1
 8000e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4834      	ldr	r0, [pc, #208]	; (8000f7c <MX_GPIO_Init+0x1e0>)
 8000eaa:	f000 fc6b 	bl	8001784 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000eae:	2332      	movs	r3, #50	; 0x32
 8000eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000eb2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000eb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	482e      	ldr	r0, [pc, #184]	; (8000f7c <MX_GPIO_Init+0x1e0>)
 8000ec4:	f000 fc5e 	bl	8001784 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 031c 	add.w	r3, r7, #28
 8000edc:	4619      	mov	r1, r3
 8000ede:	4828      	ldr	r0, [pc, #160]	; (8000f80 <MX_GPIO_Init+0x1e4>)
 8000ee0:	f000 fc50 	bl	8001784 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4824      	ldr	r0, [pc, #144]	; (8000f88 <MX_GPIO_Init+0x1ec>)
 8000ef8:	f000 fc44 	bl	8001784 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000efc:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000f00:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f0e:	f107 031c 	add.w	r3, r7, #28
 8000f12:	4619      	mov	r1, r3
 8000f14:	481b      	ldr	r0, [pc, #108]	; (8000f84 <MX_GPIO_Init+0x1e8>)
 8000f16:	f000 fc35 	bl	8001784 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f20:	2300      	movs	r3, #0
 8000f22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4816      	ldr	r0, [pc, #88]	; (8000f88 <MX_GPIO_Init+0x1ec>)
 8000f30:	f000 fc28 	bl	8001784 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000f34:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f46:	230a      	movs	r3, #10
 8000f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480d      	ldr	r0, [pc, #52]	; (8000f88 <MX_GPIO_Init+0x1ec>)
 8000f52:	f000 fc17 	bl	8001784 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000f56:	2320      	movs	r3, #32
 8000f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	4619      	mov	r1, r3
 8000f68:	4806      	ldr	r0, [pc, #24]	; (8000f84 <MX_GPIO_Init+0x1e8>)
 8000f6a:	f000 fc0b 	bl	8001784 <HAL_GPIO_Init>

}
 8000f6e:	bf00      	nop
 8000f70:	3730      	adds	r7, #48	; 0x30
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40020800 	.word	0x40020800
 8000f84:	40020c00 	.word	0x40020c00
 8000f88:	40020000 	.word	0x40020000

08000f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f90:	b672      	cpsid	i
}
 8000f92:	bf00      	nop

  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  toggle_led(RED);
 8000f94:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f98:	f7ff fb58 	bl	800064c <toggle_led>
	  HAL_Delay(50);
 8000f9c:	2032      	movs	r0, #50	; 0x32
 8000f9e:	f000 fae7 	bl	8001570 <HAL_Delay>
	  toggle_led(RED);
 8000fa2:	e7f7      	b.n	8000f94 <Error_Handler+0x8>

08000fa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <HAL_MspInit+0x4c>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	4a0f      	ldr	r2, [pc, #60]	; (8000ff0 <HAL_MspInit+0x4c>)
 8000fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fba:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <HAL_MspInit+0x4c>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	603b      	str	r3, [r7, #0]
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <HAL_MspInit+0x4c>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	4a08      	ldr	r2, [pc, #32]	; (8000ff0 <HAL_MspInit+0x4c>)
 8000fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_MspInit+0x4c>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fe2:	2007      	movs	r0, #7
 8000fe4:	f000 fb9a 	bl	800171c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40023800 	.word	0x40023800

08000ff4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a19      	ldr	r2, [pc, #100]	; (8001078 <HAL_I2C_MspInit+0x84>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d12c      	bne.n	8001070 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <HAL_I2C_MspInit+0x88>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a17      	ldr	r2, [pc, #92]	; (800107c <HAL_I2C_MspInit+0x88>)
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <HAL_I2C_MspInit+0x88>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001032:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001038:	2312      	movs	r3, #18
 800103a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001044:	2304      	movs	r3, #4
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4619      	mov	r1, r3
 800104e:	480c      	ldr	r0, [pc, #48]	; (8001080 <HAL_I2C_MspInit+0x8c>)
 8001050:	f000 fb98 	bl	8001784 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <HAL_I2C_MspInit+0x88>)
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	4a07      	ldr	r2, [pc, #28]	; (800107c <HAL_I2C_MspInit+0x88>)
 800105e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001062:	6413      	str	r3, [r2, #64]	; 0x40
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <HAL_I2C_MspInit+0x88>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001070:	bf00      	nop
 8001072:	3728      	adds	r7, #40	; 0x28
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40005400 	.word	0x40005400
 800107c:	40023800 	.word	0x40023800
 8001080:	40020400 	.word	0x40020400

08001084 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08e      	sub	sp, #56	; 0x38
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a59      	ldr	r2, [pc, #356]	; (8001208 <HAL_I2S_MspInit+0x184>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d15b      	bne.n	800115e <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]
 80010aa:	4b58      	ldr	r3, [pc, #352]	; (800120c <HAL_I2S_MspInit+0x188>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	4a57      	ldr	r2, [pc, #348]	; (800120c <HAL_I2S_MspInit+0x188>)
 80010b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b4:	6413      	str	r3, [r2, #64]	; 0x40
 80010b6:	4b55      	ldr	r3, [pc, #340]	; (800120c <HAL_I2S_MspInit+0x188>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010be:	623b      	str	r3, [r7, #32]
 80010c0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
 80010c6:	4b51      	ldr	r3, [pc, #324]	; (800120c <HAL_I2S_MspInit+0x188>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a50      	ldr	r2, [pc, #320]	; (800120c <HAL_I2S_MspInit+0x188>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b4e      	ldr	r3, [pc, #312]	; (800120c <HAL_I2S_MspInit+0x188>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	61fb      	str	r3, [r7, #28]
 80010dc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
 80010e2:	4b4a      	ldr	r3, [pc, #296]	; (800120c <HAL_I2S_MspInit+0x188>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a49      	ldr	r2, [pc, #292]	; (800120c <HAL_I2S_MspInit+0x188>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b47      	ldr	r3, [pc, #284]	; (800120c <HAL_I2S_MspInit+0x188>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010fa:	2304      	movs	r3, #4
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800110a:	2306      	movs	r3, #6
 800110c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001112:	4619      	mov	r1, r3
 8001114:	483e      	ldr	r0, [pc, #248]	; (8001210 <HAL_I2S_MspInit+0x18c>)
 8001116:	f000 fb35 	bl	8001784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800111a:	2308      	movs	r3, #8
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800112a:	2305      	movs	r3, #5
 800112c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001132:	4619      	mov	r1, r3
 8001134:	4836      	ldr	r0, [pc, #216]	; (8001210 <HAL_I2S_MspInit+0x18c>)
 8001136:	f000 fb25 	bl	8001784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800113a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800114c:	2305      	movs	r3, #5
 800114e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001154:	4619      	mov	r1, r3
 8001156:	482f      	ldr	r0, [pc, #188]	; (8001214 <HAL_I2S_MspInit+0x190>)
 8001158:	f000 fb14 	bl	8001784 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800115c:	e04f      	b.n	80011fe <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a2d      	ldr	r2, [pc, #180]	; (8001218 <HAL_I2S_MspInit+0x194>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d14a      	bne.n	80011fe <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	4b27      	ldr	r3, [pc, #156]	; (800120c <HAL_I2S_MspInit+0x188>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	4a26      	ldr	r2, [pc, #152]	; (800120c <HAL_I2S_MspInit+0x188>)
 8001172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001176:	6413      	str	r3, [r2, #64]	; 0x40
 8001178:	4b24      	ldr	r3, [pc, #144]	; (800120c <HAL_I2S_MspInit+0x188>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	4b20      	ldr	r3, [pc, #128]	; (800120c <HAL_I2S_MspInit+0x188>)
 800118a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118c:	4a1f      	ldr	r2, [pc, #124]	; (800120c <HAL_I2S_MspInit+0x188>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6313      	str	r3, [r2, #48]	; 0x30
 8001194:	4b1d      	ldr	r3, [pc, #116]	; (800120c <HAL_I2S_MspInit+0x188>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <HAL_I2S_MspInit+0x188>)
 80011a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a8:	4a18      	ldr	r2, [pc, #96]	; (800120c <HAL_I2S_MspInit+0x188>)
 80011aa:	f043 0304 	orr.w	r3, r3, #4
 80011ae:	6313      	str	r3, [r2, #48]	; 0x30
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <HAL_I2S_MspInit+0x188>)
 80011b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80011bc:	2310      	movs	r3, #16
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011cc:	2306      	movs	r3, #6
 80011ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80011d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d4:	4619      	mov	r1, r3
 80011d6:	4811      	ldr	r0, [pc, #68]	; (800121c <HAL_I2S_MspInit+0x198>)
 80011d8:	f000 fad4 	bl	8001784 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80011dc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e2:	2302      	movs	r3, #2
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011ee:	2306      	movs	r3, #6
 80011f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	; (8001210 <HAL_I2S_MspInit+0x18c>)
 80011fa:	f000 fac3 	bl	8001784 <HAL_GPIO_Init>
}
 80011fe:	bf00      	nop
 8001200:	3738      	adds	r7, #56	; 0x38
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40003800 	.word	0x40003800
 800120c:	40023800 	.word	0x40023800
 8001210:	40020800 	.word	0x40020800
 8001214:	40020400 	.word	0x40020400
 8001218:	40003c00 	.word	0x40003c00
 800121c:	40020000 	.word	0x40020000

08001220 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a19      	ldr	r2, [pc, #100]	; (80012a4 <HAL_SPI_MspInit+0x84>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d12b      	bne.n	800129a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <HAL_SPI_MspInit+0x88>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	4a17      	ldr	r2, [pc, #92]	; (80012a8 <HAL_SPI_MspInit+0x88>)
 800124c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001250:	6453      	str	r3, [r2, #68]	; 0x44
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_SPI_MspInit+0x88>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <HAL_SPI_MspInit+0x88>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a10      	ldr	r2, [pc, #64]	; (80012a8 <HAL_SPI_MspInit+0x88>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <HAL_SPI_MspInit+0x88>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800127a:	23e0      	movs	r3, #224	; 0xe0
 800127c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001286:	2303      	movs	r3, #3
 8001288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800128a:	2305      	movs	r3, #5
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <HAL_SPI_MspInit+0x8c>)
 8001296:	f000 fa75 	bl	8001784 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800129a:	bf00      	nop
 800129c:	3728      	adds	r7, #40	; 0x28
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40013000 	.word	0x40013000
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020000 	.word	0x40020000

080012b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <NMI_Handler+0x4>

080012b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <HardFault_Handler+0x4>

080012bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <MemManage_Handler+0x4>

080012c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c6:	e7fe      	b.n	80012c6 <BusFault_Handler+0x4>

080012c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <UsageFault_Handler+0x4>

080012ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012fc:	f000 f918 	bl	8001530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}

08001304 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	e00a      	b.n	800132c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001316:	f3af 8000 	nop.w
 800131a:	4601      	mov	r1, r0
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	60ba      	str	r2, [r7, #8]
 8001322:	b2ca      	uxtb	r2, r1
 8001324:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	3301      	adds	r3, #1
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	429a      	cmp	r2, r3
 8001332:	dbf0      	blt.n	8001316 <_read+0x12>
	}

return len;
 8001334:	687b      	ldr	r3, [r7, #4]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <_close>:
	}
	return len;
}

int _close(int file)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
	return -1;
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001366:	605a      	str	r2, [r3, #4]
	return 0;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <_isatty>:

int _isatty(int file)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
	return 1;
 800137e:	2301      	movs	r3, #1
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
	return 0;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b0:	4a14      	ldr	r2, [pc, #80]	; (8001404 <_sbrk+0x5c>)
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <_sbrk+0x60>)
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013bc:	4b13      	ldr	r3, [pc, #76]	; (800140c <_sbrk+0x64>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d102      	bne.n	80013ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <_sbrk+0x64>)
 80013c6:	4a12      	ldr	r2, [pc, #72]	; (8001410 <_sbrk+0x68>)
 80013c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d207      	bcs.n	80013e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d8:	f002 fe62 	bl	80040a0 <__errno>
 80013dc:	4603      	mov	r3, r0
 80013de:	220c      	movs	r2, #12
 80013e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
 80013e6:	e009      	b.n	80013fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <_sbrk+0x64>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ee:	4b07      	ldr	r3, [pc, #28]	; (800140c <_sbrk+0x64>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	4a05      	ldr	r2, [pc, #20]	; (800140c <_sbrk+0x64>)
 80013f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013fa:	68fb      	ldr	r3, [r7, #12]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20020000 	.word	0x20020000
 8001408:	00000400 	.word	0x00000400
 800140c:	200001c8 	.word	0x200001c8
 8001410:	200001e0 	.word	0x200001e0

08001414 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <SystemInit+0x20>)
 800141a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800141e:	4a05      	ldr	r2, [pc, #20]	; (8001434 <SystemInit+0x20>)
 8001420:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001424:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001438:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001470 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800143c:	480d      	ldr	r0, [pc, #52]	; (8001474 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800143e:	490e      	ldr	r1, [pc, #56]	; (8001478 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001440:	4a0e      	ldr	r2, [pc, #56]	; (800147c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001444:	e002      	b.n	800144c <LoopCopyDataInit>

08001446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144a:	3304      	adds	r3, #4

0800144c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800144c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001450:	d3f9      	bcc.n	8001446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001452:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001454:	4c0b      	ldr	r4, [pc, #44]	; (8001484 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001458:	e001      	b.n	800145e <LoopFillZerobss>

0800145a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800145c:	3204      	adds	r2, #4

0800145e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001460:	d3fb      	bcc.n	800145a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001462:	f7ff ffd7 	bl	8001414 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001466:	f002 fe21 	bl	80040ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800146a:	f7ff fb07 	bl	8000a7c <main>
  bx  lr    
 800146e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001470:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001478:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800147c:	080053e4 	.word	0x080053e4
  ldr r2, =_sbss
 8001480:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001484:	200001e0 	.word	0x200001e0

08001488 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001488:	e7fe      	b.n	8001488 <ADC_IRQHandler>
	...

0800148c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <HAL_Init+0x40>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a0d      	ldr	r2, [pc, #52]	; (80014cc <HAL_Init+0x40>)
 8001496:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800149a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <HAL_Init+0x40>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <HAL_Init+0x40>)
 80014a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <HAL_Init+0x40>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a07      	ldr	r2, [pc, #28]	; (80014cc <HAL_Init+0x40>)
 80014ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b4:	2003      	movs	r0, #3
 80014b6:	f000 f931 	bl	800171c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ba:	2000      	movs	r0, #0
 80014bc:	f000 f808 	bl	80014d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c0:	f7ff fd70 	bl	8000fa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40023c00 	.word	0x40023c00

080014d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_InitTick+0x54>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_InitTick+0x58>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f93b 	bl	800176a <HAL_SYSTICK_Config>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00e      	b.n	800151c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b0f      	cmp	r3, #15
 8001502:	d80a      	bhi.n	800151a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001504:	2200      	movs	r2, #0
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f000 f911 	bl	8001732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001510:	4a06      	ldr	r2, [pc, #24]	; (800152c <HAL_InitTick+0x5c>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	e000      	b.n	800151c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000000 	.word	0x20000000
 8001528:	20000008 	.word	0x20000008
 800152c:	20000004 	.word	0x20000004

08001530 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_IncTick+0x20>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_IncTick+0x24>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4413      	add	r3, r2
 8001540:	4a04      	ldr	r2, [pc, #16]	; (8001554 <HAL_IncTick+0x24>)
 8001542:	6013      	str	r3, [r2, #0]
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20000008 	.word	0x20000008
 8001554:	200001cc 	.word	0x200001cc

08001558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return uwTick;
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <HAL_GetTick+0x14>)
 800155e:	681b      	ldr	r3, [r3, #0]
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	200001cc 	.word	0x200001cc

08001570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001578:	f7ff ffee 	bl	8001558 <HAL_GetTick>
 800157c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001588:	d005      	beq.n	8001596 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <HAL_Delay+0x44>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4413      	add	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001596:	bf00      	nop
 8001598:	f7ff ffde 	bl	8001558 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d8f7      	bhi.n	8001598 <HAL_Delay+0x28>
  {
  }
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000008 	.word	0x20000008

080015b8 <__NVIC_SetPriorityGrouping>:
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <__NVIC_SetPriorityGrouping+0x44>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d4:	4013      	ands	r3, r2
 80015d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ea:	4a04      	ldr	r2, [pc, #16]	; (80015fc <__NVIC_SetPriorityGrouping+0x44>)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	60d3      	str	r3, [r2, #12]
}
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <__NVIC_GetPriorityGrouping>:
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <__NVIC_GetPriorityGrouping+0x18>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	0a1b      	lsrs	r3, r3, #8
 800160a:	f003 0307 	and.w	r3, r3, #7
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <__NVIC_SetPriority>:
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	6039      	str	r1, [r7, #0]
 8001626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162c:	2b00      	cmp	r3, #0
 800162e:	db0a      	blt.n	8001646 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	490c      	ldr	r1, [pc, #48]	; (8001668 <__NVIC_SetPriority+0x4c>)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	0112      	lsls	r2, r2, #4
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	440b      	add	r3, r1
 8001640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001644:	e00a      	b.n	800165c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4908      	ldr	r1, [pc, #32]	; (800166c <__NVIC_SetPriority+0x50>)
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	3b04      	subs	r3, #4
 8001654:	0112      	lsls	r2, r2, #4
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	440b      	add	r3, r1
 800165a:	761a      	strb	r2, [r3, #24]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000e100 	.word	0xe000e100
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <NVIC_EncodePriority>:
{
 8001670:	b480      	push	{r7}
 8001672:	b089      	sub	sp, #36	; 0x24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f1c3 0307 	rsb	r3, r3, #7
 800168a:	2b04      	cmp	r3, #4
 800168c:	bf28      	it	cs
 800168e:	2304      	movcs	r3, #4
 8001690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3304      	adds	r3, #4
 8001696:	2b06      	cmp	r3, #6
 8001698:	d902      	bls.n	80016a0 <NVIC_EncodePriority+0x30>
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3b03      	subs	r3, #3
 800169e:	e000      	b.n	80016a2 <NVIC_EncodePriority+0x32>
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	f04f 32ff 	mov.w	r2, #4294967295
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43da      	mvns	r2, r3
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	401a      	ands	r2, r3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b8:	f04f 31ff 	mov.w	r1, #4294967295
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa01 f303 	lsl.w	r3, r1, r3
 80016c2:	43d9      	mvns	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	4313      	orrs	r3, r2
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3724      	adds	r7, #36	; 0x24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <SysTick_Config>:
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e8:	d301      	bcc.n	80016ee <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00f      	b.n	800170e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ee:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <SysTick_Config+0x40>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f6:	210f      	movs	r1, #15
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f7ff ff8e 	bl	800161c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <SysTick_Config+0x40>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001706:	4b04      	ldr	r3, [pc, #16]	; (8001718 <SysTick_Config+0x40>)
 8001708:	2207      	movs	r2, #7
 800170a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	e000e010 	.word	0xe000e010

0800171c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ff47 	bl	80015b8 <__NVIC_SetPriorityGrouping>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001744:	f7ff ff5c 	bl	8001600 <__NVIC_GetPriorityGrouping>
 8001748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	6978      	ldr	r0, [r7, #20]
 8001750:	f7ff ff8e 	bl	8001670 <NVIC_EncodePriority>
 8001754:	4602      	mov	r2, r0
 8001756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff5d 	bl	800161c <__NVIC_SetPriority>
}
 8001762:	bf00      	nop
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ffb0 	bl	80016d8 <SysTick_Config>
 8001778:	4603      	mov	r3, r0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001784:	b480      	push	{r7}
 8001786:	b089      	sub	sp, #36	; 0x24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
 800179e:	e159      	b.n	8001a54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017a0:	2201      	movs	r2, #1
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	f040 8148 	bne.w	8001a4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d005      	beq.n	80017d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d130      	bne.n	8001838 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	2203      	movs	r2, #3
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800180c:	2201      	movs	r2, #1
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	091b      	lsrs	r3, r3, #4
 8001822:	f003 0201 	and.w	r2, r3, #1
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	2b03      	cmp	r3, #3
 8001842:	d017      	beq.n	8001874 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	2203      	movs	r2, #3
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d123      	bne.n	80018c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	08da      	lsrs	r2, r3, #3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3208      	adds	r2, #8
 8001888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800188c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	220f      	movs	r2, #15
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	691a      	ldr	r2, [r3, #16]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	08da      	lsrs	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3208      	adds	r2, #8
 80018c2:	69b9      	ldr	r1, [r7, #24]
 80018c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	2203      	movs	r2, #3
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 0203 	and.w	r2, r3, #3
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 80a2 	beq.w	8001a4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	4b57      	ldr	r3, [pc, #348]	; (8001a6c <HAL_GPIO_Init+0x2e8>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	4a56      	ldr	r2, [pc, #344]	; (8001a6c <HAL_GPIO_Init+0x2e8>)
 8001914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001918:	6453      	str	r3, [r2, #68]	; 0x44
 800191a:	4b54      	ldr	r3, [pc, #336]	; (8001a6c <HAL_GPIO_Init+0x2e8>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001926:	4a52      	ldr	r2, [pc, #328]	; (8001a70 <HAL_GPIO_Init+0x2ec>)
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	089b      	lsrs	r3, r3, #2
 800192c:	3302      	adds	r3, #2
 800192e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	220f      	movs	r2, #15
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a49      	ldr	r2, [pc, #292]	; (8001a74 <HAL_GPIO_Init+0x2f0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d019      	beq.n	8001986 <HAL_GPIO_Init+0x202>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a48      	ldr	r2, [pc, #288]	; (8001a78 <HAL_GPIO_Init+0x2f4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d013      	beq.n	8001982 <HAL_GPIO_Init+0x1fe>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a47      	ldr	r2, [pc, #284]	; (8001a7c <HAL_GPIO_Init+0x2f8>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d00d      	beq.n	800197e <HAL_GPIO_Init+0x1fa>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a46      	ldr	r2, [pc, #280]	; (8001a80 <HAL_GPIO_Init+0x2fc>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d007      	beq.n	800197a <HAL_GPIO_Init+0x1f6>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a45      	ldr	r2, [pc, #276]	; (8001a84 <HAL_GPIO_Init+0x300>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d101      	bne.n	8001976 <HAL_GPIO_Init+0x1f2>
 8001972:	2304      	movs	r3, #4
 8001974:	e008      	b.n	8001988 <HAL_GPIO_Init+0x204>
 8001976:	2307      	movs	r3, #7
 8001978:	e006      	b.n	8001988 <HAL_GPIO_Init+0x204>
 800197a:	2303      	movs	r3, #3
 800197c:	e004      	b.n	8001988 <HAL_GPIO_Init+0x204>
 800197e:	2302      	movs	r3, #2
 8001980:	e002      	b.n	8001988 <HAL_GPIO_Init+0x204>
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_GPIO_Init+0x204>
 8001986:	2300      	movs	r3, #0
 8001988:	69fa      	ldr	r2, [r7, #28]
 800198a:	f002 0203 	and.w	r2, r2, #3
 800198e:	0092      	lsls	r2, r2, #2
 8001990:	4093      	lsls	r3, r2
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001998:	4935      	ldr	r1, [pc, #212]	; (8001a70 <HAL_GPIO_Init+0x2ec>)
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	089b      	lsrs	r3, r3, #2
 800199e:	3302      	adds	r3, #2
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019a6:	4b38      	ldr	r3, [pc, #224]	; (8001a88 <HAL_GPIO_Init+0x304>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ca:	4a2f      	ldr	r2, [pc, #188]	; (8001a88 <HAL_GPIO_Init+0x304>)
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019d0:	4b2d      	ldr	r3, [pc, #180]	; (8001a88 <HAL_GPIO_Init+0x304>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019f4:	4a24      	ldr	r2, [pc, #144]	; (8001a88 <HAL_GPIO_Init+0x304>)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019fa:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <HAL_GPIO_Init+0x304>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a1e:	4a1a      	ldr	r2, [pc, #104]	; (8001a88 <HAL_GPIO_Init+0x304>)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a24:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <HAL_GPIO_Init+0x304>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a48:	4a0f      	ldr	r2, [pc, #60]	; (8001a88 <HAL_GPIO_Init+0x304>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3301      	adds	r3, #1
 8001a52:	61fb      	str	r3, [r7, #28]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	2b0f      	cmp	r3, #15
 8001a58:	f67f aea2 	bls.w	80017a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
 8001a60:	3724      	adds	r7, #36	; 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40013800 	.word	0x40013800
 8001a74:	40020000 	.word	0x40020000
 8001a78:	40020400 	.word	0x40020400
 8001a7c:	40020800 	.word	0x40020800
 8001a80:	40020c00 	.word	0x40020c00
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40013c00 	.word	0x40013c00

08001a8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	691a      	ldr	r2, [r3, #16]
 8001a9c:	887b      	ldrh	r3, [r7, #2]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d002      	beq.n	8001aaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	73fb      	strb	r3, [r7, #15]
 8001aa8:	e001      	b.n	8001aae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	460b      	mov	r3, r1
 8001ac6:	807b      	strh	r3, [r7, #2]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001acc:	787b      	ldrb	r3, [r7, #1]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ad2:	887a      	ldrh	r2, [r7, #2]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ad8:	e003      	b.n	8001ae2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ada:	887b      	ldrh	r3, [r7, #2]
 8001adc:	041a      	lsls	r2, r3, #16
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	619a      	str	r2, [r3, #24]
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b085      	sub	sp, #20
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	460b      	mov	r3, r1
 8001af8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b00:	887a      	ldrh	r2, [r7, #2]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4013      	ands	r3, r2
 8001b06:	041a      	lsls	r2, r3, #16
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	43d9      	mvns	r1, r3
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	400b      	ands	r3, r1
 8001b10:	431a      	orrs	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	619a      	str	r2, [r3, #24]
}
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
	...

08001b24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e12b      	b.n	8001d8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d106      	bne.n	8001b50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff fa52 	bl	8000ff4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2224      	movs	r2, #36	; 0x24
 8001b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0201 	bic.w	r2, r2, #1
 8001b66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b88:	f002 f89c 	bl	8003cc4 <HAL_RCC_GetPCLK1Freq>
 8001b8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	4a81      	ldr	r2, [pc, #516]	; (8001d98 <HAL_I2C_Init+0x274>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d807      	bhi.n	8001ba8 <HAL_I2C_Init+0x84>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4a80      	ldr	r2, [pc, #512]	; (8001d9c <HAL_I2C_Init+0x278>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	bf94      	ite	ls
 8001ba0:	2301      	movls	r3, #1
 8001ba2:	2300      	movhi	r3, #0
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	e006      	b.n	8001bb6 <HAL_I2C_Init+0x92>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4a7d      	ldr	r2, [pc, #500]	; (8001da0 <HAL_I2C_Init+0x27c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	bf94      	ite	ls
 8001bb0:	2301      	movls	r3, #1
 8001bb2:	2300      	movhi	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e0e7      	b.n	8001d8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4a78      	ldr	r2, [pc, #480]	; (8001da4 <HAL_I2C_Init+0x280>)
 8001bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc6:	0c9b      	lsrs	r3, r3, #18
 8001bc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	4a6a      	ldr	r2, [pc, #424]	; (8001d98 <HAL_I2C_Init+0x274>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d802      	bhi.n	8001bf8 <HAL_I2C_Init+0xd4>
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	e009      	b.n	8001c0c <HAL_I2C_Init+0xe8>
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001bfe:	fb02 f303 	mul.w	r3, r2, r3
 8001c02:	4a69      	ldr	r2, [pc, #420]	; (8001da8 <HAL_I2C_Init+0x284>)
 8001c04:	fba2 2303 	umull	r2, r3, r2, r3
 8001c08:	099b      	lsrs	r3, r3, #6
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6812      	ldr	r2, [r2, #0]
 8001c10:	430b      	orrs	r3, r1
 8001c12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	495c      	ldr	r1, [pc, #368]	; (8001d98 <HAL_I2C_Init+0x274>)
 8001c28:	428b      	cmp	r3, r1
 8001c2a:	d819      	bhi.n	8001c60 <HAL_I2C_Init+0x13c>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	1e59      	subs	r1, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c3a:	1c59      	adds	r1, r3, #1
 8001c3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001c40:	400b      	ands	r3, r1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00a      	beq.n	8001c5c <HAL_I2C_Init+0x138>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	1e59      	subs	r1, r3, #1
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c54:	3301      	adds	r3, #1
 8001c56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c5a:	e051      	b.n	8001d00 <HAL_I2C_Init+0x1dc>
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	e04f      	b.n	8001d00 <HAL_I2C_Init+0x1dc>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d111      	bne.n	8001c8c <HAL_I2C_Init+0x168>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	1e58      	subs	r0, r3, #1
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6859      	ldr	r1, [r3, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	440b      	add	r3, r1
 8001c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	bf0c      	ite	eq
 8001c84:	2301      	moveq	r3, #1
 8001c86:	2300      	movne	r3, #0
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	e012      	b.n	8001cb2 <HAL_I2C_Init+0x18e>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	1e58      	subs	r0, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6859      	ldr	r1, [r3, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	0099      	lsls	r1, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	bf0c      	ite	eq
 8001cac:	2301      	moveq	r3, #1
 8001cae:	2300      	movne	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <HAL_I2C_Init+0x196>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e022      	b.n	8001d00 <HAL_I2C_Init+0x1dc>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10e      	bne.n	8001ce0 <HAL_I2C_Init+0x1bc>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1e58      	subs	r0, r3, #1
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6859      	ldr	r1, [r3, #4]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	440b      	add	r3, r1
 8001cd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cde:	e00f      	b.n	8001d00 <HAL_I2C_Init+0x1dc>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	1e58      	subs	r0, r3, #1
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6859      	ldr	r1, [r3, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	440b      	add	r3, r1
 8001cee:	0099      	lsls	r1, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	6809      	ldr	r1, [r1, #0]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69da      	ldr	r2, [r3, #28]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6911      	ldr	r1, [r2, #16]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	68d2      	ldr	r2, [r2, #12]
 8001d3a:	4311      	orrs	r1, r2
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	430b      	orrs	r3, r1
 8001d42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695a      	ldr	r2, [r3, #20]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0201 	orr.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2220      	movs	r2, #32
 8001d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	000186a0 	.word	0x000186a0
 8001d9c:	001e847f 	.word	0x001e847f
 8001da0:	003d08ff 	.word	0x003d08ff
 8001da4:	431bde83 	.word	0x431bde83
 8001da8:	10624dd3 	.word	0x10624dd3

08001dac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af02      	add	r7, sp, #8
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	4608      	mov	r0, r1
 8001db6:	4611      	mov	r1, r2
 8001db8:	461a      	mov	r2, r3
 8001dba:	4603      	mov	r3, r0
 8001dbc:	817b      	strh	r3, [r7, #10]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	813b      	strh	r3, [r7, #8]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dc6:	f7ff fbc7 	bl	8001558 <HAL_GetTick>
 8001dca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	f040 80d9 	bne.w	8001f8c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2319      	movs	r3, #25
 8001de0:	2201      	movs	r2, #1
 8001de2:	496d      	ldr	r1, [pc, #436]	; (8001f98 <HAL_I2C_Mem_Write+0x1ec>)
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f000 fc7f 	bl	80026e8 <I2C_WaitOnFlagUntilTimeout>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001df0:	2302      	movs	r3, #2
 8001df2:	e0cc      	b.n	8001f8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_I2C_Mem_Write+0x56>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e0c5      	b.n	8001f8e <HAL_I2C_Mem_Write+0x1e2>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d007      	beq.n	8001e28 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0201 	orr.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2221      	movs	r2, #33	; 0x21
 8001e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2240      	movs	r2, #64	; 0x40
 8001e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6a3a      	ldr	r2, [r7, #32]
 8001e52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	4a4d      	ldr	r2, [pc, #308]	; (8001f9c <HAL_I2C_Mem_Write+0x1f0>)
 8001e68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e6a:	88f8      	ldrh	r0, [r7, #6]
 8001e6c:	893a      	ldrh	r2, [r7, #8]
 8001e6e:	8979      	ldrh	r1, [r7, #10]
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	9301      	str	r3, [sp, #4]
 8001e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	4603      	mov	r3, r0
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f000 fab6 	bl	80023ec <I2C_RequestMemoryWrite>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d052      	beq.n	8001f2c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e081      	b.n	8001f8e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f000 fd00 	bl	8002894 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00d      	beq.n	8001eb6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d107      	bne.n	8001eb2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e06b      	b.n	8001f8e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	781a      	ldrb	r2, [r3, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d11b      	bne.n	8001f2c <HAL_I2C_Mem_Write+0x180>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d017      	beq.n	8001f2c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	781a      	ldrb	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	1c5a      	adds	r2, r3, #1
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f16:	3b01      	subs	r3, #1
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	3b01      	subs	r3, #1
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1aa      	bne.n	8001e8a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 fcec 	bl	8002916 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00d      	beq.n	8001f60 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d107      	bne.n	8001f5c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f5a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e016      	b.n	8001f8e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	e000      	b.n	8001f8e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001f8c:	2302      	movs	r3, #2
  }
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	00100002 	.word	0x00100002
 8001f9c:	ffff0000 	.word	0xffff0000

08001fa0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08c      	sub	sp, #48	; 0x30
 8001fa4:	af02      	add	r7, sp, #8
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	4608      	mov	r0, r1
 8001faa:	4611      	mov	r1, r2
 8001fac:	461a      	mov	r2, r3
 8001fae:	4603      	mov	r3, r0
 8001fb0:	817b      	strh	r3, [r7, #10]
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	813b      	strh	r3, [r7, #8]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fba:	f7ff facd 	bl	8001558 <HAL_GetTick>
 8001fbe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b20      	cmp	r3, #32
 8001fca:	f040 8208 	bne.w	80023de <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	2319      	movs	r3, #25
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	497b      	ldr	r1, [pc, #492]	; (80021c4 <HAL_I2C_Mem_Read+0x224>)
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 fb85 	bl	80026e8 <I2C_WaitOnFlagUntilTimeout>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e1fb      	b.n	80023e0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d101      	bne.n	8001ff6 <HAL_I2C_Mem_Read+0x56>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e1f4      	b.n	80023e0 <HAL_I2C_Mem_Read+0x440>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b01      	cmp	r3, #1
 800200a:	d007      	beq.n	800201c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800202a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2222      	movs	r2, #34	; 0x22
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2240      	movs	r2, #64	; 0x40
 8002038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002046:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800204c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002052:	b29a      	uxth	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4a5b      	ldr	r2, [pc, #364]	; (80021c8 <HAL_I2C_Mem_Read+0x228>)
 800205c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800205e:	88f8      	ldrh	r0, [r7, #6]
 8002060:	893a      	ldrh	r2, [r7, #8]
 8002062:	8979      	ldrh	r1, [r7, #10]
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	9301      	str	r3, [sp, #4]
 8002068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	4603      	mov	r3, r0
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 fa52 	bl	8002518 <I2C_RequestMemoryRead>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e1b0      	b.n	80023e0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002082:	2b00      	cmp	r3, #0
 8002084:	d113      	bne.n	80020ae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002086:	2300      	movs	r3, #0
 8002088:	623b      	str	r3, [r7, #32]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	623b      	str	r3, [r7, #32]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	623b      	str	r3, [r7, #32]
 800209a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	e184      	b.n	80023b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d11b      	bne.n	80020ee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	695b      	ldr	r3, [r3, #20]
 80020d0:	61fb      	str	r3, [r7, #28]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	61fb      	str	r3, [r7, #28]
 80020da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	e164      	b.n	80023b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d11b      	bne.n	800212e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002104:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002114:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002116:	2300      	movs	r3, #0
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	61bb      	str	r3, [r7, #24]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	e144      	b.n	80023b8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002144:	e138      	b.n	80023b8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214a:	2b03      	cmp	r3, #3
 800214c:	f200 80f1 	bhi.w	8002332 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002154:	2b01      	cmp	r3, #1
 8002156:	d123      	bne.n	80021a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800215a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 fc1b 	bl	8002998 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e139      	b.n	80023e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691a      	ldr	r2, [r3, #16]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002188:	3b01      	subs	r3, #1
 800218a:	b29a      	uxth	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002194:	b29b      	uxth	r3, r3
 8002196:	3b01      	subs	r3, #1
 8002198:	b29a      	uxth	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800219e:	e10b      	b.n	80023b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d14e      	bne.n	8002246 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ae:	2200      	movs	r2, #0
 80021b0:	4906      	ldr	r1, [pc, #24]	; (80021cc <HAL_I2C_Mem_Read+0x22c>)
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 fa98 	bl	80026e8 <I2C_WaitOnFlagUntilTimeout>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d008      	beq.n	80021d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e10e      	b.n	80023e0 <HAL_I2C_Mem_Read+0x440>
 80021c2:	bf00      	nop
 80021c4:	00100002 	.word	0x00100002
 80021c8:	ffff0000 	.word	0xffff0000
 80021cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691a      	ldr	r2, [r3, #16]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b29a      	uxth	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002208:	b29b      	uxth	r3, r3
 800220a:	3b01      	subs	r3, #1
 800220c:	b29a      	uxth	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	1c5a      	adds	r2, r3, #1
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222e:	3b01      	subs	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223a:	b29b      	uxth	r3, r3
 800223c:	3b01      	subs	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002244:	e0b8      	b.n	80023b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224c:	2200      	movs	r2, #0
 800224e:	4966      	ldr	r1, [pc, #408]	; (80023e8 <HAL_I2C_Mem_Read+0x448>)
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 fa49 	bl	80026e8 <I2C_WaitOnFlagUntilTimeout>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e0bf      	b.n	80023e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800226e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691a      	ldr	r2, [r3, #16]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002298:	b29b      	uxth	r3, r3
 800229a:	3b01      	subs	r3, #1
 800229c:	b29a      	uxth	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a8:	2200      	movs	r2, #0
 80022aa:	494f      	ldr	r1, [pc, #316]	; (80023e8 <HAL_I2C_Mem_Read+0x448>)
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 fa1b 	bl	80026e8 <I2C_WaitOnFlagUntilTimeout>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e091      	b.n	80023e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	691a      	ldr	r2, [r3, #16]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231a:	3b01      	subs	r3, #1
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002326:	b29b      	uxth	r3, r3
 8002328:	3b01      	subs	r3, #1
 800232a:	b29a      	uxth	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002330:	e042      	b.n	80023b8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002334:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 fb2e 	bl	8002998 <I2C_WaitOnRXNEFlagUntilTimeout>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e04c      	b.n	80023e0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002362:	3b01      	subs	r3, #1
 8002364:	b29a      	uxth	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236e:	b29b      	uxth	r3, r3
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	2b04      	cmp	r3, #4
 8002384:	d118      	bne.n	80023b8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	3b01      	subs	r3, #1
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f47f aec2 	bne.w	8002146 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2220      	movs	r2, #32
 80023c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	e000      	b.n	80023e0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80023de:	2302      	movs	r3, #2
  }
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3728      	adds	r7, #40	; 0x28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	00010004 	.word	0x00010004

080023ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	4608      	mov	r0, r1
 80023f6:	4611      	mov	r1, r2
 80023f8:	461a      	mov	r2, r3
 80023fa:	4603      	mov	r3, r0
 80023fc:	817b      	strh	r3, [r7, #10]
 80023fe:	460b      	mov	r3, r1
 8002400:	813b      	strh	r3, [r7, #8]
 8002402:	4613      	mov	r3, r2
 8002404:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002414:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	2200      	movs	r2, #0
 800241e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 f960 	bl	80026e8 <I2C_WaitOnFlagUntilTimeout>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00d      	beq.n	800244a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800243c:	d103      	bne.n	8002446 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002444:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e05f      	b.n	800250a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800244a:	897b      	ldrh	r3, [r7, #10]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	461a      	mov	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002458:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	6a3a      	ldr	r2, [r7, #32]
 800245e:	492d      	ldr	r1, [pc, #180]	; (8002514 <I2C_RequestMemoryWrite+0x128>)
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 f998 	bl	8002796 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e04c      	b.n	800250a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002488:	6a39      	ldr	r1, [r7, #32]
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 fa02 	bl	8002894 <I2C_WaitOnTXEFlagUntilTimeout>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00d      	beq.n	80024b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249a:	2b04      	cmp	r3, #4
 800249c:	d107      	bne.n	80024ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e02b      	b.n	800250a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024b2:	88fb      	ldrh	r3, [r7, #6]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d105      	bne.n	80024c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024b8:	893b      	ldrh	r3, [r7, #8]
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	611a      	str	r2, [r3, #16]
 80024c2:	e021      	b.n	8002508 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80024c4:	893b      	ldrh	r3, [r7, #8]
 80024c6:	0a1b      	lsrs	r3, r3, #8
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d4:	6a39      	ldr	r1, [r7, #32]
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 f9dc 	bl	8002894 <I2C_WaitOnTXEFlagUntilTimeout>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00d      	beq.n	80024fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d107      	bne.n	80024fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e005      	b.n	800250a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024fe:	893b      	ldrh	r3, [r7, #8]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	00010002 	.word	0x00010002

08002518 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af02      	add	r7, sp, #8
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	4608      	mov	r0, r1
 8002522:	4611      	mov	r1, r2
 8002524:	461a      	mov	r2, r3
 8002526:	4603      	mov	r3, r0
 8002528:	817b      	strh	r3, [r7, #10]
 800252a:	460b      	mov	r3, r1
 800252c:	813b      	strh	r3, [r7, #8]
 800252e:	4613      	mov	r3, r2
 8002530:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002540:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002550:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	2200      	movs	r2, #0
 800255a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 f8c2 	bl	80026e8 <I2C_WaitOnFlagUntilTimeout>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00d      	beq.n	8002586 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002578:	d103      	bne.n	8002582 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002580:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e0aa      	b.n	80026dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002586:	897b      	ldrh	r3, [r7, #10]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002594:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	6a3a      	ldr	r2, [r7, #32]
 800259a:	4952      	ldr	r1, [pc, #328]	; (80026e4 <I2C_RequestMemoryRead+0x1cc>)
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 f8fa 	bl	8002796 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e097      	b.n	80026dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	617b      	str	r3, [r7, #20]
 80025c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c4:	6a39      	ldr	r1, [r7, #32]
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 f964 	bl	8002894 <I2C_WaitOnTXEFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00d      	beq.n	80025ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d107      	bne.n	80025ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e076      	b.n	80026dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025ee:	88fb      	ldrh	r3, [r7, #6]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d105      	bne.n	8002600 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025f4:	893b      	ldrh	r3, [r7, #8]
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	611a      	str	r2, [r3, #16]
 80025fe:	e021      	b.n	8002644 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002600:	893b      	ldrh	r3, [r7, #8]
 8002602:	0a1b      	lsrs	r3, r3, #8
 8002604:	b29b      	uxth	r3, r3
 8002606:	b2da      	uxtb	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800260e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002610:	6a39      	ldr	r1, [r7, #32]
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f93e 	bl	8002894 <I2C_WaitOnTXEFlagUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00d      	beq.n	800263a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	2b04      	cmp	r3, #4
 8002624:	d107      	bne.n	8002636 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002634:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e050      	b.n	80026dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800263a:	893b      	ldrh	r3, [r7, #8]
 800263c:	b2da      	uxtb	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002646:	6a39      	ldr	r1, [r7, #32]
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f923 	bl	8002894 <I2C_WaitOnTXEFlagUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00d      	beq.n	8002670 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	2b04      	cmp	r3, #4
 800265a:	d107      	bne.n	800266c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800266a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e035      	b.n	80026dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800267e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	2200      	movs	r2, #0
 8002688:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f000 f82b 	bl	80026e8 <I2C_WaitOnFlagUntilTimeout>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00d      	beq.n	80026b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026a6:	d103      	bne.n	80026b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e013      	b.n	80026dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80026b4:	897b      	ldrh	r3, [r7, #10]
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	6a3a      	ldr	r2, [r7, #32]
 80026c8:	4906      	ldr	r1, [pc, #24]	; (80026e4 <I2C_RequestMemoryRead+0x1cc>)
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 f863 	bl	8002796 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	00010002 	.word	0x00010002

080026e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	4613      	mov	r3, r2
 80026f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026f8:	e025      	b.n	8002746 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002700:	d021      	beq.n	8002746 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002702:	f7fe ff29 	bl	8001558 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d302      	bcc.n	8002718 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d116      	bne.n	8002746 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2220      	movs	r2, #32
 8002722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f043 0220 	orr.w	r2, r3, #32
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e023      	b.n	800278e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	0c1b      	lsrs	r3, r3, #16
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b01      	cmp	r3, #1
 800274e:	d10d      	bne.n	800276c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	43da      	mvns	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	4013      	ands	r3, r2
 800275c:	b29b      	uxth	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	bf0c      	ite	eq
 8002762:	2301      	moveq	r3, #1
 8002764:	2300      	movne	r3, #0
 8002766:	b2db      	uxtb	r3, r3
 8002768:	461a      	mov	r2, r3
 800276a:	e00c      	b.n	8002786 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	43da      	mvns	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	4013      	ands	r3, r2
 8002778:	b29b      	uxth	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	bf0c      	ite	eq
 800277e:	2301      	moveq	r3, #1
 8002780:	2300      	movne	r3, #0
 8002782:	b2db      	uxtb	r3, r3
 8002784:	461a      	mov	r2, r3
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	429a      	cmp	r2, r3
 800278a:	d0b6      	beq.n	80026fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b084      	sub	sp, #16
 800279a:	af00      	add	r7, sp, #0
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027a4:	e051      	b.n	800284a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b4:	d123      	bne.n	80027fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f043 0204 	orr.w	r2, r3, #4
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e046      	b.n	800288c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002804:	d021      	beq.n	800284a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002806:	f7fe fea7 	bl	8001558 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	429a      	cmp	r2, r3
 8002814:	d302      	bcc.n	800281c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d116      	bne.n	800284a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2220      	movs	r2, #32
 8002826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f043 0220 	orr.w	r2, r3, #32
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e020      	b.n	800288c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	0c1b      	lsrs	r3, r3, #16
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b01      	cmp	r3, #1
 8002852:	d10c      	bne.n	800286e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	43da      	mvns	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	4013      	ands	r3, r2
 8002860:	b29b      	uxth	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	bf14      	ite	ne
 8002866:	2301      	movne	r3, #1
 8002868:	2300      	moveq	r3, #0
 800286a:	b2db      	uxtb	r3, r3
 800286c:	e00b      	b.n	8002886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	43da      	mvns	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	4013      	ands	r3, r2
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf14      	ite	ne
 8002880:	2301      	movne	r3, #1
 8002882:	2300      	moveq	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d18d      	bne.n	80027a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028a0:	e02d      	b.n	80028fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f8ce 	bl	8002a44 <I2C_IsAcknowledgeFailed>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e02d      	b.n	800290e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b8:	d021      	beq.n	80028fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ba:	f7fe fe4d 	bl	8001558 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d302      	bcc.n	80028d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d116      	bne.n	80028fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2220      	movs	r2, #32
 80028da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f043 0220 	orr.w	r2, r3, #32
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e007      	b.n	800290e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002908:	2b80      	cmp	r3, #128	; 0x80
 800290a:	d1ca      	bne.n	80028a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002922:	e02d      	b.n	8002980 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 f88d 	bl	8002a44 <I2C_IsAcknowledgeFailed>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e02d      	b.n	8002990 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293a:	d021      	beq.n	8002980 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800293c:	f7fe fe0c 	bl	8001558 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	429a      	cmp	r2, r3
 800294a:	d302      	bcc.n	8002952 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d116      	bne.n	8002980 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	f043 0220 	orr.w	r2, r3, #32
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e007      	b.n	8002990 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	2b04      	cmp	r3, #4
 800298c:	d1ca      	bne.n	8002924 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029a4:	e042      	b.n	8002a2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	f003 0310 	and.w	r3, r3, #16
 80029b0:	2b10      	cmp	r3, #16
 80029b2:	d119      	bne.n	80029e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f06f 0210 	mvn.w	r2, #16
 80029bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e029      	b.n	8002a3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e8:	f7fe fdb6 	bl	8001558 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d302      	bcc.n	80029fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d116      	bne.n	8002a2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2220      	movs	r2, #32
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	f043 0220 	orr.w	r2, r3, #32
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e007      	b.n	8002a3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a36:	2b40      	cmp	r3, #64	; 0x40
 8002a38:	d1b5      	bne.n	80029a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a5a:	d11b      	bne.n	8002a94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	f043 0204 	orr.w	r2, r3, #4
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e000      	b.n	8002a96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e128      	b.n	8002d08 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a90      	ldr	r2, [pc, #576]	; (8002d10 <HAL_I2S_Init+0x26c>)
 8002ace:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7fe fad7 	bl	8001084 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2202      	movs	r2, #2
 8002ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002aec:	f023 030f 	bic.w	r3, r3, #15
 8002af0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2202      	movs	r2, #2
 8002af8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d060      	beq.n	8002bc4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d102      	bne.n	8002b10 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002b0a:	2310      	movs	r3, #16
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	e001      	b.n	8002b14 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002b10:	2320      	movs	r3, #32
 8002b12:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b20      	cmp	r3, #32
 8002b1a:	d802      	bhi.n	8002b22 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002b22:	2001      	movs	r0, #1
 8002b24:	f001 f9d2 	bl	8003ecc <HAL_RCCEx_GetPeriphCLKFreq>
 8002b28:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b32:	d125      	bne.n	8002b80 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d010      	beq.n	8002b5e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	461a      	mov	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b58:	3305      	adds	r3, #5
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	e01f      	b.n	8002b9e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	461a      	mov	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7a:	3305      	adds	r3, #5
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	e00e      	b.n	8002b9e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	461a      	mov	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9a:	3305      	adds	r3, #5
 8002b9c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	4a5c      	ldr	r2, [pc, #368]	; (8002d14 <HAL_I2S_Init+0x270>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	08db      	lsrs	r3, r3, #3
 8002ba8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	085b      	lsrs	r3, r3, #1
 8002bba:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	61bb      	str	r3, [r7, #24]
 8002bc2:	e003      	b.n	8002bcc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d902      	bls.n	8002bd8 <HAL_I2S_Init+0x134>
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	2bff      	cmp	r3, #255	; 0xff
 8002bd6:	d907      	bls.n	8002be8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bdc:	f043 0210 	orr.w	r2, r3, #16
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e08f      	b.n	8002d08 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	ea42 0103 	orr.w	r1, r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69fa      	ldr	r2, [r7, #28]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002c06:	f023 030f 	bic.w	r3, r3, #15
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6851      	ldr	r1, [r2, #4]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6892      	ldr	r2, [r2, #8]
 8002c12:	4311      	orrs	r1, r2
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	68d2      	ldr	r2, [r2, #12]
 8002c18:	4311      	orrs	r1, r2
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6992      	ldr	r2, [r2, #24]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c2a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d161      	bne.n	8002cf8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a38      	ldr	r2, [pc, #224]	; (8002d18 <HAL_I2S_Init+0x274>)
 8002c38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a37      	ldr	r2, [pc, #220]	; (8002d1c <HAL_I2S_Init+0x278>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d101      	bne.n	8002c48 <HAL_I2S_Init+0x1a4>
 8002c44:	4b36      	ldr	r3, [pc, #216]	; (8002d20 <HAL_I2S_Init+0x27c>)
 8002c46:	e001      	b.n	8002c4c <HAL_I2S_Init+0x1a8>
 8002c48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6812      	ldr	r2, [r2, #0]
 8002c52:	4932      	ldr	r1, [pc, #200]	; (8002d1c <HAL_I2S_Init+0x278>)
 8002c54:	428a      	cmp	r2, r1
 8002c56:	d101      	bne.n	8002c5c <HAL_I2S_Init+0x1b8>
 8002c58:	4a31      	ldr	r2, [pc, #196]	; (8002d20 <HAL_I2S_Init+0x27c>)
 8002c5a:	e001      	b.n	8002c60 <HAL_I2S_Init+0x1bc>
 8002c5c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002c60:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002c64:	f023 030f 	bic.w	r3, r3, #15
 8002c68:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a2b      	ldr	r2, [pc, #172]	; (8002d1c <HAL_I2S_Init+0x278>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d101      	bne.n	8002c78 <HAL_I2S_Init+0x1d4>
 8002c74:	4b2a      	ldr	r3, [pc, #168]	; (8002d20 <HAL_I2S_Init+0x27c>)
 8002c76:	e001      	b.n	8002c7c <HAL_I2S_Init+0x1d8>
 8002c78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a25      	ldr	r2, [pc, #148]	; (8002d1c <HAL_I2S_Init+0x278>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d101      	bne.n	8002c8e <HAL_I2S_Init+0x1ea>
 8002c8a:	4b25      	ldr	r3, [pc, #148]	; (8002d20 <HAL_I2S_Init+0x27c>)
 8002c8c:	e001      	b.n	8002c92 <HAL_I2S_Init+0x1ee>
 8002c8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c9e:	d003      	beq.n	8002ca8 <HAL_I2S_Init+0x204>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d103      	bne.n	8002cb0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002ca8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	e001      	b.n	8002cb4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	897b      	ldrh	r3, [r7, #10]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ce0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a0d      	ldr	r2, [pc, #52]	; (8002d1c <HAL_I2S_Init+0x278>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d101      	bne.n	8002cf0 <HAL_I2S_Init+0x24c>
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <HAL_I2S_Init+0x27c>)
 8002cee:	e001      	b.n	8002cf4 <HAL_I2S_Init+0x250>
 8002cf0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cf4:	897a      	ldrh	r2, [r7, #10]
 8002cf6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3720      	adds	r7, #32
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	08002e1b 	.word	0x08002e1b
 8002d14:	cccccccd 	.word	0xcccccccd
 8002d18:	08002f31 	.word	0x08002f31
 8002d1c:	40003800 	.word	0x40003800
 8002d20:	40003400 	.word	0x40003400

08002d24 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6c:	881a      	ldrh	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	1c9a      	adds	r2, r3, #2
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10e      	bne.n	8002db4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002da4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff ffb8 	bl	8002d24 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002db4:	bf00      	nop
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	b292      	uxth	r2, r2
 8002dd0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd6:	1c9a      	adds	r2, r3, #2
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10e      	bne.n	8002e12 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e02:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff ff93 	bl	8002d38 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b086      	sub	sp, #24
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d13a      	bne.n	8002eac <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d109      	bne.n	8002e54 <I2S_IRQHandler+0x3a>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4a:	2b40      	cmp	r3, #64	; 0x40
 8002e4c:	d102      	bne.n	8002e54 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7ff ffb4 	bl	8002dbc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5a:	2b40      	cmp	r3, #64	; 0x40
 8002e5c:	d126      	bne.n	8002eac <I2S_IRQHandler+0x92>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	d11f      	bne.n	8002eac <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e7a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	613b      	str	r3, [r7, #16]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	613b      	str	r3, [r7, #16]
 8002e90:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	f043 0202 	orr.w	r2, r3, #2
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff ff50 	bl	8002d4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d136      	bne.n	8002f26 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d109      	bne.n	8002ed6 <I2S_IRQHandler+0xbc>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ecc:	2b80      	cmp	r3, #128	; 0x80
 8002ece:	d102      	bne.n	8002ed6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff ff45 	bl	8002d60 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d122      	bne.n	8002f26 <I2S_IRQHandler+0x10c>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f003 0320 	and.w	r3, r3, #32
 8002eea:	2b20      	cmp	r3, #32
 8002eec:	d11b      	bne.n	8002f26 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002efc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002efe:	2300      	movs	r3, #0
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f18:	f043 0204 	orr.w	r2, r3, #4
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff ff13 	bl	8002d4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f26:	bf00      	nop
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a92      	ldr	r2, [pc, #584]	; (8003190 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d101      	bne.n	8002f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002f4a:	4b92      	ldr	r3, [pc, #584]	; (8003194 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f4c:	e001      	b.n	8002f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002f4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a8b      	ldr	r2, [pc, #556]	; (8003190 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d101      	bne.n	8002f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002f68:	4b8a      	ldr	r3, [pc, #552]	; (8003194 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f6a:	e001      	b.n	8002f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002f6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f7c:	d004      	beq.n	8002f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f040 8099 	bne.w	80030ba <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d107      	bne.n	8002fa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f925 	bl	80031ec <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d107      	bne.n	8002fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d002      	beq.n	8002fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f9c8 	bl	800334c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc2:	2b40      	cmp	r3, #64	; 0x40
 8002fc4:	d13a      	bne.n	800303c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f003 0320 	and.w	r3, r3, #32
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d035      	beq.n	800303c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a6e      	ldr	r2, [pc, #440]	; (8003190 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d101      	bne.n	8002fde <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002fda:	4b6e      	ldr	r3, [pc, #440]	; (8003194 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002fdc:	e001      	b.n	8002fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002fde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4969      	ldr	r1, [pc, #420]	; (8003190 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fea:	428b      	cmp	r3, r1
 8002fec:	d101      	bne.n	8002ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002fee:	4b69      	ldr	r3, [pc, #420]	; (8003194 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ff0:	e001      	b.n	8002ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002ff2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ff6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ffa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800300a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800300c:	2300      	movs	r3, #0
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302e:	f043 0202 	orr.w	r2, r3, #2
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff fe88 	bl	8002d4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b08      	cmp	r3, #8
 8003044:	f040 80c3 	bne.w	80031ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f003 0320 	and.w	r3, r3, #32
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 80bd 	beq.w	80031ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003062:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a49      	ldr	r2, [pc, #292]	; (8003190 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d101      	bne.n	8003072 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800306e:	4b49      	ldr	r3, [pc, #292]	; (8003194 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003070:	e001      	b.n	8003076 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003072:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4944      	ldr	r1, [pc, #272]	; (8003190 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800307e:	428b      	cmp	r3, r1
 8003080:	d101      	bne.n	8003086 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003082:	4b44      	ldr	r3, [pc, #272]	; (8003194 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003084:	e001      	b.n	800308a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003086:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800308a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800308e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003090:	2300      	movs	r3, #0
 8003092:	60bb      	str	r3, [r7, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	60bb      	str	r3, [r7, #8]
 800309c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	f043 0204 	orr.w	r2, r3, #4
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff fe4a 	bl	8002d4c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80030b8:	e089      	b.n	80031ce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d107      	bne.n	80030d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f8be 	bl	8003250 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d107      	bne.n	80030ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d002      	beq.n	80030ee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f8fd 	bl	80032e8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f4:	2b40      	cmp	r3, #64	; 0x40
 80030f6:	d12f      	bne.n	8003158 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f003 0320 	and.w	r3, r3, #32
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d02a      	beq.n	8003158 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003110:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1e      	ldr	r2, [pc, #120]	; (8003190 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d101      	bne.n	8003120 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800311c:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800311e:	e001      	b.n	8003124 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003120:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4919      	ldr	r1, [pc, #100]	; (8003190 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800312c:	428b      	cmp	r3, r1
 800312e:	d101      	bne.n	8003134 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003130:	4b18      	ldr	r3, [pc, #96]	; (8003194 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003132:	e001      	b.n	8003138 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003134:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003138:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800313c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	f043 0202 	orr.w	r2, r3, #2
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7ff fdfa 	bl	8002d4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b08      	cmp	r3, #8
 8003160:	d136      	bne.n	80031d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	f003 0320 	and.w	r3, r3, #32
 8003168:	2b00      	cmp	r3, #0
 800316a:	d031      	beq.n	80031d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a07      	ldr	r2, [pc, #28]	; (8003190 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d101      	bne.n	800317a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003176:	4b07      	ldr	r3, [pc, #28]	; (8003194 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003178:	e001      	b.n	800317e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800317a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4902      	ldr	r1, [pc, #8]	; (8003190 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003186:	428b      	cmp	r3, r1
 8003188:	d106      	bne.n	8003198 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800318a:	4b02      	ldr	r3, [pc, #8]	; (8003194 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800318c:	e006      	b.n	800319c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800318e:	bf00      	nop
 8003190:	40003800 	.word	0x40003800
 8003194:	40003400 	.word	0x40003400
 8003198:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800319c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031a0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031b0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031be:	f043 0204 	orr.w	r2, r3, #4
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff fdc0 	bl	8002d4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031cc:	e000      	b.n	80031d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80031ce:	bf00      	nop
}
 80031d0:	bf00      	nop
 80031d2:	3720      	adds	r7, #32
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	1c99      	adds	r1, r3, #2
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6251      	str	r1, [r2, #36]	; 0x24
 80031fe:	881a      	ldrh	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320a:	b29b      	uxth	r3, r3
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d113      	bne.n	8003246 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800322c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003232:	b29b      	uxth	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	d106      	bne.n	8003246 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff ffc9 	bl	80031d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	1c99      	adds	r1, r3, #2
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6251      	str	r1, [r2, #36]	; 0x24
 8003262:	8819      	ldrh	r1, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a1d      	ldr	r2, [pc, #116]	; (80032e0 <I2SEx_TxISR_I2SExt+0x90>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d101      	bne.n	8003272 <I2SEx_TxISR_I2SExt+0x22>
 800326e:	4b1d      	ldr	r3, [pc, #116]	; (80032e4 <I2SEx_TxISR_I2SExt+0x94>)
 8003270:	e001      	b.n	8003276 <I2SEx_TxISR_I2SExt+0x26>
 8003272:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003276:	460a      	mov	r2, r1
 8003278:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327e:	b29b      	uxth	r3, r3
 8003280:	3b01      	subs	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328c:	b29b      	uxth	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d121      	bne.n	80032d6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a12      	ldr	r2, [pc, #72]	; (80032e0 <I2SEx_TxISR_I2SExt+0x90>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d101      	bne.n	80032a0 <I2SEx_TxISR_I2SExt+0x50>
 800329c:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <I2SEx_TxISR_I2SExt+0x94>)
 800329e:	e001      	b.n	80032a4 <I2SEx_TxISR_I2SExt+0x54>
 80032a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	490d      	ldr	r1, [pc, #52]	; (80032e0 <I2SEx_TxISR_I2SExt+0x90>)
 80032ac:	428b      	cmp	r3, r1
 80032ae:	d101      	bne.n	80032b4 <I2SEx_TxISR_I2SExt+0x64>
 80032b0:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <I2SEx_TxISR_I2SExt+0x94>)
 80032b2:	e001      	b.n	80032b8 <I2SEx_TxISR_I2SExt+0x68>
 80032b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032bc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d106      	bne.n	80032d6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff ff81 	bl	80031d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40003800 	.word	0x40003800
 80032e4:	40003400 	.word	0x40003400

080032e8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68d8      	ldr	r0, [r3, #12]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fa:	1c99      	adds	r1, r3, #2
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003300:	b282      	uxth	r2, r0
 8003302:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003308:	b29b      	uxth	r3, r3
 800330a:	3b01      	subs	r3, #1
 800330c:	b29a      	uxth	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003316:	b29b      	uxth	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d113      	bne.n	8003344 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800332a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff ff4a 	bl	80031d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003344:	bf00      	nop
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a20      	ldr	r2, [pc, #128]	; (80033dc <I2SEx_RxISR_I2SExt+0x90>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d101      	bne.n	8003362 <I2SEx_RxISR_I2SExt+0x16>
 800335e:	4b20      	ldr	r3, [pc, #128]	; (80033e0 <I2SEx_RxISR_I2SExt+0x94>)
 8003360:	e001      	b.n	8003366 <I2SEx_RxISR_I2SExt+0x1a>
 8003362:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003366:	68d8      	ldr	r0, [r3, #12]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	1c99      	adds	r1, r3, #2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003372:	b282      	uxth	r2, r0
 8003374:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800337a:	b29b      	uxth	r3, r3
 800337c:	3b01      	subs	r3, #1
 800337e:	b29a      	uxth	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d121      	bne.n	80033d2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a12      	ldr	r2, [pc, #72]	; (80033dc <I2SEx_RxISR_I2SExt+0x90>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d101      	bne.n	800339c <I2SEx_RxISR_I2SExt+0x50>
 8003398:	4b11      	ldr	r3, [pc, #68]	; (80033e0 <I2SEx_RxISR_I2SExt+0x94>)
 800339a:	e001      	b.n	80033a0 <I2SEx_RxISR_I2SExt+0x54>
 800339c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	490d      	ldr	r1, [pc, #52]	; (80033dc <I2SEx_RxISR_I2SExt+0x90>)
 80033a8:	428b      	cmp	r3, r1
 80033aa:	d101      	bne.n	80033b0 <I2SEx_RxISR_I2SExt+0x64>
 80033ac:	4b0c      	ldr	r3, [pc, #48]	; (80033e0 <I2SEx_RxISR_I2SExt+0x94>)
 80033ae:	e001      	b.n	80033b4 <I2SEx_RxISR_I2SExt+0x68>
 80033b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033b8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033be:	b29b      	uxth	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d106      	bne.n	80033d2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7ff ff03 	bl	80031d8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40003800 	.word	0x40003800
 80033e0:	40003400 	.word	0x40003400

080033e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e267      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d075      	beq.n	80034ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003402:	4b88      	ldr	r3, [pc, #544]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 030c 	and.w	r3, r3, #12
 800340a:	2b04      	cmp	r3, #4
 800340c:	d00c      	beq.n	8003428 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800340e:	4b85      	ldr	r3, [pc, #532]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003416:	2b08      	cmp	r3, #8
 8003418:	d112      	bne.n	8003440 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800341a:	4b82      	ldr	r3, [pc, #520]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003422:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003426:	d10b      	bne.n	8003440 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003428:	4b7e      	ldr	r3, [pc, #504]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d05b      	beq.n	80034ec <HAL_RCC_OscConfig+0x108>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d157      	bne.n	80034ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e242      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003448:	d106      	bne.n	8003458 <HAL_RCC_OscConfig+0x74>
 800344a:	4b76      	ldr	r3, [pc, #472]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a75      	ldr	r2, [pc, #468]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	e01d      	b.n	8003494 <HAL_RCC_OscConfig+0xb0>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003460:	d10c      	bne.n	800347c <HAL_RCC_OscConfig+0x98>
 8003462:	4b70      	ldr	r3, [pc, #448]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a6f      	ldr	r2, [pc, #444]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	4b6d      	ldr	r3, [pc, #436]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a6c      	ldr	r2, [pc, #432]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	e00b      	b.n	8003494 <HAL_RCC_OscConfig+0xb0>
 800347c:	4b69      	ldr	r3, [pc, #420]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a68      	ldr	r2, [pc, #416]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	4b66      	ldr	r3, [pc, #408]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a65      	ldr	r2, [pc, #404]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 800348e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d013      	beq.n	80034c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349c:	f7fe f85c 	bl	8001558 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034a4:	f7fe f858 	bl	8001558 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b64      	cmp	r3, #100	; 0x64
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e207      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b6:	4b5b      	ldr	r3, [pc, #364]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0f0      	beq.n	80034a4 <HAL_RCC_OscConfig+0xc0>
 80034c2:	e014      	b.n	80034ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c4:	f7fe f848 	bl	8001558 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034cc:	f7fe f844 	bl	8001558 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b64      	cmp	r3, #100	; 0x64
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e1f3      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034de:	4b51      	ldr	r3, [pc, #324]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0xe8>
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d063      	beq.n	80035c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034fa:	4b4a      	ldr	r3, [pc, #296]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 030c 	and.w	r3, r3, #12
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00b      	beq.n	800351e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003506:	4b47      	ldr	r3, [pc, #284]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800350e:	2b08      	cmp	r3, #8
 8003510:	d11c      	bne.n	800354c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003512:	4b44      	ldr	r3, [pc, #272]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d116      	bne.n	800354c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800351e:	4b41      	ldr	r3, [pc, #260]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d005      	beq.n	8003536 <HAL_RCC_OscConfig+0x152>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d001      	beq.n	8003536 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e1c7      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003536:	4b3b      	ldr	r3, [pc, #236]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	00db      	lsls	r3, r3, #3
 8003544:	4937      	ldr	r1, [pc, #220]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003546:	4313      	orrs	r3, r2
 8003548:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800354a:	e03a      	b.n	80035c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d020      	beq.n	8003596 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003554:	4b34      	ldr	r3, [pc, #208]	; (8003628 <HAL_RCC_OscConfig+0x244>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355a:	f7fd fffd 	bl	8001558 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003562:	f7fd fff9 	bl	8001558 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e1a8      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003574:	4b2b      	ldr	r3, [pc, #172]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003580:	4b28      	ldr	r3, [pc, #160]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	4925      	ldr	r1, [pc, #148]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 8003590:	4313      	orrs	r3, r2
 8003592:	600b      	str	r3, [r1, #0]
 8003594:	e015      	b.n	80035c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003596:	4b24      	ldr	r3, [pc, #144]	; (8003628 <HAL_RCC_OscConfig+0x244>)
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fd ffdc 	bl	8001558 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a4:	f7fd ffd8 	bl	8001558 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e187      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b6:	4b1b      	ldr	r3, [pc, #108]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d036      	beq.n	800363c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d016      	beq.n	8003604 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035d6:	4b15      	ldr	r3, [pc, #84]	; (800362c <HAL_RCC_OscConfig+0x248>)
 80035d8:	2201      	movs	r2, #1
 80035da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035dc:	f7fd ffbc 	bl	8001558 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e4:	f7fd ffb8 	bl	8001558 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e167      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f6:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <HAL_RCC_OscConfig+0x240>)
 80035f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <HAL_RCC_OscConfig+0x200>
 8003602:	e01b      	b.n	800363c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003604:	4b09      	ldr	r3, [pc, #36]	; (800362c <HAL_RCC_OscConfig+0x248>)
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800360a:	f7fd ffa5 	bl	8001558 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003610:	e00e      	b.n	8003630 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003612:	f7fd ffa1 	bl	8001558 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d907      	bls.n	8003630 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e150      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
 8003624:	40023800 	.word	0x40023800
 8003628:	42470000 	.word	0x42470000
 800362c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003630:	4b88      	ldr	r3, [pc, #544]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1ea      	bne.n	8003612 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 8097 	beq.w	8003778 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800364a:	2300      	movs	r3, #0
 800364c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800364e:	4b81      	ldr	r3, [pc, #516]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10f      	bne.n	800367a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800365a:	2300      	movs	r3, #0
 800365c:	60bb      	str	r3, [r7, #8]
 800365e:	4b7d      	ldr	r3, [pc, #500]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	4a7c      	ldr	r2, [pc, #496]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003668:	6413      	str	r3, [r2, #64]	; 0x40
 800366a:	4b7a      	ldr	r3, [pc, #488]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003676:	2301      	movs	r3, #1
 8003678:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367a:	4b77      	ldr	r3, [pc, #476]	; (8003858 <HAL_RCC_OscConfig+0x474>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003682:	2b00      	cmp	r3, #0
 8003684:	d118      	bne.n	80036b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003686:	4b74      	ldr	r3, [pc, #464]	; (8003858 <HAL_RCC_OscConfig+0x474>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a73      	ldr	r2, [pc, #460]	; (8003858 <HAL_RCC_OscConfig+0x474>)
 800368c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003692:	f7fd ff61 	bl	8001558 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369a:	f7fd ff5d 	bl	8001558 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e10c      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ac:	4b6a      	ldr	r3, [pc, #424]	; (8003858 <HAL_RCC_OscConfig+0x474>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0f0      	beq.n	800369a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d106      	bne.n	80036ce <HAL_RCC_OscConfig+0x2ea>
 80036c0:	4b64      	ldr	r3, [pc, #400]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	4a63      	ldr	r2, [pc, #396]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	6713      	str	r3, [r2, #112]	; 0x70
 80036cc:	e01c      	b.n	8003708 <HAL_RCC_OscConfig+0x324>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	2b05      	cmp	r3, #5
 80036d4:	d10c      	bne.n	80036f0 <HAL_RCC_OscConfig+0x30c>
 80036d6:	4b5f      	ldr	r3, [pc, #380]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036da:	4a5e      	ldr	r2, [pc, #376]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036dc:	f043 0304 	orr.w	r3, r3, #4
 80036e0:	6713      	str	r3, [r2, #112]	; 0x70
 80036e2:	4b5c      	ldr	r3, [pc, #368]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e6:	4a5b      	ldr	r2, [pc, #364]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036e8:	f043 0301 	orr.w	r3, r3, #1
 80036ec:	6713      	str	r3, [r2, #112]	; 0x70
 80036ee:	e00b      	b.n	8003708 <HAL_RCC_OscConfig+0x324>
 80036f0:	4b58      	ldr	r3, [pc, #352]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f4:	4a57      	ldr	r2, [pc, #348]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036f6:	f023 0301 	bic.w	r3, r3, #1
 80036fa:	6713      	str	r3, [r2, #112]	; 0x70
 80036fc:	4b55      	ldr	r3, [pc, #340]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80036fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003700:	4a54      	ldr	r2, [pc, #336]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003702:	f023 0304 	bic.w	r3, r3, #4
 8003706:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d015      	beq.n	800373c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003710:	f7fd ff22 	bl	8001558 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003716:	e00a      	b.n	800372e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003718:	f7fd ff1e 	bl	8001558 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	f241 3288 	movw	r2, #5000	; 0x1388
 8003726:	4293      	cmp	r3, r2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e0cb      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800372e:	4b49      	ldr	r3, [pc, #292]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0ee      	beq.n	8003718 <HAL_RCC_OscConfig+0x334>
 800373a:	e014      	b.n	8003766 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800373c:	f7fd ff0c 	bl	8001558 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003742:	e00a      	b.n	800375a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003744:	f7fd ff08 	bl	8001558 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003752:	4293      	cmp	r3, r2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e0b5      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800375a:	4b3e      	ldr	r3, [pc, #248]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 800375c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1ee      	bne.n	8003744 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003766:	7dfb      	ldrb	r3, [r7, #23]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d105      	bne.n	8003778 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800376c:	4b39      	ldr	r3, [pc, #228]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	4a38      	ldr	r2, [pc, #224]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003776:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80a1 	beq.w	80038c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003782:	4b34      	ldr	r3, [pc, #208]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	2b08      	cmp	r3, #8
 800378c:	d05c      	beq.n	8003848 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d141      	bne.n	800381a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003796:	4b31      	ldr	r3, [pc, #196]	; (800385c <HAL_RCC_OscConfig+0x478>)
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379c:	f7fd fedc 	bl	8001558 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a4:	f7fd fed8 	bl	8001558 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e087      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b6:	4b27      	ldr	r3, [pc, #156]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f0      	bne.n	80037a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69da      	ldr	r2, [r3, #28]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	019b      	lsls	r3, r3, #6
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d8:	085b      	lsrs	r3, r3, #1
 80037da:	3b01      	subs	r3, #1
 80037dc:	041b      	lsls	r3, r3, #16
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e4:	061b      	lsls	r3, r3, #24
 80037e6:	491b      	ldr	r1, [pc, #108]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037ec:	4b1b      	ldr	r3, [pc, #108]	; (800385c <HAL_RCC_OscConfig+0x478>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f2:	f7fd feb1 	bl	8001558 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037fa:	f7fd fead 	bl	8001558 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e05c      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800380c:	4b11      	ldr	r3, [pc, #68]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCC_OscConfig+0x416>
 8003818:	e054      	b.n	80038c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381a:	4b10      	ldr	r3, [pc, #64]	; (800385c <HAL_RCC_OscConfig+0x478>)
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003820:	f7fd fe9a 	bl	8001558 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003828:	f7fd fe96 	bl	8001558 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e045      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383a:	4b06      	ldr	r3, [pc, #24]	; (8003854 <HAL_RCC_OscConfig+0x470>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f0      	bne.n	8003828 <HAL_RCC_OscConfig+0x444>
 8003846:	e03d      	b.n	80038c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d107      	bne.n	8003860 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e038      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
 8003854:	40023800 	.word	0x40023800
 8003858:	40007000 	.word	0x40007000
 800385c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003860:	4b1b      	ldr	r3, [pc, #108]	; (80038d0 <HAL_RCC_OscConfig+0x4ec>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d028      	beq.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003878:	429a      	cmp	r2, r3
 800387a:	d121      	bne.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003886:	429a      	cmp	r2, r3
 8003888:	d11a      	bne.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003890:	4013      	ands	r3, r2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003896:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003898:	4293      	cmp	r3, r2
 800389a:	d111      	bne.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a6:	085b      	lsrs	r3, r3, #1
 80038a8:	3b01      	subs	r3, #1
 80038aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d107      	bne.n	80038c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038bc:	429a      	cmp	r2, r3
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e000      	b.n	80038c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40023800 	.word	0x40023800

080038d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0cc      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038e8:	4b68      	ldr	r3, [pc, #416]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d90c      	bls.n	8003910 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f6:	4b65      	ldr	r3, [pc, #404]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fe:	4b63      	ldr	r3, [pc, #396]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d001      	beq.n	8003910 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e0b8      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d020      	beq.n	800395e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0304 	and.w	r3, r3, #4
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003928:	4b59      	ldr	r3, [pc, #356]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	4a58      	ldr	r2, [pc, #352]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003932:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003940:	4b53      	ldr	r3, [pc, #332]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4a52      	ldr	r2, [pc, #328]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800394a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800394c:	4b50      	ldr	r3, [pc, #320]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	494d      	ldr	r1, [pc, #308]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d044      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d107      	bne.n	8003982 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003972:	4b47      	ldr	r3, [pc, #284]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d119      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e07f      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d003      	beq.n	8003992 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800398e:	2b03      	cmp	r3, #3
 8003990:	d107      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003992:	4b3f      	ldr	r3, [pc, #252]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e06f      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a2:	4b3b      	ldr	r3, [pc, #236]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e067      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039b2:	4b37      	ldr	r3, [pc, #220]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f023 0203 	bic.w	r2, r3, #3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4934      	ldr	r1, [pc, #208]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039c4:	f7fd fdc8 	bl	8001558 <HAL_GetTick>
 80039c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ca:	e00a      	b.n	80039e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039cc:	f7fd fdc4 	bl	8001558 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039da:	4293      	cmp	r3, r2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e04f      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e2:	4b2b      	ldr	r3, [pc, #172]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 020c 	and.w	r2, r3, #12
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d1eb      	bne.n	80039cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039f4:	4b25      	ldr	r3, [pc, #148]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d20c      	bcs.n	8003a1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a02:	4b22      	ldr	r3, [pc, #136]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0a:	4b20      	ldr	r3, [pc, #128]	; (8003a8c <HAL_RCC_ClockConfig+0x1b8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d001      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e032      	b.n	8003a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d008      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a28:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	4916      	ldr	r1, [pc, #88]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a46:	4b12      	ldr	r3, [pc, #72]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	490e      	ldr	r1, [pc, #56]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a5a:	f000 f821 	bl	8003aa0 <HAL_RCC_GetSysClockFreq>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	091b      	lsrs	r3, r3, #4
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	490a      	ldr	r1, [pc, #40]	; (8003a94 <HAL_RCC_ClockConfig+0x1c0>)
 8003a6c:	5ccb      	ldrb	r3, [r1, r3]
 8003a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a72:	4a09      	ldr	r2, [pc, #36]	; (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a76:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fd fd28 	bl	80014d0 <HAL_InitTick>

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40023c00 	.word	0x40023c00
 8003a90:	40023800 	.word	0x40023800
 8003a94:	08005324 	.word	0x08005324
 8003a98:	20000000 	.word	0x20000000
 8003a9c:	20000004 	.word	0x20000004

08003aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aa4:	b094      	sub	sp, #80	; 0x50
 8003aa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8003aac:	2300      	movs	r3, #0
 8003aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ab8:	4b79      	ldr	r3, [pc, #484]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 030c 	and.w	r3, r3, #12
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d00d      	beq.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x40>
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	f200 80e1 	bhi.w	8003c8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d003      	beq.n	8003ada <HAL_RCC_GetSysClockFreq+0x3a>
 8003ad2:	e0db      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ad4:	4b73      	ldr	r3, [pc, #460]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ad6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ad8:	e0db      	b.n	8003c92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ada:	4b73      	ldr	r3, [pc, #460]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003adc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ade:	e0d8      	b.n	8003c92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ae0:	4b6f      	ldr	r3, [pc, #444]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ae8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aea:	4b6d      	ldr	r3, [pc, #436]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d063      	beq.n	8003bbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af6:	4b6a      	ldr	r3, [pc, #424]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	099b      	lsrs	r3, r3, #6
 8003afc:	2200      	movs	r2, #0
 8003afe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b08:	633b      	str	r3, [r7, #48]	; 0x30
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b12:	4622      	mov	r2, r4
 8003b14:	462b      	mov	r3, r5
 8003b16:	f04f 0000 	mov.w	r0, #0
 8003b1a:	f04f 0100 	mov.w	r1, #0
 8003b1e:	0159      	lsls	r1, r3, #5
 8003b20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b24:	0150      	lsls	r0, r2, #5
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	1a51      	subs	r1, r2, r1
 8003b2e:	6139      	str	r1, [r7, #16]
 8003b30:	4629      	mov	r1, r5
 8003b32:	eb63 0301 	sbc.w	r3, r3, r1
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b44:	4659      	mov	r1, fp
 8003b46:	018b      	lsls	r3, r1, #6
 8003b48:	4651      	mov	r1, sl
 8003b4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b4e:	4651      	mov	r1, sl
 8003b50:	018a      	lsls	r2, r1, #6
 8003b52:	4651      	mov	r1, sl
 8003b54:	ebb2 0801 	subs.w	r8, r2, r1
 8003b58:	4659      	mov	r1, fp
 8003b5a:	eb63 0901 	sbc.w	r9, r3, r1
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b72:	4690      	mov	r8, r2
 8003b74:	4699      	mov	r9, r3
 8003b76:	4623      	mov	r3, r4
 8003b78:	eb18 0303 	adds.w	r3, r8, r3
 8003b7c:	60bb      	str	r3, [r7, #8]
 8003b7e:	462b      	mov	r3, r5
 8003b80:	eb49 0303 	adc.w	r3, r9, r3
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	f04f 0200 	mov.w	r2, #0
 8003b8a:	f04f 0300 	mov.w	r3, #0
 8003b8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b92:	4629      	mov	r1, r5
 8003b94:	024b      	lsls	r3, r1, #9
 8003b96:	4621      	mov	r1, r4
 8003b98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b9c:	4621      	mov	r1, r4
 8003b9e:	024a      	lsls	r2, r1, #9
 8003ba0:	4610      	mov	r0, r2
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003baa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bb0:	f7fc fb66 	bl	8000280 <__aeabi_uldivmod>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	4613      	mov	r3, r2
 8003bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bbc:	e058      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bbe:	4b38      	ldr	r3, [pc, #224]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	099b      	lsrs	r3, r3, #6
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	4611      	mov	r1, r2
 8003bca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bce:	623b      	str	r3, [r7, #32]
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003bd8:	4642      	mov	r2, r8
 8003bda:	464b      	mov	r3, r9
 8003bdc:	f04f 0000 	mov.w	r0, #0
 8003be0:	f04f 0100 	mov.w	r1, #0
 8003be4:	0159      	lsls	r1, r3, #5
 8003be6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bea:	0150      	lsls	r0, r2, #5
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4641      	mov	r1, r8
 8003bf2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bf6:	4649      	mov	r1, r9
 8003bf8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c10:	ebb2 040a 	subs.w	r4, r2, sl
 8003c14:	eb63 050b 	sbc.w	r5, r3, fp
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	00eb      	lsls	r3, r5, #3
 8003c22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c26:	00e2      	lsls	r2, r4, #3
 8003c28:	4614      	mov	r4, r2
 8003c2a:	461d      	mov	r5, r3
 8003c2c:	4643      	mov	r3, r8
 8003c2e:	18e3      	adds	r3, r4, r3
 8003c30:	603b      	str	r3, [r7, #0]
 8003c32:	464b      	mov	r3, r9
 8003c34:	eb45 0303 	adc.w	r3, r5, r3
 8003c38:	607b      	str	r3, [r7, #4]
 8003c3a:	f04f 0200 	mov.w	r2, #0
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c46:	4629      	mov	r1, r5
 8003c48:	028b      	lsls	r3, r1, #10
 8003c4a:	4621      	mov	r1, r4
 8003c4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c50:	4621      	mov	r1, r4
 8003c52:	028a      	lsls	r2, r1, #10
 8003c54:	4610      	mov	r0, r2
 8003c56:	4619      	mov	r1, r3
 8003c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	61fa      	str	r2, [r7, #28]
 8003c60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c64:	f7fc fb0c 	bl	8000280 <__aeabi_uldivmod>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c70:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	0c1b      	lsrs	r3, r3, #16
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c8a:	e002      	b.n	8003c92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c8c:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3750      	adds	r7, #80	; 0x50
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	00f42400 	.word	0x00f42400
 8003ca8:	007a1200 	.word	0x007a1200

08003cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb0:	4b03      	ldr	r3, [pc, #12]	; (8003cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	20000000 	.word	0x20000000

08003cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cc8:	f7ff fff0 	bl	8003cac <HAL_RCC_GetHCLKFreq>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	0a9b      	lsrs	r3, r3, #10
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	4903      	ldr	r1, [pc, #12]	; (8003ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cda:	5ccb      	ldrb	r3, [r1, r3]
 8003cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	08005334 	.word	0x08005334

08003cec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d105      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d038      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d14:	4b68      	ldr	r3, [pc, #416]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d1a:	f7fd fc1d 	bl	8001558 <HAL_GetTick>
 8003d1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d20:	e008      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d22:	f7fd fc19 	bl	8001558 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e0bd      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d34:	4b61      	ldr	r3, [pc, #388]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1f0      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	019b      	lsls	r3, r3, #6
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	071b      	lsls	r3, r3, #28
 8003d52:	495a      	ldr	r1, [pc, #360]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d5a:	4b57      	ldr	r3, [pc, #348]	; (8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d60:	f7fd fbfa 	bl	8001558 <HAL_GetTick>
 8003d64:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d68:	f7fd fbf6 	bl	8001558 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e09a      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d7a:	4b50      	ldr	r3, [pc, #320]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0f0      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 8083 	beq.w	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d94:	2300      	movs	r3, #0
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	4b48      	ldr	r3, [pc, #288]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	4a47      	ldr	r2, [pc, #284]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da2:	6413      	str	r3, [r2, #64]	; 0x40
 8003da4:	4b45      	ldr	r3, [pc, #276]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003db0:	4b43      	ldr	r3, [pc, #268]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a42      	ldr	r2, [pc, #264]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dba:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003dbc:	f7fd fbcc 	bl	8001558 <HAL_GetTick>
 8003dc0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003dc4:	f7fd fbc8 	bl	8001558 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e06c      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003dd6:	4b3a      	ldr	r3, [pc, #232]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003de2:	4b36      	ldr	r3, [pc, #216]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dea:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d02f      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d028      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e00:	4b2e      	ldr	r3, [pc, #184]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e08:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e0a:	4b2e      	ldr	r3, [pc, #184]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e10:	4b2c      	ldr	r3, [pc, #176]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003e16:	4a29      	ldr	r2, [pc, #164]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e1c:	4b27      	ldr	r3, [pc, #156]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d114      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003e28:	f7fd fb96 	bl	8001558 <HAL_GetTick>
 8003e2c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2e:	e00a      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e30:	f7fd fb92 	bl	8001558 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e034      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e46:	4b1d      	ldr	r3, [pc, #116]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0ee      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e5e:	d10d      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003e60:	4b16      	ldr	r3, [pc, #88]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e74:	4911      	ldr	r1, [pc, #68]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	608b      	str	r3, [r1, #8]
 8003e7a:	e005      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003e7c:	4b0f      	ldr	r3, [pc, #60]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	4a0e      	ldr	r2, [pc, #56]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e82:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e86:	6093      	str	r3, [r2, #8]
 8003e88:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e94:	4909      	ldr	r1, [pc, #36]	; (8003ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	7d1a      	ldrb	r2, [r3, #20]
 8003eaa:	4b07      	ldr	r3, [pc, #28]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003eac:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	42470068 	.word	0x42470068
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	40007000 	.word	0x40007000
 8003ec4:	42470e40 	.word	0x42470e40
 8003ec8:	424711e0 	.word	0x424711e0

08003ecc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d140      	bne.n	8003f6c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003eea:	4b24      	ldr	r3, [pc, #144]	; (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d005      	beq.n	8003f06 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d131      	bne.n	8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003f00:	4b1f      	ldr	r3, [pc, #124]	; (8003f80 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003f02:	617b      	str	r3, [r7, #20]
          break;
 8003f04:	e031      	b.n	8003f6a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003f06:	4b1d      	ldr	r3, [pc, #116]	; (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f12:	d109      	bne.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003f14:	4b19      	ldr	r3, [pc, #100]	; (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f1e:	4a19      	ldr	r2, [pc, #100]	; (8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	e008      	b.n	8003f3a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003f28:	4b14      	ldr	r3, [pc, #80]	; (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f32:	4a15      	ldr	r2, [pc, #84]	; (8003f88 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f38:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003f3a:	4b10      	ldr	r3, [pc, #64]	; (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f40:	099b      	lsrs	r3, r3, #6
 8003f42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	fb02 f303 	mul.w	r3, r2, r3
 8003f4c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003f4e:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f54:	0f1b      	lsrs	r3, r3, #28
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f60:	617b      	str	r3, [r7, #20]
          break;
 8003f62:	e002      	b.n	8003f6a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]
          break;
 8003f68:	bf00      	nop
        }
      }
      break;
 8003f6a:	bf00      	nop
    }
  }
  return frequency;
 8003f6c:	697b      	ldr	r3, [r7, #20]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	371c      	adds	r7, #28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	00bb8000 	.word	0x00bb8000
 8003f84:	007a1200 	.word	0x007a1200
 8003f88:	00f42400 	.word	0x00f42400

08003f8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e07b      	b.n	8004096 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d108      	bne.n	8003fb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fae:	d009      	beq.n	8003fc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	61da      	str	r2, [r3, #28]
 8003fb6:	e005      	b.n	8003fc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d106      	bne.n	8003fe4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7fd f91e 	bl	8001220 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ffa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800400c:	431a      	orrs	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	431a      	orrs	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004034:	431a      	orrs	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004048:	ea42 0103 	orr.w	r1, r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004050:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	0c1b      	lsrs	r3, r3, #16
 8004062:	f003 0104 	and.w	r1, r3, #4
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	f003 0210 	and.w	r2, r3, #16
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69da      	ldr	r2, [r3, #28]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004084:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
	...

080040a0 <__errno>:
 80040a0:	4b01      	ldr	r3, [pc, #4]	; (80040a8 <__errno+0x8>)
 80040a2:	6818      	ldr	r0, [r3, #0]
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	2000000c 	.word	0x2000000c

080040ac <__libc_init_array>:
 80040ac:	b570      	push	{r4, r5, r6, lr}
 80040ae:	4d0d      	ldr	r5, [pc, #52]	; (80040e4 <__libc_init_array+0x38>)
 80040b0:	4c0d      	ldr	r4, [pc, #52]	; (80040e8 <__libc_init_array+0x3c>)
 80040b2:	1b64      	subs	r4, r4, r5
 80040b4:	10a4      	asrs	r4, r4, #2
 80040b6:	2600      	movs	r6, #0
 80040b8:	42a6      	cmp	r6, r4
 80040ba:	d109      	bne.n	80040d0 <__libc_init_array+0x24>
 80040bc:	4d0b      	ldr	r5, [pc, #44]	; (80040ec <__libc_init_array+0x40>)
 80040be:	4c0c      	ldr	r4, [pc, #48]	; (80040f0 <__libc_init_array+0x44>)
 80040c0:	f001 f882 	bl	80051c8 <_init>
 80040c4:	1b64      	subs	r4, r4, r5
 80040c6:	10a4      	asrs	r4, r4, #2
 80040c8:	2600      	movs	r6, #0
 80040ca:	42a6      	cmp	r6, r4
 80040cc:	d105      	bne.n	80040da <__libc_init_array+0x2e>
 80040ce:	bd70      	pop	{r4, r5, r6, pc}
 80040d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040d4:	4798      	blx	r3
 80040d6:	3601      	adds	r6, #1
 80040d8:	e7ee      	b.n	80040b8 <__libc_init_array+0xc>
 80040da:	f855 3b04 	ldr.w	r3, [r5], #4
 80040de:	4798      	blx	r3
 80040e0:	3601      	adds	r6, #1
 80040e2:	e7f2      	b.n	80040ca <__libc_init_array+0x1e>
 80040e4:	080053dc 	.word	0x080053dc
 80040e8:	080053dc 	.word	0x080053dc
 80040ec:	080053dc 	.word	0x080053dc
 80040f0:	080053e0 	.word	0x080053e0

080040f4 <memset>:
 80040f4:	4402      	add	r2, r0
 80040f6:	4603      	mov	r3, r0
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d100      	bne.n	80040fe <memset+0xa>
 80040fc:	4770      	bx	lr
 80040fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004102:	e7f9      	b.n	80040f8 <memset+0x4>

08004104 <iprintf>:
 8004104:	b40f      	push	{r0, r1, r2, r3}
 8004106:	4b0a      	ldr	r3, [pc, #40]	; (8004130 <iprintf+0x2c>)
 8004108:	b513      	push	{r0, r1, r4, lr}
 800410a:	681c      	ldr	r4, [r3, #0]
 800410c:	b124      	cbz	r4, 8004118 <iprintf+0x14>
 800410e:	69a3      	ldr	r3, [r4, #24]
 8004110:	b913      	cbnz	r3, 8004118 <iprintf+0x14>
 8004112:	4620      	mov	r0, r4
 8004114:	f000 fa74 	bl	8004600 <__sinit>
 8004118:	ab05      	add	r3, sp, #20
 800411a:	9a04      	ldr	r2, [sp, #16]
 800411c:	68a1      	ldr	r1, [r4, #8]
 800411e:	9301      	str	r3, [sp, #4]
 8004120:	4620      	mov	r0, r4
 8004122:	f000 fc7d 	bl	8004a20 <_vfiprintf_r>
 8004126:	b002      	add	sp, #8
 8004128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800412c:	b004      	add	sp, #16
 800412e:	4770      	bx	lr
 8004130:	2000000c 	.word	0x2000000c

08004134 <putchar>:
 8004134:	4b09      	ldr	r3, [pc, #36]	; (800415c <putchar+0x28>)
 8004136:	b513      	push	{r0, r1, r4, lr}
 8004138:	681c      	ldr	r4, [r3, #0]
 800413a:	4601      	mov	r1, r0
 800413c:	b134      	cbz	r4, 800414c <putchar+0x18>
 800413e:	69a3      	ldr	r3, [r4, #24]
 8004140:	b923      	cbnz	r3, 800414c <putchar+0x18>
 8004142:	9001      	str	r0, [sp, #4]
 8004144:	4620      	mov	r0, r4
 8004146:	f000 fa5b 	bl	8004600 <__sinit>
 800414a:	9901      	ldr	r1, [sp, #4]
 800414c:	68a2      	ldr	r2, [r4, #8]
 800414e:	4620      	mov	r0, r4
 8004150:	b002      	add	sp, #8
 8004152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004156:	f000 bf27 	b.w	8004fa8 <_putc_r>
 800415a:	bf00      	nop
 800415c:	2000000c 	.word	0x2000000c

08004160 <_puts_r>:
 8004160:	b570      	push	{r4, r5, r6, lr}
 8004162:	460e      	mov	r6, r1
 8004164:	4605      	mov	r5, r0
 8004166:	b118      	cbz	r0, 8004170 <_puts_r+0x10>
 8004168:	6983      	ldr	r3, [r0, #24]
 800416a:	b90b      	cbnz	r3, 8004170 <_puts_r+0x10>
 800416c:	f000 fa48 	bl	8004600 <__sinit>
 8004170:	69ab      	ldr	r3, [r5, #24]
 8004172:	68ac      	ldr	r4, [r5, #8]
 8004174:	b913      	cbnz	r3, 800417c <_puts_r+0x1c>
 8004176:	4628      	mov	r0, r5
 8004178:	f000 fa42 	bl	8004600 <__sinit>
 800417c:	4b2c      	ldr	r3, [pc, #176]	; (8004230 <_puts_r+0xd0>)
 800417e:	429c      	cmp	r4, r3
 8004180:	d120      	bne.n	80041c4 <_puts_r+0x64>
 8004182:	686c      	ldr	r4, [r5, #4]
 8004184:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004186:	07db      	lsls	r3, r3, #31
 8004188:	d405      	bmi.n	8004196 <_puts_r+0x36>
 800418a:	89a3      	ldrh	r3, [r4, #12]
 800418c:	0598      	lsls	r0, r3, #22
 800418e:	d402      	bmi.n	8004196 <_puts_r+0x36>
 8004190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004192:	f000 fad3 	bl	800473c <__retarget_lock_acquire_recursive>
 8004196:	89a3      	ldrh	r3, [r4, #12]
 8004198:	0719      	lsls	r1, r3, #28
 800419a:	d51d      	bpl.n	80041d8 <_puts_r+0x78>
 800419c:	6923      	ldr	r3, [r4, #16]
 800419e:	b1db      	cbz	r3, 80041d8 <_puts_r+0x78>
 80041a0:	3e01      	subs	r6, #1
 80041a2:	68a3      	ldr	r3, [r4, #8]
 80041a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80041a8:	3b01      	subs	r3, #1
 80041aa:	60a3      	str	r3, [r4, #8]
 80041ac:	bb39      	cbnz	r1, 80041fe <_puts_r+0x9e>
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	da38      	bge.n	8004224 <_puts_r+0xc4>
 80041b2:	4622      	mov	r2, r4
 80041b4:	210a      	movs	r1, #10
 80041b6:	4628      	mov	r0, r5
 80041b8:	f000 f848 	bl	800424c <__swbuf_r>
 80041bc:	3001      	adds	r0, #1
 80041be:	d011      	beq.n	80041e4 <_puts_r+0x84>
 80041c0:	250a      	movs	r5, #10
 80041c2:	e011      	b.n	80041e8 <_puts_r+0x88>
 80041c4:	4b1b      	ldr	r3, [pc, #108]	; (8004234 <_puts_r+0xd4>)
 80041c6:	429c      	cmp	r4, r3
 80041c8:	d101      	bne.n	80041ce <_puts_r+0x6e>
 80041ca:	68ac      	ldr	r4, [r5, #8]
 80041cc:	e7da      	b.n	8004184 <_puts_r+0x24>
 80041ce:	4b1a      	ldr	r3, [pc, #104]	; (8004238 <_puts_r+0xd8>)
 80041d0:	429c      	cmp	r4, r3
 80041d2:	bf08      	it	eq
 80041d4:	68ec      	ldreq	r4, [r5, #12]
 80041d6:	e7d5      	b.n	8004184 <_puts_r+0x24>
 80041d8:	4621      	mov	r1, r4
 80041da:	4628      	mov	r0, r5
 80041dc:	f000 f888 	bl	80042f0 <__swsetup_r>
 80041e0:	2800      	cmp	r0, #0
 80041e2:	d0dd      	beq.n	80041a0 <_puts_r+0x40>
 80041e4:	f04f 35ff 	mov.w	r5, #4294967295
 80041e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041ea:	07da      	lsls	r2, r3, #31
 80041ec:	d405      	bmi.n	80041fa <_puts_r+0x9a>
 80041ee:	89a3      	ldrh	r3, [r4, #12]
 80041f0:	059b      	lsls	r3, r3, #22
 80041f2:	d402      	bmi.n	80041fa <_puts_r+0x9a>
 80041f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041f6:	f000 faa2 	bl	800473e <__retarget_lock_release_recursive>
 80041fa:	4628      	mov	r0, r5
 80041fc:	bd70      	pop	{r4, r5, r6, pc}
 80041fe:	2b00      	cmp	r3, #0
 8004200:	da04      	bge.n	800420c <_puts_r+0xac>
 8004202:	69a2      	ldr	r2, [r4, #24]
 8004204:	429a      	cmp	r2, r3
 8004206:	dc06      	bgt.n	8004216 <_puts_r+0xb6>
 8004208:	290a      	cmp	r1, #10
 800420a:	d004      	beq.n	8004216 <_puts_r+0xb6>
 800420c:	6823      	ldr	r3, [r4, #0]
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	6022      	str	r2, [r4, #0]
 8004212:	7019      	strb	r1, [r3, #0]
 8004214:	e7c5      	b.n	80041a2 <_puts_r+0x42>
 8004216:	4622      	mov	r2, r4
 8004218:	4628      	mov	r0, r5
 800421a:	f000 f817 	bl	800424c <__swbuf_r>
 800421e:	3001      	adds	r0, #1
 8004220:	d1bf      	bne.n	80041a2 <_puts_r+0x42>
 8004222:	e7df      	b.n	80041e4 <_puts_r+0x84>
 8004224:	6823      	ldr	r3, [r4, #0]
 8004226:	250a      	movs	r5, #10
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	6022      	str	r2, [r4, #0]
 800422c:	701d      	strb	r5, [r3, #0]
 800422e:	e7db      	b.n	80041e8 <_puts_r+0x88>
 8004230:	08005360 	.word	0x08005360
 8004234:	08005380 	.word	0x08005380
 8004238:	08005340 	.word	0x08005340

0800423c <puts>:
 800423c:	4b02      	ldr	r3, [pc, #8]	; (8004248 <puts+0xc>)
 800423e:	4601      	mov	r1, r0
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	f7ff bf8d 	b.w	8004160 <_puts_r>
 8004246:	bf00      	nop
 8004248:	2000000c 	.word	0x2000000c

0800424c <__swbuf_r>:
 800424c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424e:	460e      	mov	r6, r1
 8004250:	4614      	mov	r4, r2
 8004252:	4605      	mov	r5, r0
 8004254:	b118      	cbz	r0, 800425e <__swbuf_r+0x12>
 8004256:	6983      	ldr	r3, [r0, #24]
 8004258:	b90b      	cbnz	r3, 800425e <__swbuf_r+0x12>
 800425a:	f000 f9d1 	bl	8004600 <__sinit>
 800425e:	4b21      	ldr	r3, [pc, #132]	; (80042e4 <__swbuf_r+0x98>)
 8004260:	429c      	cmp	r4, r3
 8004262:	d12b      	bne.n	80042bc <__swbuf_r+0x70>
 8004264:	686c      	ldr	r4, [r5, #4]
 8004266:	69a3      	ldr	r3, [r4, #24]
 8004268:	60a3      	str	r3, [r4, #8]
 800426a:	89a3      	ldrh	r3, [r4, #12]
 800426c:	071a      	lsls	r2, r3, #28
 800426e:	d52f      	bpl.n	80042d0 <__swbuf_r+0x84>
 8004270:	6923      	ldr	r3, [r4, #16]
 8004272:	b36b      	cbz	r3, 80042d0 <__swbuf_r+0x84>
 8004274:	6923      	ldr	r3, [r4, #16]
 8004276:	6820      	ldr	r0, [r4, #0]
 8004278:	1ac0      	subs	r0, r0, r3
 800427a:	6963      	ldr	r3, [r4, #20]
 800427c:	b2f6      	uxtb	r6, r6
 800427e:	4283      	cmp	r3, r0
 8004280:	4637      	mov	r7, r6
 8004282:	dc04      	bgt.n	800428e <__swbuf_r+0x42>
 8004284:	4621      	mov	r1, r4
 8004286:	4628      	mov	r0, r5
 8004288:	f000 f926 	bl	80044d8 <_fflush_r>
 800428c:	bb30      	cbnz	r0, 80042dc <__swbuf_r+0x90>
 800428e:	68a3      	ldr	r3, [r4, #8]
 8004290:	3b01      	subs	r3, #1
 8004292:	60a3      	str	r3, [r4, #8]
 8004294:	6823      	ldr	r3, [r4, #0]
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	6022      	str	r2, [r4, #0]
 800429a:	701e      	strb	r6, [r3, #0]
 800429c:	6963      	ldr	r3, [r4, #20]
 800429e:	3001      	adds	r0, #1
 80042a0:	4283      	cmp	r3, r0
 80042a2:	d004      	beq.n	80042ae <__swbuf_r+0x62>
 80042a4:	89a3      	ldrh	r3, [r4, #12]
 80042a6:	07db      	lsls	r3, r3, #31
 80042a8:	d506      	bpl.n	80042b8 <__swbuf_r+0x6c>
 80042aa:	2e0a      	cmp	r6, #10
 80042ac:	d104      	bne.n	80042b8 <__swbuf_r+0x6c>
 80042ae:	4621      	mov	r1, r4
 80042b0:	4628      	mov	r0, r5
 80042b2:	f000 f911 	bl	80044d8 <_fflush_r>
 80042b6:	b988      	cbnz	r0, 80042dc <__swbuf_r+0x90>
 80042b8:	4638      	mov	r0, r7
 80042ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042bc:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <__swbuf_r+0x9c>)
 80042be:	429c      	cmp	r4, r3
 80042c0:	d101      	bne.n	80042c6 <__swbuf_r+0x7a>
 80042c2:	68ac      	ldr	r4, [r5, #8]
 80042c4:	e7cf      	b.n	8004266 <__swbuf_r+0x1a>
 80042c6:	4b09      	ldr	r3, [pc, #36]	; (80042ec <__swbuf_r+0xa0>)
 80042c8:	429c      	cmp	r4, r3
 80042ca:	bf08      	it	eq
 80042cc:	68ec      	ldreq	r4, [r5, #12]
 80042ce:	e7ca      	b.n	8004266 <__swbuf_r+0x1a>
 80042d0:	4621      	mov	r1, r4
 80042d2:	4628      	mov	r0, r5
 80042d4:	f000 f80c 	bl	80042f0 <__swsetup_r>
 80042d8:	2800      	cmp	r0, #0
 80042da:	d0cb      	beq.n	8004274 <__swbuf_r+0x28>
 80042dc:	f04f 37ff 	mov.w	r7, #4294967295
 80042e0:	e7ea      	b.n	80042b8 <__swbuf_r+0x6c>
 80042e2:	bf00      	nop
 80042e4:	08005360 	.word	0x08005360
 80042e8:	08005380 	.word	0x08005380
 80042ec:	08005340 	.word	0x08005340

080042f0 <__swsetup_r>:
 80042f0:	4b32      	ldr	r3, [pc, #200]	; (80043bc <__swsetup_r+0xcc>)
 80042f2:	b570      	push	{r4, r5, r6, lr}
 80042f4:	681d      	ldr	r5, [r3, #0]
 80042f6:	4606      	mov	r6, r0
 80042f8:	460c      	mov	r4, r1
 80042fa:	b125      	cbz	r5, 8004306 <__swsetup_r+0x16>
 80042fc:	69ab      	ldr	r3, [r5, #24]
 80042fe:	b913      	cbnz	r3, 8004306 <__swsetup_r+0x16>
 8004300:	4628      	mov	r0, r5
 8004302:	f000 f97d 	bl	8004600 <__sinit>
 8004306:	4b2e      	ldr	r3, [pc, #184]	; (80043c0 <__swsetup_r+0xd0>)
 8004308:	429c      	cmp	r4, r3
 800430a:	d10f      	bne.n	800432c <__swsetup_r+0x3c>
 800430c:	686c      	ldr	r4, [r5, #4]
 800430e:	89a3      	ldrh	r3, [r4, #12]
 8004310:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004314:	0719      	lsls	r1, r3, #28
 8004316:	d42c      	bmi.n	8004372 <__swsetup_r+0x82>
 8004318:	06dd      	lsls	r5, r3, #27
 800431a:	d411      	bmi.n	8004340 <__swsetup_r+0x50>
 800431c:	2309      	movs	r3, #9
 800431e:	6033      	str	r3, [r6, #0]
 8004320:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004324:	81a3      	strh	r3, [r4, #12]
 8004326:	f04f 30ff 	mov.w	r0, #4294967295
 800432a:	e03e      	b.n	80043aa <__swsetup_r+0xba>
 800432c:	4b25      	ldr	r3, [pc, #148]	; (80043c4 <__swsetup_r+0xd4>)
 800432e:	429c      	cmp	r4, r3
 8004330:	d101      	bne.n	8004336 <__swsetup_r+0x46>
 8004332:	68ac      	ldr	r4, [r5, #8]
 8004334:	e7eb      	b.n	800430e <__swsetup_r+0x1e>
 8004336:	4b24      	ldr	r3, [pc, #144]	; (80043c8 <__swsetup_r+0xd8>)
 8004338:	429c      	cmp	r4, r3
 800433a:	bf08      	it	eq
 800433c:	68ec      	ldreq	r4, [r5, #12]
 800433e:	e7e6      	b.n	800430e <__swsetup_r+0x1e>
 8004340:	0758      	lsls	r0, r3, #29
 8004342:	d512      	bpl.n	800436a <__swsetup_r+0x7a>
 8004344:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004346:	b141      	cbz	r1, 800435a <__swsetup_r+0x6a>
 8004348:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800434c:	4299      	cmp	r1, r3
 800434e:	d002      	beq.n	8004356 <__swsetup_r+0x66>
 8004350:	4630      	mov	r0, r6
 8004352:	f000 fa5b 	bl	800480c <_free_r>
 8004356:	2300      	movs	r3, #0
 8004358:	6363      	str	r3, [r4, #52]	; 0x34
 800435a:	89a3      	ldrh	r3, [r4, #12]
 800435c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004360:	81a3      	strh	r3, [r4, #12]
 8004362:	2300      	movs	r3, #0
 8004364:	6063      	str	r3, [r4, #4]
 8004366:	6923      	ldr	r3, [r4, #16]
 8004368:	6023      	str	r3, [r4, #0]
 800436a:	89a3      	ldrh	r3, [r4, #12]
 800436c:	f043 0308 	orr.w	r3, r3, #8
 8004370:	81a3      	strh	r3, [r4, #12]
 8004372:	6923      	ldr	r3, [r4, #16]
 8004374:	b94b      	cbnz	r3, 800438a <__swsetup_r+0x9a>
 8004376:	89a3      	ldrh	r3, [r4, #12]
 8004378:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800437c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004380:	d003      	beq.n	800438a <__swsetup_r+0x9a>
 8004382:	4621      	mov	r1, r4
 8004384:	4630      	mov	r0, r6
 8004386:	f000 fa01 	bl	800478c <__smakebuf_r>
 800438a:	89a0      	ldrh	r0, [r4, #12]
 800438c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004390:	f010 0301 	ands.w	r3, r0, #1
 8004394:	d00a      	beq.n	80043ac <__swsetup_r+0xbc>
 8004396:	2300      	movs	r3, #0
 8004398:	60a3      	str	r3, [r4, #8]
 800439a:	6963      	ldr	r3, [r4, #20]
 800439c:	425b      	negs	r3, r3
 800439e:	61a3      	str	r3, [r4, #24]
 80043a0:	6923      	ldr	r3, [r4, #16]
 80043a2:	b943      	cbnz	r3, 80043b6 <__swsetup_r+0xc6>
 80043a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80043a8:	d1ba      	bne.n	8004320 <__swsetup_r+0x30>
 80043aa:	bd70      	pop	{r4, r5, r6, pc}
 80043ac:	0781      	lsls	r1, r0, #30
 80043ae:	bf58      	it	pl
 80043b0:	6963      	ldrpl	r3, [r4, #20]
 80043b2:	60a3      	str	r3, [r4, #8]
 80043b4:	e7f4      	b.n	80043a0 <__swsetup_r+0xb0>
 80043b6:	2000      	movs	r0, #0
 80043b8:	e7f7      	b.n	80043aa <__swsetup_r+0xba>
 80043ba:	bf00      	nop
 80043bc:	2000000c 	.word	0x2000000c
 80043c0:	08005360 	.word	0x08005360
 80043c4:	08005380 	.word	0x08005380
 80043c8:	08005340 	.word	0x08005340

080043cc <__sflush_r>:
 80043cc:	898a      	ldrh	r2, [r1, #12]
 80043ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043d2:	4605      	mov	r5, r0
 80043d4:	0710      	lsls	r0, r2, #28
 80043d6:	460c      	mov	r4, r1
 80043d8:	d458      	bmi.n	800448c <__sflush_r+0xc0>
 80043da:	684b      	ldr	r3, [r1, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	dc05      	bgt.n	80043ec <__sflush_r+0x20>
 80043e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	dc02      	bgt.n	80043ec <__sflush_r+0x20>
 80043e6:	2000      	movs	r0, #0
 80043e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043ee:	2e00      	cmp	r6, #0
 80043f0:	d0f9      	beq.n	80043e6 <__sflush_r+0x1a>
 80043f2:	2300      	movs	r3, #0
 80043f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80043f8:	682f      	ldr	r7, [r5, #0]
 80043fa:	602b      	str	r3, [r5, #0]
 80043fc:	d032      	beq.n	8004464 <__sflush_r+0x98>
 80043fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004400:	89a3      	ldrh	r3, [r4, #12]
 8004402:	075a      	lsls	r2, r3, #29
 8004404:	d505      	bpl.n	8004412 <__sflush_r+0x46>
 8004406:	6863      	ldr	r3, [r4, #4]
 8004408:	1ac0      	subs	r0, r0, r3
 800440a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800440c:	b10b      	cbz	r3, 8004412 <__sflush_r+0x46>
 800440e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004410:	1ac0      	subs	r0, r0, r3
 8004412:	2300      	movs	r3, #0
 8004414:	4602      	mov	r2, r0
 8004416:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004418:	6a21      	ldr	r1, [r4, #32]
 800441a:	4628      	mov	r0, r5
 800441c:	47b0      	blx	r6
 800441e:	1c43      	adds	r3, r0, #1
 8004420:	89a3      	ldrh	r3, [r4, #12]
 8004422:	d106      	bne.n	8004432 <__sflush_r+0x66>
 8004424:	6829      	ldr	r1, [r5, #0]
 8004426:	291d      	cmp	r1, #29
 8004428:	d82c      	bhi.n	8004484 <__sflush_r+0xb8>
 800442a:	4a2a      	ldr	r2, [pc, #168]	; (80044d4 <__sflush_r+0x108>)
 800442c:	40ca      	lsrs	r2, r1
 800442e:	07d6      	lsls	r6, r2, #31
 8004430:	d528      	bpl.n	8004484 <__sflush_r+0xb8>
 8004432:	2200      	movs	r2, #0
 8004434:	6062      	str	r2, [r4, #4]
 8004436:	04d9      	lsls	r1, r3, #19
 8004438:	6922      	ldr	r2, [r4, #16]
 800443a:	6022      	str	r2, [r4, #0]
 800443c:	d504      	bpl.n	8004448 <__sflush_r+0x7c>
 800443e:	1c42      	adds	r2, r0, #1
 8004440:	d101      	bne.n	8004446 <__sflush_r+0x7a>
 8004442:	682b      	ldr	r3, [r5, #0]
 8004444:	b903      	cbnz	r3, 8004448 <__sflush_r+0x7c>
 8004446:	6560      	str	r0, [r4, #84]	; 0x54
 8004448:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800444a:	602f      	str	r7, [r5, #0]
 800444c:	2900      	cmp	r1, #0
 800444e:	d0ca      	beq.n	80043e6 <__sflush_r+0x1a>
 8004450:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004454:	4299      	cmp	r1, r3
 8004456:	d002      	beq.n	800445e <__sflush_r+0x92>
 8004458:	4628      	mov	r0, r5
 800445a:	f000 f9d7 	bl	800480c <_free_r>
 800445e:	2000      	movs	r0, #0
 8004460:	6360      	str	r0, [r4, #52]	; 0x34
 8004462:	e7c1      	b.n	80043e8 <__sflush_r+0x1c>
 8004464:	6a21      	ldr	r1, [r4, #32]
 8004466:	2301      	movs	r3, #1
 8004468:	4628      	mov	r0, r5
 800446a:	47b0      	blx	r6
 800446c:	1c41      	adds	r1, r0, #1
 800446e:	d1c7      	bne.n	8004400 <__sflush_r+0x34>
 8004470:	682b      	ldr	r3, [r5, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0c4      	beq.n	8004400 <__sflush_r+0x34>
 8004476:	2b1d      	cmp	r3, #29
 8004478:	d001      	beq.n	800447e <__sflush_r+0xb2>
 800447a:	2b16      	cmp	r3, #22
 800447c:	d101      	bne.n	8004482 <__sflush_r+0xb6>
 800447e:	602f      	str	r7, [r5, #0]
 8004480:	e7b1      	b.n	80043e6 <__sflush_r+0x1a>
 8004482:	89a3      	ldrh	r3, [r4, #12]
 8004484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004488:	81a3      	strh	r3, [r4, #12]
 800448a:	e7ad      	b.n	80043e8 <__sflush_r+0x1c>
 800448c:	690f      	ldr	r7, [r1, #16]
 800448e:	2f00      	cmp	r7, #0
 8004490:	d0a9      	beq.n	80043e6 <__sflush_r+0x1a>
 8004492:	0793      	lsls	r3, r2, #30
 8004494:	680e      	ldr	r6, [r1, #0]
 8004496:	bf08      	it	eq
 8004498:	694b      	ldreq	r3, [r1, #20]
 800449a:	600f      	str	r7, [r1, #0]
 800449c:	bf18      	it	ne
 800449e:	2300      	movne	r3, #0
 80044a0:	eba6 0807 	sub.w	r8, r6, r7
 80044a4:	608b      	str	r3, [r1, #8]
 80044a6:	f1b8 0f00 	cmp.w	r8, #0
 80044aa:	dd9c      	ble.n	80043e6 <__sflush_r+0x1a>
 80044ac:	6a21      	ldr	r1, [r4, #32]
 80044ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80044b0:	4643      	mov	r3, r8
 80044b2:	463a      	mov	r2, r7
 80044b4:	4628      	mov	r0, r5
 80044b6:	47b0      	blx	r6
 80044b8:	2800      	cmp	r0, #0
 80044ba:	dc06      	bgt.n	80044ca <__sflush_r+0xfe>
 80044bc:	89a3      	ldrh	r3, [r4, #12]
 80044be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044c2:	81a3      	strh	r3, [r4, #12]
 80044c4:	f04f 30ff 	mov.w	r0, #4294967295
 80044c8:	e78e      	b.n	80043e8 <__sflush_r+0x1c>
 80044ca:	4407      	add	r7, r0
 80044cc:	eba8 0800 	sub.w	r8, r8, r0
 80044d0:	e7e9      	b.n	80044a6 <__sflush_r+0xda>
 80044d2:	bf00      	nop
 80044d4:	20400001 	.word	0x20400001

080044d8 <_fflush_r>:
 80044d8:	b538      	push	{r3, r4, r5, lr}
 80044da:	690b      	ldr	r3, [r1, #16]
 80044dc:	4605      	mov	r5, r0
 80044de:	460c      	mov	r4, r1
 80044e0:	b913      	cbnz	r3, 80044e8 <_fflush_r+0x10>
 80044e2:	2500      	movs	r5, #0
 80044e4:	4628      	mov	r0, r5
 80044e6:	bd38      	pop	{r3, r4, r5, pc}
 80044e8:	b118      	cbz	r0, 80044f2 <_fflush_r+0x1a>
 80044ea:	6983      	ldr	r3, [r0, #24]
 80044ec:	b90b      	cbnz	r3, 80044f2 <_fflush_r+0x1a>
 80044ee:	f000 f887 	bl	8004600 <__sinit>
 80044f2:	4b14      	ldr	r3, [pc, #80]	; (8004544 <_fflush_r+0x6c>)
 80044f4:	429c      	cmp	r4, r3
 80044f6:	d11b      	bne.n	8004530 <_fflush_r+0x58>
 80044f8:	686c      	ldr	r4, [r5, #4]
 80044fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0ef      	beq.n	80044e2 <_fflush_r+0xa>
 8004502:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004504:	07d0      	lsls	r0, r2, #31
 8004506:	d404      	bmi.n	8004512 <_fflush_r+0x3a>
 8004508:	0599      	lsls	r1, r3, #22
 800450a:	d402      	bmi.n	8004512 <_fflush_r+0x3a>
 800450c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800450e:	f000 f915 	bl	800473c <__retarget_lock_acquire_recursive>
 8004512:	4628      	mov	r0, r5
 8004514:	4621      	mov	r1, r4
 8004516:	f7ff ff59 	bl	80043cc <__sflush_r>
 800451a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800451c:	07da      	lsls	r2, r3, #31
 800451e:	4605      	mov	r5, r0
 8004520:	d4e0      	bmi.n	80044e4 <_fflush_r+0xc>
 8004522:	89a3      	ldrh	r3, [r4, #12]
 8004524:	059b      	lsls	r3, r3, #22
 8004526:	d4dd      	bmi.n	80044e4 <_fflush_r+0xc>
 8004528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800452a:	f000 f908 	bl	800473e <__retarget_lock_release_recursive>
 800452e:	e7d9      	b.n	80044e4 <_fflush_r+0xc>
 8004530:	4b05      	ldr	r3, [pc, #20]	; (8004548 <_fflush_r+0x70>)
 8004532:	429c      	cmp	r4, r3
 8004534:	d101      	bne.n	800453a <_fflush_r+0x62>
 8004536:	68ac      	ldr	r4, [r5, #8]
 8004538:	e7df      	b.n	80044fa <_fflush_r+0x22>
 800453a:	4b04      	ldr	r3, [pc, #16]	; (800454c <_fflush_r+0x74>)
 800453c:	429c      	cmp	r4, r3
 800453e:	bf08      	it	eq
 8004540:	68ec      	ldreq	r4, [r5, #12]
 8004542:	e7da      	b.n	80044fa <_fflush_r+0x22>
 8004544:	08005360 	.word	0x08005360
 8004548:	08005380 	.word	0x08005380
 800454c:	08005340 	.word	0x08005340

08004550 <std>:
 8004550:	2300      	movs	r3, #0
 8004552:	b510      	push	{r4, lr}
 8004554:	4604      	mov	r4, r0
 8004556:	e9c0 3300 	strd	r3, r3, [r0]
 800455a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800455e:	6083      	str	r3, [r0, #8]
 8004560:	8181      	strh	r1, [r0, #12]
 8004562:	6643      	str	r3, [r0, #100]	; 0x64
 8004564:	81c2      	strh	r2, [r0, #14]
 8004566:	6183      	str	r3, [r0, #24]
 8004568:	4619      	mov	r1, r3
 800456a:	2208      	movs	r2, #8
 800456c:	305c      	adds	r0, #92	; 0x5c
 800456e:	f7ff fdc1 	bl	80040f4 <memset>
 8004572:	4b05      	ldr	r3, [pc, #20]	; (8004588 <std+0x38>)
 8004574:	6263      	str	r3, [r4, #36]	; 0x24
 8004576:	4b05      	ldr	r3, [pc, #20]	; (800458c <std+0x3c>)
 8004578:	62a3      	str	r3, [r4, #40]	; 0x28
 800457a:	4b05      	ldr	r3, [pc, #20]	; (8004590 <std+0x40>)
 800457c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800457e:	4b05      	ldr	r3, [pc, #20]	; (8004594 <std+0x44>)
 8004580:	6224      	str	r4, [r4, #32]
 8004582:	6323      	str	r3, [r4, #48]	; 0x30
 8004584:	bd10      	pop	{r4, pc}
 8004586:	bf00      	nop
 8004588:	08005059 	.word	0x08005059
 800458c:	0800507b 	.word	0x0800507b
 8004590:	080050b3 	.word	0x080050b3
 8004594:	080050d7 	.word	0x080050d7

08004598 <_cleanup_r>:
 8004598:	4901      	ldr	r1, [pc, #4]	; (80045a0 <_cleanup_r+0x8>)
 800459a:	f000 b8af 	b.w	80046fc <_fwalk_reent>
 800459e:	bf00      	nop
 80045a0:	080044d9 	.word	0x080044d9

080045a4 <__sfmoreglue>:
 80045a4:	b570      	push	{r4, r5, r6, lr}
 80045a6:	2268      	movs	r2, #104	; 0x68
 80045a8:	1e4d      	subs	r5, r1, #1
 80045aa:	4355      	muls	r5, r2
 80045ac:	460e      	mov	r6, r1
 80045ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80045b2:	f000 f997 	bl	80048e4 <_malloc_r>
 80045b6:	4604      	mov	r4, r0
 80045b8:	b140      	cbz	r0, 80045cc <__sfmoreglue+0x28>
 80045ba:	2100      	movs	r1, #0
 80045bc:	e9c0 1600 	strd	r1, r6, [r0]
 80045c0:	300c      	adds	r0, #12
 80045c2:	60a0      	str	r0, [r4, #8]
 80045c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80045c8:	f7ff fd94 	bl	80040f4 <memset>
 80045cc:	4620      	mov	r0, r4
 80045ce:	bd70      	pop	{r4, r5, r6, pc}

080045d0 <__sfp_lock_acquire>:
 80045d0:	4801      	ldr	r0, [pc, #4]	; (80045d8 <__sfp_lock_acquire+0x8>)
 80045d2:	f000 b8b3 	b.w	800473c <__retarget_lock_acquire_recursive>
 80045d6:	bf00      	nop
 80045d8:	200001d1 	.word	0x200001d1

080045dc <__sfp_lock_release>:
 80045dc:	4801      	ldr	r0, [pc, #4]	; (80045e4 <__sfp_lock_release+0x8>)
 80045de:	f000 b8ae 	b.w	800473e <__retarget_lock_release_recursive>
 80045e2:	bf00      	nop
 80045e4:	200001d1 	.word	0x200001d1

080045e8 <__sinit_lock_acquire>:
 80045e8:	4801      	ldr	r0, [pc, #4]	; (80045f0 <__sinit_lock_acquire+0x8>)
 80045ea:	f000 b8a7 	b.w	800473c <__retarget_lock_acquire_recursive>
 80045ee:	bf00      	nop
 80045f0:	200001d2 	.word	0x200001d2

080045f4 <__sinit_lock_release>:
 80045f4:	4801      	ldr	r0, [pc, #4]	; (80045fc <__sinit_lock_release+0x8>)
 80045f6:	f000 b8a2 	b.w	800473e <__retarget_lock_release_recursive>
 80045fa:	bf00      	nop
 80045fc:	200001d2 	.word	0x200001d2

08004600 <__sinit>:
 8004600:	b510      	push	{r4, lr}
 8004602:	4604      	mov	r4, r0
 8004604:	f7ff fff0 	bl	80045e8 <__sinit_lock_acquire>
 8004608:	69a3      	ldr	r3, [r4, #24]
 800460a:	b11b      	cbz	r3, 8004614 <__sinit+0x14>
 800460c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004610:	f7ff bff0 	b.w	80045f4 <__sinit_lock_release>
 8004614:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004618:	6523      	str	r3, [r4, #80]	; 0x50
 800461a:	4b13      	ldr	r3, [pc, #76]	; (8004668 <__sinit+0x68>)
 800461c:	4a13      	ldr	r2, [pc, #76]	; (800466c <__sinit+0x6c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	62a2      	str	r2, [r4, #40]	; 0x28
 8004622:	42a3      	cmp	r3, r4
 8004624:	bf04      	itt	eq
 8004626:	2301      	moveq	r3, #1
 8004628:	61a3      	streq	r3, [r4, #24]
 800462a:	4620      	mov	r0, r4
 800462c:	f000 f820 	bl	8004670 <__sfp>
 8004630:	6060      	str	r0, [r4, #4]
 8004632:	4620      	mov	r0, r4
 8004634:	f000 f81c 	bl	8004670 <__sfp>
 8004638:	60a0      	str	r0, [r4, #8]
 800463a:	4620      	mov	r0, r4
 800463c:	f000 f818 	bl	8004670 <__sfp>
 8004640:	2200      	movs	r2, #0
 8004642:	60e0      	str	r0, [r4, #12]
 8004644:	2104      	movs	r1, #4
 8004646:	6860      	ldr	r0, [r4, #4]
 8004648:	f7ff ff82 	bl	8004550 <std>
 800464c:	68a0      	ldr	r0, [r4, #8]
 800464e:	2201      	movs	r2, #1
 8004650:	2109      	movs	r1, #9
 8004652:	f7ff ff7d 	bl	8004550 <std>
 8004656:	68e0      	ldr	r0, [r4, #12]
 8004658:	2202      	movs	r2, #2
 800465a:	2112      	movs	r1, #18
 800465c:	f7ff ff78 	bl	8004550 <std>
 8004660:	2301      	movs	r3, #1
 8004662:	61a3      	str	r3, [r4, #24]
 8004664:	e7d2      	b.n	800460c <__sinit+0xc>
 8004666:	bf00      	nop
 8004668:	0800533c 	.word	0x0800533c
 800466c:	08004599 	.word	0x08004599

08004670 <__sfp>:
 8004670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004672:	4607      	mov	r7, r0
 8004674:	f7ff ffac 	bl	80045d0 <__sfp_lock_acquire>
 8004678:	4b1e      	ldr	r3, [pc, #120]	; (80046f4 <__sfp+0x84>)
 800467a:	681e      	ldr	r6, [r3, #0]
 800467c:	69b3      	ldr	r3, [r6, #24]
 800467e:	b913      	cbnz	r3, 8004686 <__sfp+0x16>
 8004680:	4630      	mov	r0, r6
 8004682:	f7ff ffbd 	bl	8004600 <__sinit>
 8004686:	3648      	adds	r6, #72	; 0x48
 8004688:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800468c:	3b01      	subs	r3, #1
 800468e:	d503      	bpl.n	8004698 <__sfp+0x28>
 8004690:	6833      	ldr	r3, [r6, #0]
 8004692:	b30b      	cbz	r3, 80046d8 <__sfp+0x68>
 8004694:	6836      	ldr	r6, [r6, #0]
 8004696:	e7f7      	b.n	8004688 <__sfp+0x18>
 8004698:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800469c:	b9d5      	cbnz	r5, 80046d4 <__sfp+0x64>
 800469e:	4b16      	ldr	r3, [pc, #88]	; (80046f8 <__sfp+0x88>)
 80046a0:	60e3      	str	r3, [r4, #12]
 80046a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80046a6:	6665      	str	r5, [r4, #100]	; 0x64
 80046a8:	f000 f847 	bl	800473a <__retarget_lock_init_recursive>
 80046ac:	f7ff ff96 	bl	80045dc <__sfp_lock_release>
 80046b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80046b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80046b8:	6025      	str	r5, [r4, #0]
 80046ba:	61a5      	str	r5, [r4, #24]
 80046bc:	2208      	movs	r2, #8
 80046be:	4629      	mov	r1, r5
 80046c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80046c4:	f7ff fd16 	bl	80040f4 <memset>
 80046c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80046cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80046d0:	4620      	mov	r0, r4
 80046d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046d4:	3468      	adds	r4, #104	; 0x68
 80046d6:	e7d9      	b.n	800468c <__sfp+0x1c>
 80046d8:	2104      	movs	r1, #4
 80046da:	4638      	mov	r0, r7
 80046dc:	f7ff ff62 	bl	80045a4 <__sfmoreglue>
 80046e0:	4604      	mov	r4, r0
 80046e2:	6030      	str	r0, [r6, #0]
 80046e4:	2800      	cmp	r0, #0
 80046e6:	d1d5      	bne.n	8004694 <__sfp+0x24>
 80046e8:	f7ff ff78 	bl	80045dc <__sfp_lock_release>
 80046ec:	230c      	movs	r3, #12
 80046ee:	603b      	str	r3, [r7, #0]
 80046f0:	e7ee      	b.n	80046d0 <__sfp+0x60>
 80046f2:	bf00      	nop
 80046f4:	0800533c 	.word	0x0800533c
 80046f8:	ffff0001 	.word	0xffff0001

080046fc <_fwalk_reent>:
 80046fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004700:	4606      	mov	r6, r0
 8004702:	4688      	mov	r8, r1
 8004704:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004708:	2700      	movs	r7, #0
 800470a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800470e:	f1b9 0901 	subs.w	r9, r9, #1
 8004712:	d505      	bpl.n	8004720 <_fwalk_reent+0x24>
 8004714:	6824      	ldr	r4, [r4, #0]
 8004716:	2c00      	cmp	r4, #0
 8004718:	d1f7      	bne.n	800470a <_fwalk_reent+0xe>
 800471a:	4638      	mov	r0, r7
 800471c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004720:	89ab      	ldrh	r3, [r5, #12]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d907      	bls.n	8004736 <_fwalk_reent+0x3a>
 8004726:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800472a:	3301      	adds	r3, #1
 800472c:	d003      	beq.n	8004736 <_fwalk_reent+0x3a>
 800472e:	4629      	mov	r1, r5
 8004730:	4630      	mov	r0, r6
 8004732:	47c0      	blx	r8
 8004734:	4307      	orrs	r7, r0
 8004736:	3568      	adds	r5, #104	; 0x68
 8004738:	e7e9      	b.n	800470e <_fwalk_reent+0x12>

0800473a <__retarget_lock_init_recursive>:
 800473a:	4770      	bx	lr

0800473c <__retarget_lock_acquire_recursive>:
 800473c:	4770      	bx	lr

0800473e <__retarget_lock_release_recursive>:
 800473e:	4770      	bx	lr

08004740 <__swhatbuf_r>:
 8004740:	b570      	push	{r4, r5, r6, lr}
 8004742:	460e      	mov	r6, r1
 8004744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004748:	2900      	cmp	r1, #0
 800474a:	b096      	sub	sp, #88	; 0x58
 800474c:	4614      	mov	r4, r2
 800474e:	461d      	mov	r5, r3
 8004750:	da08      	bge.n	8004764 <__swhatbuf_r+0x24>
 8004752:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	602a      	str	r2, [r5, #0]
 800475a:	061a      	lsls	r2, r3, #24
 800475c:	d410      	bmi.n	8004780 <__swhatbuf_r+0x40>
 800475e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004762:	e00e      	b.n	8004782 <__swhatbuf_r+0x42>
 8004764:	466a      	mov	r2, sp
 8004766:	f000 fcdd 	bl	8005124 <_fstat_r>
 800476a:	2800      	cmp	r0, #0
 800476c:	dbf1      	blt.n	8004752 <__swhatbuf_r+0x12>
 800476e:	9a01      	ldr	r2, [sp, #4]
 8004770:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004774:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004778:	425a      	negs	r2, r3
 800477a:	415a      	adcs	r2, r3
 800477c:	602a      	str	r2, [r5, #0]
 800477e:	e7ee      	b.n	800475e <__swhatbuf_r+0x1e>
 8004780:	2340      	movs	r3, #64	; 0x40
 8004782:	2000      	movs	r0, #0
 8004784:	6023      	str	r3, [r4, #0]
 8004786:	b016      	add	sp, #88	; 0x58
 8004788:	bd70      	pop	{r4, r5, r6, pc}
	...

0800478c <__smakebuf_r>:
 800478c:	898b      	ldrh	r3, [r1, #12]
 800478e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004790:	079d      	lsls	r5, r3, #30
 8004792:	4606      	mov	r6, r0
 8004794:	460c      	mov	r4, r1
 8004796:	d507      	bpl.n	80047a8 <__smakebuf_r+0x1c>
 8004798:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800479c:	6023      	str	r3, [r4, #0]
 800479e:	6123      	str	r3, [r4, #16]
 80047a0:	2301      	movs	r3, #1
 80047a2:	6163      	str	r3, [r4, #20]
 80047a4:	b002      	add	sp, #8
 80047a6:	bd70      	pop	{r4, r5, r6, pc}
 80047a8:	ab01      	add	r3, sp, #4
 80047aa:	466a      	mov	r2, sp
 80047ac:	f7ff ffc8 	bl	8004740 <__swhatbuf_r>
 80047b0:	9900      	ldr	r1, [sp, #0]
 80047b2:	4605      	mov	r5, r0
 80047b4:	4630      	mov	r0, r6
 80047b6:	f000 f895 	bl	80048e4 <_malloc_r>
 80047ba:	b948      	cbnz	r0, 80047d0 <__smakebuf_r+0x44>
 80047bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047c0:	059a      	lsls	r2, r3, #22
 80047c2:	d4ef      	bmi.n	80047a4 <__smakebuf_r+0x18>
 80047c4:	f023 0303 	bic.w	r3, r3, #3
 80047c8:	f043 0302 	orr.w	r3, r3, #2
 80047cc:	81a3      	strh	r3, [r4, #12]
 80047ce:	e7e3      	b.n	8004798 <__smakebuf_r+0xc>
 80047d0:	4b0d      	ldr	r3, [pc, #52]	; (8004808 <__smakebuf_r+0x7c>)
 80047d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80047d4:	89a3      	ldrh	r3, [r4, #12]
 80047d6:	6020      	str	r0, [r4, #0]
 80047d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047dc:	81a3      	strh	r3, [r4, #12]
 80047de:	9b00      	ldr	r3, [sp, #0]
 80047e0:	6163      	str	r3, [r4, #20]
 80047e2:	9b01      	ldr	r3, [sp, #4]
 80047e4:	6120      	str	r0, [r4, #16]
 80047e6:	b15b      	cbz	r3, 8004800 <__smakebuf_r+0x74>
 80047e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047ec:	4630      	mov	r0, r6
 80047ee:	f000 fcab 	bl	8005148 <_isatty_r>
 80047f2:	b128      	cbz	r0, 8004800 <__smakebuf_r+0x74>
 80047f4:	89a3      	ldrh	r3, [r4, #12]
 80047f6:	f023 0303 	bic.w	r3, r3, #3
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	81a3      	strh	r3, [r4, #12]
 8004800:	89a0      	ldrh	r0, [r4, #12]
 8004802:	4305      	orrs	r5, r0
 8004804:	81a5      	strh	r5, [r4, #12]
 8004806:	e7cd      	b.n	80047a4 <__smakebuf_r+0x18>
 8004808:	08004599 	.word	0x08004599

0800480c <_free_r>:
 800480c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800480e:	2900      	cmp	r1, #0
 8004810:	d044      	beq.n	800489c <_free_r+0x90>
 8004812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004816:	9001      	str	r0, [sp, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	f1a1 0404 	sub.w	r4, r1, #4
 800481e:	bfb8      	it	lt
 8004820:	18e4      	addlt	r4, r4, r3
 8004822:	f000 fcb3 	bl	800518c <__malloc_lock>
 8004826:	4a1e      	ldr	r2, [pc, #120]	; (80048a0 <_free_r+0x94>)
 8004828:	9801      	ldr	r0, [sp, #4]
 800482a:	6813      	ldr	r3, [r2, #0]
 800482c:	b933      	cbnz	r3, 800483c <_free_r+0x30>
 800482e:	6063      	str	r3, [r4, #4]
 8004830:	6014      	str	r4, [r2, #0]
 8004832:	b003      	add	sp, #12
 8004834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004838:	f000 bcae 	b.w	8005198 <__malloc_unlock>
 800483c:	42a3      	cmp	r3, r4
 800483e:	d908      	bls.n	8004852 <_free_r+0x46>
 8004840:	6825      	ldr	r5, [r4, #0]
 8004842:	1961      	adds	r1, r4, r5
 8004844:	428b      	cmp	r3, r1
 8004846:	bf01      	itttt	eq
 8004848:	6819      	ldreq	r1, [r3, #0]
 800484a:	685b      	ldreq	r3, [r3, #4]
 800484c:	1949      	addeq	r1, r1, r5
 800484e:	6021      	streq	r1, [r4, #0]
 8004850:	e7ed      	b.n	800482e <_free_r+0x22>
 8004852:	461a      	mov	r2, r3
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	b10b      	cbz	r3, 800485c <_free_r+0x50>
 8004858:	42a3      	cmp	r3, r4
 800485a:	d9fa      	bls.n	8004852 <_free_r+0x46>
 800485c:	6811      	ldr	r1, [r2, #0]
 800485e:	1855      	adds	r5, r2, r1
 8004860:	42a5      	cmp	r5, r4
 8004862:	d10b      	bne.n	800487c <_free_r+0x70>
 8004864:	6824      	ldr	r4, [r4, #0]
 8004866:	4421      	add	r1, r4
 8004868:	1854      	adds	r4, r2, r1
 800486a:	42a3      	cmp	r3, r4
 800486c:	6011      	str	r1, [r2, #0]
 800486e:	d1e0      	bne.n	8004832 <_free_r+0x26>
 8004870:	681c      	ldr	r4, [r3, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	6053      	str	r3, [r2, #4]
 8004876:	4421      	add	r1, r4
 8004878:	6011      	str	r1, [r2, #0]
 800487a:	e7da      	b.n	8004832 <_free_r+0x26>
 800487c:	d902      	bls.n	8004884 <_free_r+0x78>
 800487e:	230c      	movs	r3, #12
 8004880:	6003      	str	r3, [r0, #0]
 8004882:	e7d6      	b.n	8004832 <_free_r+0x26>
 8004884:	6825      	ldr	r5, [r4, #0]
 8004886:	1961      	adds	r1, r4, r5
 8004888:	428b      	cmp	r3, r1
 800488a:	bf04      	itt	eq
 800488c:	6819      	ldreq	r1, [r3, #0]
 800488e:	685b      	ldreq	r3, [r3, #4]
 8004890:	6063      	str	r3, [r4, #4]
 8004892:	bf04      	itt	eq
 8004894:	1949      	addeq	r1, r1, r5
 8004896:	6021      	streq	r1, [r4, #0]
 8004898:	6054      	str	r4, [r2, #4]
 800489a:	e7ca      	b.n	8004832 <_free_r+0x26>
 800489c:	b003      	add	sp, #12
 800489e:	bd30      	pop	{r4, r5, pc}
 80048a0:	200001d4 	.word	0x200001d4

080048a4 <sbrk_aligned>:
 80048a4:	b570      	push	{r4, r5, r6, lr}
 80048a6:	4e0e      	ldr	r6, [pc, #56]	; (80048e0 <sbrk_aligned+0x3c>)
 80048a8:	460c      	mov	r4, r1
 80048aa:	6831      	ldr	r1, [r6, #0]
 80048ac:	4605      	mov	r5, r0
 80048ae:	b911      	cbnz	r1, 80048b6 <sbrk_aligned+0x12>
 80048b0:	f000 fbc2 	bl	8005038 <_sbrk_r>
 80048b4:	6030      	str	r0, [r6, #0]
 80048b6:	4621      	mov	r1, r4
 80048b8:	4628      	mov	r0, r5
 80048ba:	f000 fbbd 	bl	8005038 <_sbrk_r>
 80048be:	1c43      	adds	r3, r0, #1
 80048c0:	d00a      	beq.n	80048d8 <sbrk_aligned+0x34>
 80048c2:	1cc4      	adds	r4, r0, #3
 80048c4:	f024 0403 	bic.w	r4, r4, #3
 80048c8:	42a0      	cmp	r0, r4
 80048ca:	d007      	beq.n	80048dc <sbrk_aligned+0x38>
 80048cc:	1a21      	subs	r1, r4, r0
 80048ce:	4628      	mov	r0, r5
 80048d0:	f000 fbb2 	bl	8005038 <_sbrk_r>
 80048d4:	3001      	adds	r0, #1
 80048d6:	d101      	bne.n	80048dc <sbrk_aligned+0x38>
 80048d8:	f04f 34ff 	mov.w	r4, #4294967295
 80048dc:	4620      	mov	r0, r4
 80048de:	bd70      	pop	{r4, r5, r6, pc}
 80048e0:	200001d8 	.word	0x200001d8

080048e4 <_malloc_r>:
 80048e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048e8:	1ccd      	adds	r5, r1, #3
 80048ea:	f025 0503 	bic.w	r5, r5, #3
 80048ee:	3508      	adds	r5, #8
 80048f0:	2d0c      	cmp	r5, #12
 80048f2:	bf38      	it	cc
 80048f4:	250c      	movcc	r5, #12
 80048f6:	2d00      	cmp	r5, #0
 80048f8:	4607      	mov	r7, r0
 80048fa:	db01      	blt.n	8004900 <_malloc_r+0x1c>
 80048fc:	42a9      	cmp	r1, r5
 80048fe:	d905      	bls.n	800490c <_malloc_r+0x28>
 8004900:	230c      	movs	r3, #12
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	2600      	movs	r6, #0
 8004906:	4630      	mov	r0, r6
 8004908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800490c:	4e2e      	ldr	r6, [pc, #184]	; (80049c8 <_malloc_r+0xe4>)
 800490e:	f000 fc3d 	bl	800518c <__malloc_lock>
 8004912:	6833      	ldr	r3, [r6, #0]
 8004914:	461c      	mov	r4, r3
 8004916:	bb34      	cbnz	r4, 8004966 <_malloc_r+0x82>
 8004918:	4629      	mov	r1, r5
 800491a:	4638      	mov	r0, r7
 800491c:	f7ff ffc2 	bl	80048a4 <sbrk_aligned>
 8004920:	1c43      	adds	r3, r0, #1
 8004922:	4604      	mov	r4, r0
 8004924:	d14d      	bne.n	80049c2 <_malloc_r+0xde>
 8004926:	6834      	ldr	r4, [r6, #0]
 8004928:	4626      	mov	r6, r4
 800492a:	2e00      	cmp	r6, #0
 800492c:	d140      	bne.n	80049b0 <_malloc_r+0xcc>
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	4631      	mov	r1, r6
 8004932:	4638      	mov	r0, r7
 8004934:	eb04 0803 	add.w	r8, r4, r3
 8004938:	f000 fb7e 	bl	8005038 <_sbrk_r>
 800493c:	4580      	cmp	r8, r0
 800493e:	d13a      	bne.n	80049b6 <_malloc_r+0xd2>
 8004940:	6821      	ldr	r1, [r4, #0]
 8004942:	3503      	adds	r5, #3
 8004944:	1a6d      	subs	r5, r5, r1
 8004946:	f025 0503 	bic.w	r5, r5, #3
 800494a:	3508      	adds	r5, #8
 800494c:	2d0c      	cmp	r5, #12
 800494e:	bf38      	it	cc
 8004950:	250c      	movcc	r5, #12
 8004952:	4629      	mov	r1, r5
 8004954:	4638      	mov	r0, r7
 8004956:	f7ff ffa5 	bl	80048a4 <sbrk_aligned>
 800495a:	3001      	adds	r0, #1
 800495c:	d02b      	beq.n	80049b6 <_malloc_r+0xd2>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	442b      	add	r3, r5
 8004962:	6023      	str	r3, [r4, #0]
 8004964:	e00e      	b.n	8004984 <_malloc_r+0xa0>
 8004966:	6822      	ldr	r2, [r4, #0]
 8004968:	1b52      	subs	r2, r2, r5
 800496a:	d41e      	bmi.n	80049aa <_malloc_r+0xc6>
 800496c:	2a0b      	cmp	r2, #11
 800496e:	d916      	bls.n	800499e <_malloc_r+0xba>
 8004970:	1961      	adds	r1, r4, r5
 8004972:	42a3      	cmp	r3, r4
 8004974:	6025      	str	r5, [r4, #0]
 8004976:	bf18      	it	ne
 8004978:	6059      	strne	r1, [r3, #4]
 800497a:	6863      	ldr	r3, [r4, #4]
 800497c:	bf08      	it	eq
 800497e:	6031      	streq	r1, [r6, #0]
 8004980:	5162      	str	r2, [r4, r5]
 8004982:	604b      	str	r3, [r1, #4]
 8004984:	4638      	mov	r0, r7
 8004986:	f104 060b 	add.w	r6, r4, #11
 800498a:	f000 fc05 	bl	8005198 <__malloc_unlock>
 800498e:	f026 0607 	bic.w	r6, r6, #7
 8004992:	1d23      	adds	r3, r4, #4
 8004994:	1af2      	subs	r2, r6, r3
 8004996:	d0b6      	beq.n	8004906 <_malloc_r+0x22>
 8004998:	1b9b      	subs	r3, r3, r6
 800499a:	50a3      	str	r3, [r4, r2]
 800499c:	e7b3      	b.n	8004906 <_malloc_r+0x22>
 800499e:	6862      	ldr	r2, [r4, #4]
 80049a0:	42a3      	cmp	r3, r4
 80049a2:	bf0c      	ite	eq
 80049a4:	6032      	streq	r2, [r6, #0]
 80049a6:	605a      	strne	r2, [r3, #4]
 80049a8:	e7ec      	b.n	8004984 <_malloc_r+0xa0>
 80049aa:	4623      	mov	r3, r4
 80049ac:	6864      	ldr	r4, [r4, #4]
 80049ae:	e7b2      	b.n	8004916 <_malloc_r+0x32>
 80049b0:	4634      	mov	r4, r6
 80049b2:	6876      	ldr	r6, [r6, #4]
 80049b4:	e7b9      	b.n	800492a <_malloc_r+0x46>
 80049b6:	230c      	movs	r3, #12
 80049b8:	603b      	str	r3, [r7, #0]
 80049ba:	4638      	mov	r0, r7
 80049bc:	f000 fbec 	bl	8005198 <__malloc_unlock>
 80049c0:	e7a1      	b.n	8004906 <_malloc_r+0x22>
 80049c2:	6025      	str	r5, [r4, #0]
 80049c4:	e7de      	b.n	8004984 <_malloc_r+0xa0>
 80049c6:	bf00      	nop
 80049c8:	200001d4 	.word	0x200001d4

080049cc <__sfputc_r>:
 80049cc:	6893      	ldr	r3, [r2, #8]
 80049ce:	3b01      	subs	r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	b410      	push	{r4}
 80049d4:	6093      	str	r3, [r2, #8]
 80049d6:	da08      	bge.n	80049ea <__sfputc_r+0x1e>
 80049d8:	6994      	ldr	r4, [r2, #24]
 80049da:	42a3      	cmp	r3, r4
 80049dc:	db01      	blt.n	80049e2 <__sfputc_r+0x16>
 80049de:	290a      	cmp	r1, #10
 80049e0:	d103      	bne.n	80049ea <__sfputc_r+0x1e>
 80049e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049e6:	f7ff bc31 	b.w	800424c <__swbuf_r>
 80049ea:	6813      	ldr	r3, [r2, #0]
 80049ec:	1c58      	adds	r0, r3, #1
 80049ee:	6010      	str	r0, [r2, #0]
 80049f0:	7019      	strb	r1, [r3, #0]
 80049f2:	4608      	mov	r0, r1
 80049f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <__sfputs_r>:
 80049fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fc:	4606      	mov	r6, r0
 80049fe:	460f      	mov	r7, r1
 8004a00:	4614      	mov	r4, r2
 8004a02:	18d5      	adds	r5, r2, r3
 8004a04:	42ac      	cmp	r4, r5
 8004a06:	d101      	bne.n	8004a0c <__sfputs_r+0x12>
 8004a08:	2000      	movs	r0, #0
 8004a0a:	e007      	b.n	8004a1c <__sfputs_r+0x22>
 8004a0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a10:	463a      	mov	r2, r7
 8004a12:	4630      	mov	r0, r6
 8004a14:	f7ff ffda 	bl	80049cc <__sfputc_r>
 8004a18:	1c43      	adds	r3, r0, #1
 8004a1a:	d1f3      	bne.n	8004a04 <__sfputs_r+0xa>
 8004a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a20 <_vfiprintf_r>:
 8004a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a24:	460d      	mov	r5, r1
 8004a26:	b09d      	sub	sp, #116	; 0x74
 8004a28:	4614      	mov	r4, r2
 8004a2a:	4698      	mov	r8, r3
 8004a2c:	4606      	mov	r6, r0
 8004a2e:	b118      	cbz	r0, 8004a38 <_vfiprintf_r+0x18>
 8004a30:	6983      	ldr	r3, [r0, #24]
 8004a32:	b90b      	cbnz	r3, 8004a38 <_vfiprintf_r+0x18>
 8004a34:	f7ff fde4 	bl	8004600 <__sinit>
 8004a38:	4b89      	ldr	r3, [pc, #548]	; (8004c60 <_vfiprintf_r+0x240>)
 8004a3a:	429d      	cmp	r5, r3
 8004a3c:	d11b      	bne.n	8004a76 <_vfiprintf_r+0x56>
 8004a3e:	6875      	ldr	r5, [r6, #4]
 8004a40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a42:	07d9      	lsls	r1, r3, #31
 8004a44:	d405      	bmi.n	8004a52 <_vfiprintf_r+0x32>
 8004a46:	89ab      	ldrh	r3, [r5, #12]
 8004a48:	059a      	lsls	r2, r3, #22
 8004a4a:	d402      	bmi.n	8004a52 <_vfiprintf_r+0x32>
 8004a4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a4e:	f7ff fe75 	bl	800473c <__retarget_lock_acquire_recursive>
 8004a52:	89ab      	ldrh	r3, [r5, #12]
 8004a54:	071b      	lsls	r3, r3, #28
 8004a56:	d501      	bpl.n	8004a5c <_vfiprintf_r+0x3c>
 8004a58:	692b      	ldr	r3, [r5, #16]
 8004a5a:	b9eb      	cbnz	r3, 8004a98 <_vfiprintf_r+0x78>
 8004a5c:	4629      	mov	r1, r5
 8004a5e:	4630      	mov	r0, r6
 8004a60:	f7ff fc46 	bl	80042f0 <__swsetup_r>
 8004a64:	b1c0      	cbz	r0, 8004a98 <_vfiprintf_r+0x78>
 8004a66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a68:	07dc      	lsls	r4, r3, #31
 8004a6a:	d50e      	bpl.n	8004a8a <_vfiprintf_r+0x6a>
 8004a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a70:	b01d      	add	sp, #116	; 0x74
 8004a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a76:	4b7b      	ldr	r3, [pc, #492]	; (8004c64 <_vfiprintf_r+0x244>)
 8004a78:	429d      	cmp	r5, r3
 8004a7a:	d101      	bne.n	8004a80 <_vfiprintf_r+0x60>
 8004a7c:	68b5      	ldr	r5, [r6, #8]
 8004a7e:	e7df      	b.n	8004a40 <_vfiprintf_r+0x20>
 8004a80:	4b79      	ldr	r3, [pc, #484]	; (8004c68 <_vfiprintf_r+0x248>)
 8004a82:	429d      	cmp	r5, r3
 8004a84:	bf08      	it	eq
 8004a86:	68f5      	ldreq	r5, [r6, #12]
 8004a88:	e7da      	b.n	8004a40 <_vfiprintf_r+0x20>
 8004a8a:	89ab      	ldrh	r3, [r5, #12]
 8004a8c:	0598      	lsls	r0, r3, #22
 8004a8e:	d4ed      	bmi.n	8004a6c <_vfiprintf_r+0x4c>
 8004a90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a92:	f7ff fe54 	bl	800473e <__retarget_lock_release_recursive>
 8004a96:	e7e9      	b.n	8004a6c <_vfiprintf_r+0x4c>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a9c:	2320      	movs	r3, #32
 8004a9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004aa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004aa6:	2330      	movs	r3, #48	; 0x30
 8004aa8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004c6c <_vfiprintf_r+0x24c>
 8004aac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ab0:	f04f 0901 	mov.w	r9, #1
 8004ab4:	4623      	mov	r3, r4
 8004ab6:	469a      	mov	sl, r3
 8004ab8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004abc:	b10a      	cbz	r2, 8004ac2 <_vfiprintf_r+0xa2>
 8004abe:	2a25      	cmp	r2, #37	; 0x25
 8004ac0:	d1f9      	bne.n	8004ab6 <_vfiprintf_r+0x96>
 8004ac2:	ebba 0b04 	subs.w	fp, sl, r4
 8004ac6:	d00b      	beq.n	8004ae0 <_vfiprintf_r+0xc0>
 8004ac8:	465b      	mov	r3, fp
 8004aca:	4622      	mov	r2, r4
 8004acc:	4629      	mov	r1, r5
 8004ace:	4630      	mov	r0, r6
 8004ad0:	f7ff ff93 	bl	80049fa <__sfputs_r>
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	f000 80aa 	beq.w	8004c2e <_vfiprintf_r+0x20e>
 8004ada:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004adc:	445a      	add	r2, fp
 8004ade:	9209      	str	r2, [sp, #36]	; 0x24
 8004ae0:	f89a 3000 	ldrb.w	r3, [sl]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 80a2 	beq.w	8004c2e <_vfiprintf_r+0x20e>
 8004aea:	2300      	movs	r3, #0
 8004aec:	f04f 32ff 	mov.w	r2, #4294967295
 8004af0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004af4:	f10a 0a01 	add.w	sl, sl, #1
 8004af8:	9304      	str	r3, [sp, #16]
 8004afa:	9307      	str	r3, [sp, #28]
 8004afc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b00:	931a      	str	r3, [sp, #104]	; 0x68
 8004b02:	4654      	mov	r4, sl
 8004b04:	2205      	movs	r2, #5
 8004b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b0a:	4858      	ldr	r0, [pc, #352]	; (8004c6c <_vfiprintf_r+0x24c>)
 8004b0c:	f7fb fb68 	bl	80001e0 <memchr>
 8004b10:	9a04      	ldr	r2, [sp, #16]
 8004b12:	b9d8      	cbnz	r0, 8004b4c <_vfiprintf_r+0x12c>
 8004b14:	06d1      	lsls	r1, r2, #27
 8004b16:	bf44      	itt	mi
 8004b18:	2320      	movmi	r3, #32
 8004b1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b1e:	0713      	lsls	r3, r2, #28
 8004b20:	bf44      	itt	mi
 8004b22:	232b      	movmi	r3, #43	; 0x2b
 8004b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b28:	f89a 3000 	ldrb.w	r3, [sl]
 8004b2c:	2b2a      	cmp	r3, #42	; 0x2a
 8004b2e:	d015      	beq.n	8004b5c <_vfiprintf_r+0x13c>
 8004b30:	9a07      	ldr	r2, [sp, #28]
 8004b32:	4654      	mov	r4, sl
 8004b34:	2000      	movs	r0, #0
 8004b36:	f04f 0c0a 	mov.w	ip, #10
 8004b3a:	4621      	mov	r1, r4
 8004b3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b40:	3b30      	subs	r3, #48	; 0x30
 8004b42:	2b09      	cmp	r3, #9
 8004b44:	d94e      	bls.n	8004be4 <_vfiprintf_r+0x1c4>
 8004b46:	b1b0      	cbz	r0, 8004b76 <_vfiprintf_r+0x156>
 8004b48:	9207      	str	r2, [sp, #28]
 8004b4a:	e014      	b.n	8004b76 <_vfiprintf_r+0x156>
 8004b4c:	eba0 0308 	sub.w	r3, r0, r8
 8004b50:	fa09 f303 	lsl.w	r3, r9, r3
 8004b54:	4313      	orrs	r3, r2
 8004b56:	9304      	str	r3, [sp, #16]
 8004b58:	46a2      	mov	sl, r4
 8004b5a:	e7d2      	b.n	8004b02 <_vfiprintf_r+0xe2>
 8004b5c:	9b03      	ldr	r3, [sp, #12]
 8004b5e:	1d19      	adds	r1, r3, #4
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	9103      	str	r1, [sp, #12]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	bfbb      	ittet	lt
 8004b68:	425b      	neglt	r3, r3
 8004b6a:	f042 0202 	orrlt.w	r2, r2, #2
 8004b6e:	9307      	strge	r3, [sp, #28]
 8004b70:	9307      	strlt	r3, [sp, #28]
 8004b72:	bfb8      	it	lt
 8004b74:	9204      	strlt	r2, [sp, #16]
 8004b76:	7823      	ldrb	r3, [r4, #0]
 8004b78:	2b2e      	cmp	r3, #46	; 0x2e
 8004b7a:	d10c      	bne.n	8004b96 <_vfiprintf_r+0x176>
 8004b7c:	7863      	ldrb	r3, [r4, #1]
 8004b7e:	2b2a      	cmp	r3, #42	; 0x2a
 8004b80:	d135      	bne.n	8004bee <_vfiprintf_r+0x1ce>
 8004b82:	9b03      	ldr	r3, [sp, #12]
 8004b84:	1d1a      	adds	r2, r3, #4
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	9203      	str	r2, [sp, #12]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	bfb8      	it	lt
 8004b8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b92:	3402      	adds	r4, #2
 8004b94:	9305      	str	r3, [sp, #20]
 8004b96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004c7c <_vfiprintf_r+0x25c>
 8004b9a:	7821      	ldrb	r1, [r4, #0]
 8004b9c:	2203      	movs	r2, #3
 8004b9e:	4650      	mov	r0, sl
 8004ba0:	f7fb fb1e 	bl	80001e0 <memchr>
 8004ba4:	b140      	cbz	r0, 8004bb8 <_vfiprintf_r+0x198>
 8004ba6:	2340      	movs	r3, #64	; 0x40
 8004ba8:	eba0 000a 	sub.w	r0, r0, sl
 8004bac:	fa03 f000 	lsl.w	r0, r3, r0
 8004bb0:	9b04      	ldr	r3, [sp, #16]
 8004bb2:	4303      	orrs	r3, r0
 8004bb4:	3401      	adds	r4, #1
 8004bb6:	9304      	str	r3, [sp, #16]
 8004bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bbc:	482c      	ldr	r0, [pc, #176]	; (8004c70 <_vfiprintf_r+0x250>)
 8004bbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bc2:	2206      	movs	r2, #6
 8004bc4:	f7fb fb0c 	bl	80001e0 <memchr>
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	d03f      	beq.n	8004c4c <_vfiprintf_r+0x22c>
 8004bcc:	4b29      	ldr	r3, [pc, #164]	; (8004c74 <_vfiprintf_r+0x254>)
 8004bce:	bb1b      	cbnz	r3, 8004c18 <_vfiprintf_r+0x1f8>
 8004bd0:	9b03      	ldr	r3, [sp, #12]
 8004bd2:	3307      	adds	r3, #7
 8004bd4:	f023 0307 	bic.w	r3, r3, #7
 8004bd8:	3308      	adds	r3, #8
 8004bda:	9303      	str	r3, [sp, #12]
 8004bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bde:	443b      	add	r3, r7
 8004be0:	9309      	str	r3, [sp, #36]	; 0x24
 8004be2:	e767      	b.n	8004ab4 <_vfiprintf_r+0x94>
 8004be4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004be8:	460c      	mov	r4, r1
 8004bea:	2001      	movs	r0, #1
 8004bec:	e7a5      	b.n	8004b3a <_vfiprintf_r+0x11a>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	3401      	adds	r4, #1
 8004bf2:	9305      	str	r3, [sp, #20]
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	f04f 0c0a 	mov.w	ip, #10
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c00:	3a30      	subs	r2, #48	; 0x30
 8004c02:	2a09      	cmp	r2, #9
 8004c04:	d903      	bls.n	8004c0e <_vfiprintf_r+0x1ee>
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0c5      	beq.n	8004b96 <_vfiprintf_r+0x176>
 8004c0a:	9105      	str	r1, [sp, #20]
 8004c0c:	e7c3      	b.n	8004b96 <_vfiprintf_r+0x176>
 8004c0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c12:	4604      	mov	r4, r0
 8004c14:	2301      	movs	r3, #1
 8004c16:	e7f0      	b.n	8004bfa <_vfiprintf_r+0x1da>
 8004c18:	ab03      	add	r3, sp, #12
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	462a      	mov	r2, r5
 8004c1e:	4b16      	ldr	r3, [pc, #88]	; (8004c78 <_vfiprintf_r+0x258>)
 8004c20:	a904      	add	r1, sp, #16
 8004c22:	4630      	mov	r0, r6
 8004c24:	f3af 8000 	nop.w
 8004c28:	4607      	mov	r7, r0
 8004c2a:	1c78      	adds	r0, r7, #1
 8004c2c:	d1d6      	bne.n	8004bdc <_vfiprintf_r+0x1bc>
 8004c2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c30:	07d9      	lsls	r1, r3, #31
 8004c32:	d405      	bmi.n	8004c40 <_vfiprintf_r+0x220>
 8004c34:	89ab      	ldrh	r3, [r5, #12]
 8004c36:	059a      	lsls	r2, r3, #22
 8004c38:	d402      	bmi.n	8004c40 <_vfiprintf_r+0x220>
 8004c3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c3c:	f7ff fd7f 	bl	800473e <__retarget_lock_release_recursive>
 8004c40:	89ab      	ldrh	r3, [r5, #12]
 8004c42:	065b      	lsls	r3, r3, #25
 8004c44:	f53f af12 	bmi.w	8004a6c <_vfiprintf_r+0x4c>
 8004c48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c4a:	e711      	b.n	8004a70 <_vfiprintf_r+0x50>
 8004c4c:	ab03      	add	r3, sp, #12
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	462a      	mov	r2, r5
 8004c52:	4b09      	ldr	r3, [pc, #36]	; (8004c78 <_vfiprintf_r+0x258>)
 8004c54:	a904      	add	r1, sp, #16
 8004c56:	4630      	mov	r0, r6
 8004c58:	f000 f880 	bl	8004d5c <_printf_i>
 8004c5c:	e7e4      	b.n	8004c28 <_vfiprintf_r+0x208>
 8004c5e:	bf00      	nop
 8004c60:	08005360 	.word	0x08005360
 8004c64:	08005380 	.word	0x08005380
 8004c68:	08005340 	.word	0x08005340
 8004c6c:	080053a0 	.word	0x080053a0
 8004c70:	080053aa 	.word	0x080053aa
 8004c74:	00000000 	.word	0x00000000
 8004c78:	080049fb 	.word	0x080049fb
 8004c7c:	080053a6 	.word	0x080053a6

08004c80 <_printf_common>:
 8004c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c84:	4616      	mov	r6, r2
 8004c86:	4699      	mov	r9, r3
 8004c88:	688a      	ldr	r2, [r1, #8]
 8004c8a:	690b      	ldr	r3, [r1, #16]
 8004c8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c90:	4293      	cmp	r3, r2
 8004c92:	bfb8      	it	lt
 8004c94:	4613      	movlt	r3, r2
 8004c96:	6033      	str	r3, [r6, #0]
 8004c98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c9c:	4607      	mov	r7, r0
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	b10a      	cbz	r2, 8004ca6 <_printf_common+0x26>
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	6033      	str	r3, [r6, #0]
 8004ca6:	6823      	ldr	r3, [r4, #0]
 8004ca8:	0699      	lsls	r1, r3, #26
 8004caa:	bf42      	ittt	mi
 8004cac:	6833      	ldrmi	r3, [r6, #0]
 8004cae:	3302      	addmi	r3, #2
 8004cb0:	6033      	strmi	r3, [r6, #0]
 8004cb2:	6825      	ldr	r5, [r4, #0]
 8004cb4:	f015 0506 	ands.w	r5, r5, #6
 8004cb8:	d106      	bne.n	8004cc8 <_printf_common+0x48>
 8004cba:	f104 0a19 	add.w	sl, r4, #25
 8004cbe:	68e3      	ldr	r3, [r4, #12]
 8004cc0:	6832      	ldr	r2, [r6, #0]
 8004cc2:	1a9b      	subs	r3, r3, r2
 8004cc4:	42ab      	cmp	r3, r5
 8004cc6:	dc26      	bgt.n	8004d16 <_printf_common+0x96>
 8004cc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ccc:	1e13      	subs	r3, r2, #0
 8004cce:	6822      	ldr	r2, [r4, #0]
 8004cd0:	bf18      	it	ne
 8004cd2:	2301      	movne	r3, #1
 8004cd4:	0692      	lsls	r2, r2, #26
 8004cd6:	d42b      	bmi.n	8004d30 <_printf_common+0xb0>
 8004cd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cdc:	4649      	mov	r1, r9
 8004cde:	4638      	mov	r0, r7
 8004ce0:	47c0      	blx	r8
 8004ce2:	3001      	adds	r0, #1
 8004ce4:	d01e      	beq.n	8004d24 <_printf_common+0xa4>
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	68e5      	ldr	r5, [r4, #12]
 8004cea:	6832      	ldr	r2, [r6, #0]
 8004cec:	f003 0306 	and.w	r3, r3, #6
 8004cf0:	2b04      	cmp	r3, #4
 8004cf2:	bf08      	it	eq
 8004cf4:	1aad      	subeq	r5, r5, r2
 8004cf6:	68a3      	ldr	r3, [r4, #8]
 8004cf8:	6922      	ldr	r2, [r4, #16]
 8004cfa:	bf0c      	ite	eq
 8004cfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d00:	2500      	movne	r5, #0
 8004d02:	4293      	cmp	r3, r2
 8004d04:	bfc4      	itt	gt
 8004d06:	1a9b      	subgt	r3, r3, r2
 8004d08:	18ed      	addgt	r5, r5, r3
 8004d0a:	2600      	movs	r6, #0
 8004d0c:	341a      	adds	r4, #26
 8004d0e:	42b5      	cmp	r5, r6
 8004d10:	d11a      	bne.n	8004d48 <_printf_common+0xc8>
 8004d12:	2000      	movs	r0, #0
 8004d14:	e008      	b.n	8004d28 <_printf_common+0xa8>
 8004d16:	2301      	movs	r3, #1
 8004d18:	4652      	mov	r2, sl
 8004d1a:	4649      	mov	r1, r9
 8004d1c:	4638      	mov	r0, r7
 8004d1e:	47c0      	blx	r8
 8004d20:	3001      	adds	r0, #1
 8004d22:	d103      	bne.n	8004d2c <_printf_common+0xac>
 8004d24:	f04f 30ff 	mov.w	r0, #4294967295
 8004d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d2c:	3501      	adds	r5, #1
 8004d2e:	e7c6      	b.n	8004cbe <_printf_common+0x3e>
 8004d30:	18e1      	adds	r1, r4, r3
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	2030      	movs	r0, #48	; 0x30
 8004d36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d3a:	4422      	add	r2, r4
 8004d3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d44:	3302      	adds	r3, #2
 8004d46:	e7c7      	b.n	8004cd8 <_printf_common+0x58>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	4622      	mov	r2, r4
 8004d4c:	4649      	mov	r1, r9
 8004d4e:	4638      	mov	r0, r7
 8004d50:	47c0      	blx	r8
 8004d52:	3001      	adds	r0, #1
 8004d54:	d0e6      	beq.n	8004d24 <_printf_common+0xa4>
 8004d56:	3601      	adds	r6, #1
 8004d58:	e7d9      	b.n	8004d0e <_printf_common+0x8e>
	...

08004d5c <_printf_i>:
 8004d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d60:	7e0f      	ldrb	r7, [r1, #24]
 8004d62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d64:	2f78      	cmp	r7, #120	; 0x78
 8004d66:	4691      	mov	r9, r2
 8004d68:	4680      	mov	r8, r0
 8004d6a:	460c      	mov	r4, r1
 8004d6c:	469a      	mov	sl, r3
 8004d6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d72:	d807      	bhi.n	8004d84 <_printf_i+0x28>
 8004d74:	2f62      	cmp	r7, #98	; 0x62
 8004d76:	d80a      	bhi.n	8004d8e <_printf_i+0x32>
 8004d78:	2f00      	cmp	r7, #0
 8004d7a:	f000 80d8 	beq.w	8004f2e <_printf_i+0x1d2>
 8004d7e:	2f58      	cmp	r7, #88	; 0x58
 8004d80:	f000 80a3 	beq.w	8004eca <_printf_i+0x16e>
 8004d84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d8c:	e03a      	b.n	8004e04 <_printf_i+0xa8>
 8004d8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d92:	2b15      	cmp	r3, #21
 8004d94:	d8f6      	bhi.n	8004d84 <_printf_i+0x28>
 8004d96:	a101      	add	r1, pc, #4	; (adr r1, 8004d9c <_printf_i+0x40>)
 8004d98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d9c:	08004df5 	.word	0x08004df5
 8004da0:	08004e09 	.word	0x08004e09
 8004da4:	08004d85 	.word	0x08004d85
 8004da8:	08004d85 	.word	0x08004d85
 8004dac:	08004d85 	.word	0x08004d85
 8004db0:	08004d85 	.word	0x08004d85
 8004db4:	08004e09 	.word	0x08004e09
 8004db8:	08004d85 	.word	0x08004d85
 8004dbc:	08004d85 	.word	0x08004d85
 8004dc0:	08004d85 	.word	0x08004d85
 8004dc4:	08004d85 	.word	0x08004d85
 8004dc8:	08004f15 	.word	0x08004f15
 8004dcc:	08004e39 	.word	0x08004e39
 8004dd0:	08004ef7 	.word	0x08004ef7
 8004dd4:	08004d85 	.word	0x08004d85
 8004dd8:	08004d85 	.word	0x08004d85
 8004ddc:	08004f37 	.word	0x08004f37
 8004de0:	08004d85 	.word	0x08004d85
 8004de4:	08004e39 	.word	0x08004e39
 8004de8:	08004d85 	.word	0x08004d85
 8004dec:	08004d85 	.word	0x08004d85
 8004df0:	08004eff 	.word	0x08004eff
 8004df4:	682b      	ldr	r3, [r5, #0]
 8004df6:	1d1a      	adds	r2, r3, #4
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	602a      	str	r2, [r5, #0]
 8004dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e04:	2301      	movs	r3, #1
 8004e06:	e0a3      	b.n	8004f50 <_printf_i+0x1f4>
 8004e08:	6820      	ldr	r0, [r4, #0]
 8004e0a:	6829      	ldr	r1, [r5, #0]
 8004e0c:	0606      	lsls	r6, r0, #24
 8004e0e:	f101 0304 	add.w	r3, r1, #4
 8004e12:	d50a      	bpl.n	8004e2a <_printf_i+0xce>
 8004e14:	680e      	ldr	r6, [r1, #0]
 8004e16:	602b      	str	r3, [r5, #0]
 8004e18:	2e00      	cmp	r6, #0
 8004e1a:	da03      	bge.n	8004e24 <_printf_i+0xc8>
 8004e1c:	232d      	movs	r3, #45	; 0x2d
 8004e1e:	4276      	negs	r6, r6
 8004e20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e24:	485e      	ldr	r0, [pc, #376]	; (8004fa0 <_printf_i+0x244>)
 8004e26:	230a      	movs	r3, #10
 8004e28:	e019      	b.n	8004e5e <_printf_i+0x102>
 8004e2a:	680e      	ldr	r6, [r1, #0]
 8004e2c:	602b      	str	r3, [r5, #0]
 8004e2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e32:	bf18      	it	ne
 8004e34:	b236      	sxthne	r6, r6
 8004e36:	e7ef      	b.n	8004e18 <_printf_i+0xbc>
 8004e38:	682b      	ldr	r3, [r5, #0]
 8004e3a:	6820      	ldr	r0, [r4, #0]
 8004e3c:	1d19      	adds	r1, r3, #4
 8004e3e:	6029      	str	r1, [r5, #0]
 8004e40:	0601      	lsls	r1, r0, #24
 8004e42:	d501      	bpl.n	8004e48 <_printf_i+0xec>
 8004e44:	681e      	ldr	r6, [r3, #0]
 8004e46:	e002      	b.n	8004e4e <_printf_i+0xf2>
 8004e48:	0646      	lsls	r6, r0, #25
 8004e4a:	d5fb      	bpl.n	8004e44 <_printf_i+0xe8>
 8004e4c:	881e      	ldrh	r6, [r3, #0]
 8004e4e:	4854      	ldr	r0, [pc, #336]	; (8004fa0 <_printf_i+0x244>)
 8004e50:	2f6f      	cmp	r7, #111	; 0x6f
 8004e52:	bf0c      	ite	eq
 8004e54:	2308      	moveq	r3, #8
 8004e56:	230a      	movne	r3, #10
 8004e58:	2100      	movs	r1, #0
 8004e5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e5e:	6865      	ldr	r5, [r4, #4]
 8004e60:	60a5      	str	r5, [r4, #8]
 8004e62:	2d00      	cmp	r5, #0
 8004e64:	bfa2      	ittt	ge
 8004e66:	6821      	ldrge	r1, [r4, #0]
 8004e68:	f021 0104 	bicge.w	r1, r1, #4
 8004e6c:	6021      	strge	r1, [r4, #0]
 8004e6e:	b90e      	cbnz	r6, 8004e74 <_printf_i+0x118>
 8004e70:	2d00      	cmp	r5, #0
 8004e72:	d04d      	beq.n	8004f10 <_printf_i+0x1b4>
 8004e74:	4615      	mov	r5, r2
 8004e76:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e7a:	fb03 6711 	mls	r7, r3, r1, r6
 8004e7e:	5dc7      	ldrb	r7, [r0, r7]
 8004e80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e84:	4637      	mov	r7, r6
 8004e86:	42bb      	cmp	r3, r7
 8004e88:	460e      	mov	r6, r1
 8004e8a:	d9f4      	bls.n	8004e76 <_printf_i+0x11a>
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d10b      	bne.n	8004ea8 <_printf_i+0x14c>
 8004e90:	6823      	ldr	r3, [r4, #0]
 8004e92:	07de      	lsls	r6, r3, #31
 8004e94:	d508      	bpl.n	8004ea8 <_printf_i+0x14c>
 8004e96:	6923      	ldr	r3, [r4, #16]
 8004e98:	6861      	ldr	r1, [r4, #4]
 8004e9a:	4299      	cmp	r1, r3
 8004e9c:	bfde      	ittt	le
 8004e9e:	2330      	movle	r3, #48	; 0x30
 8004ea0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ea4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ea8:	1b52      	subs	r2, r2, r5
 8004eaa:	6122      	str	r2, [r4, #16]
 8004eac:	f8cd a000 	str.w	sl, [sp]
 8004eb0:	464b      	mov	r3, r9
 8004eb2:	aa03      	add	r2, sp, #12
 8004eb4:	4621      	mov	r1, r4
 8004eb6:	4640      	mov	r0, r8
 8004eb8:	f7ff fee2 	bl	8004c80 <_printf_common>
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	d14c      	bne.n	8004f5a <_printf_i+0x1fe>
 8004ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec4:	b004      	add	sp, #16
 8004ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eca:	4835      	ldr	r0, [pc, #212]	; (8004fa0 <_printf_i+0x244>)
 8004ecc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ed0:	6829      	ldr	r1, [r5, #0]
 8004ed2:	6823      	ldr	r3, [r4, #0]
 8004ed4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ed8:	6029      	str	r1, [r5, #0]
 8004eda:	061d      	lsls	r5, r3, #24
 8004edc:	d514      	bpl.n	8004f08 <_printf_i+0x1ac>
 8004ede:	07df      	lsls	r7, r3, #31
 8004ee0:	bf44      	itt	mi
 8004ee2:	f043 0320 	orrmi.w	r3, r3, #32
 8004ee6:	6023      	strmi	r3, [r4, #0]
 8004ee8:	b91e      	cbnz	r6, 8004ef2 <_printf_i+0x196>
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	f023 0320 	bic.w	r3, r3, #32
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	2310      	movs	r3, #16
 8004ef4:	e7b0      	b.n	8004e58 <_printf_i+0xfc>
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	f043 0320 	orr.w	r3, r3, #32
 8004efc:	6023      	str	r3, [r4, #0]
 8004efe:	2378      	movs	r3, #120	; 0x78
 8004f00:	4828      	ldr	r0, [pc, #160]	; (8004fa4 <_printf_i+0x248>)
 8004f02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f06:	e7e3      	b.n	8004ed0 <_printf_i+0x174>
 8004f08:	0659      	lsls	r1, r3, #25
 8004f0a:	bf48      	it	mi
 8004f0c:	b2b6      	uxthmi	r6, r6
 8004f0e:	e7e6      	b.n	8004ede <_printf_i+0x182>
 8004f10:	4615      	mov	r5, r2
 8004f12:	e7bb      	b.n	8004e8c <_printf_i+0x130>
 8004f14:	682b      	ldr	r3, [r5, #0]
 8004f16:	6826      	ldr	r6, [r4, #0]
 8004f18:	6961      	ldr	r1, [r4, #20]
 8004f1a:	1d18      	adds	r0, r3, #4
 8004f1c:	6028      	str	r0, [r5, #0]
 8004f1e:	0635      	lsls	r5, r6, #24
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	d501      	bpl.n	8004f28 <_printf_i+0x1cc>
 8004f24:	6019      	str	r1, [r3, #0]
 8004f26:	e002      	b.n	8004f2e <_printf_i+0x1d2>
 8004f28:	0670      	lsls	r0, r6, #25
 8004f2a:	d5fb      	bpl.n	8004f24 <_printf_i+0x1c8>
 8004f2c:	8019      	strh	r1, [r3, #0]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	6123      	str	r3, [r4, #16]
 8004f32:	4615      	mov	r5, r2
 8004f34:	e7ba      	b.n	8004eac <_printf_i+0x150>
 8004f36:	682b      	ldr	r3, [r5, #0]
 8004f38:	1d1a      	adds	r2, r3, #4
 8004f3a:	602a      	str	r2, [r5, #0]
 8004f3c:	681d      	ldr	r5, [r3, #0]
 8004f3e:	6862      	ldr	r2, [r4, #4]
 8004f40:	2100      	movs	r1, #0
 8004f42:	4628      	mov	r0, r5
 8004f44:	f7fb f94c 	bl	80001e0 <memchr>
 8004f48:	b108      	cbz	r0, 8004f4e <_printf_i+0x1f2>
 8004f4a:	1b40      	subs	r0, r0, r5
 8004f4c:	6060      	str	r0, [r4, #4]
 8004f4e:	6863      	ldr	r3, [r4, #4]
 8004f50:	6123      	str	r3, [r4, #16]
 8004f52:	2300      	movs	r3, #0
 8004f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f58:	e7a8      	b.n	8004eac <_printf_i+0x150>
 8004f5a:	6923      	ldr	r3, [r4, #16]
 8004f5c:	462a      	mov	r2, r5
 8004f5e:	4649      	mov	r1, r9
 8004f60:	4640      	mov	r0, r8
 8004f62:	47d0      	blx	sl
 8004f64:	3001      	adds	r0, #1
 8004f66:	d0ab      	beq.n	8004ec0 <_printf_i+0x164>
 8004f68:	6823      	ldr	r3, [r4, #0]
 8004f6a:	079b      	lsls	r3, r3, #30
 8004f6c:	d413      	bmi.n	8004f96 <_printf_i+0x23a>
 8004f6e:	68e0      	ldr	r0, [r4, #12]
 8004f70:	9b03      	ldr	r3, [sp, #12]
 8004f72:	4298      	cmp	r0, r3
 8004f74:	bfb8      	it	lt
 8004f76:	4618      	movlt	r0, r3
 8004f78:	e7a4      	b.n	8004ec4 <_printf_i+0x168>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	4632      	mov	r2, r6
 8004f7e:	4649      	mov	r1, r9
 8004f80:	4640      	mov	r0, r8
 8004f82:	47d0      	blx	sl
 8004f84:	3001      	adds	r0, #1
 8004f86:	d09b      	beq.n	8004ec0 <_printf_i+0x164>
 8004f88:	3501      	adds	r5, #1
 8004f8a:	68e3      	ldr	r3, [r4, #12]
 8004f8c:	9903      	ldr	r1, [sp, #12]
 8004f8e:	1a5b      	subs	r3, r3, r1
 8004f90:	42ab      	cmp	r3, r5
 8004f92:	dcf2      	bgt.n	8004f7a <_printf_i+0x21e>
 8004f94:	e7eb      	b.n	8004f6e <_printf_i+0x212>
 8004f96:	2500      	movs	r5, #0
 8004f98:	f104 0619 	add.w	r6, r4, #25
 8004f9c:	e7f5      	b.n	8004f8a <_printf_i+0x22e>
 8004f9e:	bf00      	nop
 8004fa0:	080053b1 	.word	0x080053b1
 8004fa4:	080053c2 	.word	0x080053c2

08004fa8 <_putc_r>:
 8004fa8:	b570      	push	{r4, r5, r6, lr}
 8004faa:	460d      	mov	r5, r1
 8004fac:	4614      	mov	r4, r2
 8004fae:	4606      	mov	r6, r0
 8004fb0:	b118      	cbz	r0, 8004fba <_putc_r+0x12>
 8004fb2:	6983      	ldr	r3, [r0, #24]
 8004fb4:	b90b      	cbnz	r3, 8004fba <_putc_r+0x12>
 8004fb6:	f7ff fb23 	bl	8004600 <__sinit>
 8004fba:	4b1c      	ldr	r3, [pc, #112]	; (800502c <_putc_r+0x84>)
 8004fbc:	429c      	cmp	r4, r3
 8004fbe:	d124      	bne.n	800500a <_putc_r+0x62>
 8004fc0:	6874      	ldr	r4, [r6, #4]
 8004fc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fc4:	07d8      	lsls	r0, r3, #31
 8004fc6:	d405      	bmi.n	8004fd4 <_putc_r+0x2c>
 8004fc8:	89a3      	ldrh	r3, [r4, #12]
 8004fca:	0599      	lsls	r1, r3, #22
 8004fcc:	d402      	bmi.n	8004fd4 <_putc_r+0x2c>
 8004fce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fd0:	f7ff fbb4 	bl	800473c <__retarget_lock_acquire_recursive>
 8004fd4:	68a3      	ldr	r3, [r4, #8]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	60a3      	str	r3, [r4, #8]
 8004fdc:	da05      	bge.n	8004fea <_putc_r+0x42>
 8004fde:	69a2      	ldr	r2, [r4, #24]
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	db1c      	blt.n	800501e <_putc_r+0x76>
 8004fe4:	b2eb      	uxtb	r3, r5
 8004fe6:	2b0a      	cmp	r3, #10
 8004fe8:	d019      	beq.n	800501e <_putc_r+0x76>
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	6022      	str	r2, [r4, #0]
 8004ff0:	701d      	strb	r5, [r3, #0]
 8004ff2:	b2ed      	uxtb	r5, r5
 8004ff4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ff6:	07da      	lsls	r2, r3, #31
 8004ff8:	d405      	bmi.n	8005006 <_putc_r+0x5e>
 8004ffa:	89a3      	ldrh	r3, [r4, #12]
 8004ffc:	059b      	lsls	r3, r3, #22
 8004ffe:	d402      	bmi.n	8005006 <_putc_r+0x5e>
 8005000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005002:	f7ff fb9c 	bl	800473e <__retarget_lock_release_recursive>
 8005006:	4628      	mov	r0, r5
 8005008:	bd70      	pop	{r4, r5, r6, pc}
 800500a:	4b09      	ldr	r3, [pc, #36]	; (8005030 <_putc_r+0x88>)
 800500c:	429c      	cmp	r4, r3
 800500e:	d101      	bne.n	8005014 <_putc_r+0x6c>
 8005010:	68b4      	ldr	r4, [r6, #8]
 8005012:	e7d6      	b.n	8004fc2 <_putc_r+0x1a>
 8005014:	4b07      	ldr	r3, [pc, #28]	; (8005034 <_putc_r+0x8c>)
 8005016:	429c      	cmp	r4, r3
 8005018:	bf08      	it	eq
 800501a:	68f4      	ldreq	r4, [r6, #12]
 800501c:	e7d1      	b.n	8004fc2 <_putc_r+0x1a>
 800501e:	4629      	mov	r1, r5
 8005020:	4622      	mov	r2, r4
 8005022:	4630      	mov	r0, r6
 8005024:	f7ff f912 	bl	800424c <__swbuf_r>
 8005028:	4605      	mov	r5, r0
 800502a:	e7e3      	b.n	8004ff4 <_putc_r+0x4c>
 800502c:	08005360 	.word	0x08005360
 8005030:	08005380 	.word	0x08005380
 8005034:	08005340 	.word	0x08005340

08005038 <_sbrk_r>:
 8005038:	b538      	push	{r3, r4, r5, lr}
 800503a:	4d06      	ldr	r5, [pc, #24]	; (8005054 <_sbrk_r+0x1c>)
 800503c:	2300      	movs	r3, #0
 800503e:	4604      	mov	r4, r0
 8005040:	4608      	mov	r0, r1
 8005042:	602b      	str	r3, [r5, #0]
 8005044:	f7fc f9b0 	bl	80013a8 <_sbrk>
 8005048:	1c43      	adds	r3, r0, #1
 800504a:	d102      	bne.n	8005052 <_sbrk_r+0x1a>
 800504c:	682b      	ldr	r3, [r5, #0]
 800504e:	b103      	cbz	r3, 8005052 <_sbrk_r+0x1a>
 8005050:	6023      	str	r3, [r4, #0]
 8005052:	bd38      	pop	{r3, r4, r5, pc}
 8005054:	200001dc 	.word	0x200001dc

08005058 <__sread>:
 8005058:	b510      	push	{r4, lr}
 800505a:	460c      	mov	r4, r1
 800505c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005060:	f000 f8a0 	bl	80051a4 <_read_r>
 8005064:	2800      	cmp	r0, #0
 8005066:	bfab      	itete	ge
 8005068:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800506a:	89a3      	ldrhlt	r3, [r4, #12]
 800506c:	181b      	addge	r3, r3, r0
 800506e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005072:	bfac      	ite	ge
 8005074:	6563      	strge	r3, [r4, #84]	; 0x54
 8005076:	81a3      	strhlt	r3, [r4, #12]
 8005078:	bd10      	pop	{r4, pc}

0800507a <__swrite>:
 800507a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800507e:	461f      	mov	r7, r3
 8005080:	898b      	ldrh	r3, [r1, #12]
 8005082:	05db      	lsls	r3, r3, #23
 8005084:	4605      	mov	r5, r0
 8005086:	460c      	mov	r4, r1
 8005088:	4616      	mov	r6, r2
 800508a:	d505      	bpl.n	8005098 <__swrite+0x1e>
 800508c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005090:	2302      	movs	r3, #2
 8005092:	2200      	movs	r2, #0
 8005094:	f000 f868 	bl	8005168 <_lseek_r>
 8005098:	89a3      	ldrh	r3, [r4, #12]
 800509a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800509e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050a2:	81a3      	strh	r3, [r4, #12]
 80050a4:	4632      	mov	r2, r6
 80050a6:	463b      	mov	r3, r7
 80050a8:	4628      	mov	r0, r5
 80050aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050ae:	f000 b817 	b.w	80050e0 <_write_r>

080050b2 <__sseek>:
 80050b2:	b510      	push	{r4, lr}
 80050b4:	460c      	mov	r4, r1
 80050b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ba:	f000 f855 	bl	8005168 <_lseek_r>
 80050be:	1c43      	adds	r3, r0, #1
 80050c0:	89a3      	ldrh	r3, [r4, #12]
 80050c2:	bf15      	itete	ne
 80050c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80050c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80050ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80050ce:	81a3      	strheq	r3, [r4, #12]
 80050d0:	bf18      	it	ne
 80050d2:	81a3      	strhne	r3, [r4, #12]
 80050d4:	bd10      	pop	{r4, pc}

080050d6 <__sclose>:
 80050d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050da:	f000 b813 	b.w	8005104 <_close_r>
	...

080050e0 <_write_r>:
 80050e0:	b538      	push	{r3, r4, r5, lr}
 80050e2:	4d07      	ldr	r5, [pc, #28]	; (8005100 <_write_r+0x20>)
 80050e4:	4604      	mov	r4, r0
 80050e6:	4608      	mov	r0, r1
 80050e8:	4611      	mov	r1, r2
 80050ea:	2200      	movs	r2, #0
 80050ec:	602a      	str	r2, [r5, #0]
 80050ee:	461a      	mov	r2, r3
 80050f0:	f7fb fa6f 	bl	80005d2 <_write>
 80050f4:	1c43      	adds	r3, r0, #1
 80050f6:	d102      	bne.n	80050fe <_write_r+0x1e>
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	b103      	cbz	r3, 80050fe <_write_r+0x1e>
 80050fc:	6023      	str	r3, [r4, #0]
 80050fe:	bd38      	pop	{r3, r4, r5, pc}
 8005100:	200001dc 	.word	0x200001dc

08005104 <_close_r>:
 8005104:	b538      	push	{r3, r4, r5, lr}
 8005106:	4d06      	ldr	r5, [pc, #24]	; (8005120 <_close_r+0x1c>)
 8005108:	2300      	movs	r3, #0
 800510a:	4604      	mov	r4, r0
 800510c:	4608      	mov	r0, r1
 800510e:	602b      	str	r3, [r5, #0]
 8005110:	f7fc f915 	bl	800133e <_close>
 8005114:	1c43      	adds	r3, r0, #1
 8005116:	d102      	bne.n	800511e <_close_r+0x1a>
 8005118:	682b      	ldr	r3, [r5, #0]
 800511a:	b103      	cbz	r3, 800511e <_close_r+0x1a>
 800511c:	6023      	str	r3, [r4, #0]
 800511e:	bd38      	pop	{r3, r4, r5, pc}
 8005120:	200001dc 	.word	0x200001dc

08005124 <_fstat_r>:
 8005124:	b538      	push	{r3, r4, r5, lr}
 8005126:	4d07      	ldr	r5, [pc, #28]	; (8005144 <_fstat_r+0x20>)
 8005128:	2300      	movs	r3, #0
 800512a:	4604      	mov	r4, r0
 800512c:	4608      	mov	r0, r1
 800512e:	4611      	mov	r1, r2
 8005130:	602b      	str	r3, [r5, #0]
 8005132:	f7fc f910 	bl	8001356 <_fstat>
 8005136:	1c43      	adds	r3, r0, #1
 8005138:	d102      	bne.n	8005140 <_fstat_r+0x1c>
 800513a:	682b      	ldr	r3, [r5, #0]
 800513c:	b103      	cbz	r3, 8005140 <_fstat_r+0x1c>
 800513e:	6023      	str	r3, [r4, #0]
 8005140:	bd38      	pop	{r3, r4, r5, pc}
 8005142:	bf00      	nop
 8005144:	200001dc 	.word	0x200001dc

08005148 <_isatty_r>:
 8005148:	b538      	push	{r3, r4, r5, lr}
 800514a:	4d06      	ldr	r5, [pc, #24]	; (8005164 <_isatty_r+0x1c>)
 800514c:	2300      	movs	r3, #0
 800514e:	4604      	mov	r4, r0
 8005150:	4608      	mov	r0, r1
 8005152:	602b      	str	r3, [r5, #0]
 8005154:	f7fc f90f 	bl	8001376 <_isatty>
 8005158:	1c43      	adds	r3, r0, #1
 800515a:	d102      	bne.n	8005162 <_isatty_r+0x1a>
 800515c:	682b      	ldr	r3, [r5, #0]
 800515e:	b103      	cbz	r3, 8005162 <_isatty_r+0x1a>
 8005160:	6023      	str	r3, [r4, #0]
 8005162:	bd38      	pop	{r3, r4, r5, pc}
 8005164:	200001dc 	.word	0x200001dc

08005168 <_lseek_r>:
 8005168:	b538      	push	{r3, r4, r5, lr}
 800516a:	4d07      	ldr	r5, [pc, #28]	; (8005188 <_lseek_r+0x20>)
 800516c:	4604      	mov	r4, r0
 800516e:	4608      	mov	r0, r1
 8005170:	4611      	mov	r1, r2
 8005172:	2200      	movs	r2, #0
 8005174:	602a      	str	r2, [r5, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	f7fc f908 	bl	800138c <_lseek>
 800517c:	1c43      	adds	r3, r0, #1
 800517e:	d102      	bne.n	8005186 <_lseek_r+0x1e>
 8005180:	682b      	ldr	r3, [r5, #0]
 8005182:	b103      	cbz	r3, 8005186 <_lseek_r+0x1e>
 8005184:	6023      	str	r3, [r4, #0]
 8005186:	bd38      	pop	{r3, r4, r5, pc}
 8005188:	200001dc 	.word	0x200001dc

0800518c <__malloc_lock>:
 800518c:	4801      	ldr	r0, [pc, #4]	; (8005194 <__malloc_lock+0x8>)
 800518e:	f7ff bad5 	b.w	800473c <__retarget_lock_acquire_recursive>
 8005192:	bf00      	nop
 8005194:	200001d0 	.word	0x200001d0

08005198 <__malloc_unlock>:
 8005198:	4801      	ldr	r0, [pc, #4]	; (80051a0 <__malloc_unlock+0x8>)
 800519a:	f7ff bad0 	b.w	800473e <__retarget_lock_release_recursive>
 800519e:	bf00      	nop
 80051a0:	200001d0 	.word	0x200001d0

080051a4 <_read_r>:
 80051a4:	b538      	push	{r3, r4, r5, lr}
 80051a6:	4d07      	ldr	r5, [pc, #28]	; (80051c4 <_read_r+0x20>)
 80051a8:	4604      	mov	r4, r0
 80051aa:	4608      	mov	r0, r1
 80051ac:	4611      	mov	r1, r2
 80051ae:	2200      	movs	r2, #0
 80051b0:	602a      	str	r2, [r5, #0]
 80051b2:	461a      	mov	r2, r3
 80051b4:	f7fc f8a6 	bl	8001304 <_read>
 80051b8:	1c43      	adds	r3, r0, #1
 80051ba:	d102      	bne.n	80051c2 <_read_r+0x1e>
 80051bc:	682b      	ldr	r3, [r5, #0]
 80051be:	b103      	cbz	r3, 80051c2 <_read_r+0x1e>
 80051c0:	6023      	str	r3, [r4, #0]
 80051c2:	bd38      	pop	{r3, r4, r5, pc}
 80051c4:	200001dc 	.word	0x200001dc

080051c8 <_init>:
 80051c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ca:	bf00      	nop
 80051cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ce:	bc08      	pop	{r3}
 80051d0:	469e      	mov	lr, r3
 80051d2:	4770      	bx	lr

080051d4 <_fini>:
 80051d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d6:	bf00      	nop
 80051d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051da:	bc08      	pop	{r3}
 80051dc:	469e      	mov	lr, r3
 80051de:	4770      	bx	lr
