
SensorFusion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f38  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  080050d8  080050d8  000150d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052f0  080052f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080052f0  080052f0  000152f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052f8  080052f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052f8  080052f8  000152f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052fc  080052fc  000152fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000070  08005370  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08005370  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdd0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ebc  00000000  00000000  0002be70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  0002dd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  0002e900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a88  00000000  00000000  0002f3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e913  00000000  00000000  00044e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008afd6  00000000  00000000  0005378b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de761  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003944  00000000  00000000  000de7b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080050c0 	.word	0x080050c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080050c0 	.word	0x080050c0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	2b00      	cmp	r3, #0
 800059a:	d013      	beq.n	80005c4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00b      	beq.n	80005c4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005ac:	e000      	b.n	80005b0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0f9      	beq.n	80005ae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c4:	687b      	ldr	r3, [r7, #4]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// overrides system _write so we can use SWD
int _write(int file, char* ptr, int len)
{
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b086      	sub	sp, #24
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	60f8      	str	r0, [r7, #12]
 80005da:	60b9      	str	r1, [r7, #8]
 80005dc:	607a      	str	r2, [r7, #4]
	for (int DataIdx = 0; DataIdx < len; DataIdx++)
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
 80005e2:	e009      	b.n	80005f8 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	1c5a      	adds	r2, r3, #1
 80005e8:	60ba      	str	r2, [r7, #8]
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ffc9 	bl	8000584 <ITM_SendChar>
	for (int DataIdx = 0; DataIdx < len; DataIdx++)
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	3301      	adds	r3, #1
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697a      	ldr	r2, [r7, #20]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	dbf1      	blt.n	80005e4 <_write+0x12>
	}
	return len;
 8000600:	687b      	ldr	r3, [r7, #4]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3718      	adds	r7, #24
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <print_hex>:

void print_hex(const uint8_t* buf, int len)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < len; i++)
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	e00a      	b.n	8000632 <print_hex+0x26>
	{
		printf("%.2hX", buf[i]);
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	4619      	mov	r1, r3
 8000626:	4808      	ldr	r0, [pc, #32]	; (8000648 <print_hex+0x3c>)
 8000628:	f003 fce8 	bl	8003ffc <iprintf>
	for (int i = 0; i < len; i++)
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	3301      	adds	r3, #1
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	429a      	cmp	r2, r3
 8000638:	dbf0      	blt.n	800061c <print_hex+0x10>
	}
	printf("\n");
 800063a:	200a      	movs	r0, #10
 800063c:	f003 fcf6 	bl	800402c <putchar>
}
 8000640:	bf00      	nop
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	080050d8 	.word	0x080050d8

0800064c <toggle_led>:


void toggle_led(led_t led)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOD, led);
 8000656:	88fb      	ldrh	r3, [r7, #6]
 8000658:	4619      	mov	r1, r3
 800065a:	4803      	ldr	r0, [pc, #12]	; (8000668 <toggle_led+0x1c>)
 800065c:	f001 f9c3 	bl	80019e6 <HAL_GPIO_TogglePin>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40020c00 	.word	0x40020c00

0800066c <set_led>:

void set_led(led_t led)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, led, GPIO_PIN_SET);
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	2201      	movs	r2, #1
 800067a:	4619      	mov	r1, r3
 800067c:	4803      	ldr	r0, [pc, #12]	; (800068c <set_led+0x20>)
 800067e:	f001 f999 	bl	80019b4 <HAL_GPIO_WritePin>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40020c00 	.word	0x40020c00

08000690 <reset_led>:

void reset_led(led_t led)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, led, GPIO_PIN_RESET);
 800069a:	88fb      	ldrh	r3, [r7, #6]
 800069c:	2200      	movs	r2, #0
 800069e:	4619      	mov	r1, r3
 80006a0:	4803      	ldr	r0, [pc, #12]	; (80006b0 <reset_led+0x20>)
 80006a2:	f001 f987 	bl	80019b4 <HAL_GPIO_WritePin>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40020c00 	.word	0x40020c00

080006b4 <print_hal>:

void print_hal(HAL_StatusTypeDef status)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
	switch (status)
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	2b03      	cmp	r3, #3
 80006c2:	d81b      	bhi.n	80006fc <print_hal+0x48>
 80006c4:	a201      	add	r2, pc, #4	; (adr r2, 80006cc <print_hal+0x18>)
 80006c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ca:	bf00      	nop
 80006cc:	080006dd 	.word	0x080006dd
 80006d0:	080006e5 	.word	0x080006e5
 80006d4:	080006f5 	.word	0x080006f5
 80006d8:	080006ed 	.word	0x080006ed
	{
		case HAL_OK:
			printf("HAL OK\n");
 80006dc:	4809      	ldr	r0, [pc, #36]	; (8000704 <print_hal+0x50>)
 80006de:	f003 fd29 	bl	8004134 <puts>
			break;
 80006e2:	e00b      	b.n	80006fc <print_hal+0x48>
		case HAL_ERROR:
			printf("HAL ERROR\n");
 80006e4:	4808      	ldr	r0, [pc, #32]	; (8000708 <print_hal+0x54>)
 80006e6:	f003 fd25 	bl	8004134 <puts>
			break;
 80006ea:	e007      	b.n	80006fc <print_hal+0x48>
		case HAL_TIMEOUT:
			printf("HAL TIMEOUT\n");
 80006ec:	4807      	ldr	r0, [pc, #28]	; (800070c <print_hal+0x58>)
 80006ee:	f003 fd21 	bl	8004134 <puts>
			break;
 80006f2:	e003      	b.n	80006fc <print_hal+0x48>
		case HAL_BUSY:
			printf("HAL BUSY\n");
 80006f4:	4806      	ldr	r0, [pc, #24]	; (8000710 <print_hal+0x5c>)
 80006f6:	f003 fd1d 	bl	8004134 <puts>
			break;
 80006fa:	bf00      	nop
	}
}
 80006fc:	bf00      	nop
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	080050e0 	.word	0x080050e0
 8000708:	080050e8 	.word	0x080050e8
 800070c:	080050f4 	.word	0x080050f4
 8000710:	08005100 	.word	0x08005100

08000714 <i2c1_write>:

HAL_StatusTypeDef i2c1_write(uint8_t reg, uint8_t* buf, uint16_t len)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af04      	add	r7, sp, #16
 800071a:	4603      	mov	r3, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	71fb      	strb	r3, [r7, #7]
 8000720:	4613      	mov	r3, r2
 8000722:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(&hi2c1, LSM303_WHOAMI, reg, 1, buf, len, 100);
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	b29a      	uxth	r2, r3
 8000728:	2364      	movs	r3, #100	; 0x64
 800072a:	9302      	str	r3, [sp, #8]
 800072c:	88bb      	ldrh	r3, [r7, #4]
 800072e:	9301      	str	r3, [sp, #4]
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	2301      	movs	r3, #1
 8000736:	2133      	movs	r1, #51	; 0x33
 8000738:	480b      	ldr	r0, [pc, #44]	; (8000768 <i2c1_write+0x54>)
 800073a:	f001 fab3 	bl	8001ca4 <HAL_I2C_Mem_Write>
 800073e:	4603      	mov	r3, r0
 8000740:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK)
 8000742:	7bfb      	ldrb	r3, [r7, #15]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d009      	beq.n	800075c <i2c1_write+0x48>
	{
		printf("Failed to write %d bytes starting at register 0x%.2x to LSM303: ", len, reg);
 8000748:	88bb      	ldrh	r3, [r7, #4]
 800074a:	79fa      	ldrb	r2, [r7, #7]
 800074c:	4619      	mov	r1, r3
 800074e:	4807      	ldr	r0, [pc, #28]	; (800076c <i2c1_write+0x58>)
 8000750:	f003 fc54 	bl	8003ffc <iprintf>
		print_hal(status);
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ffac 	bl	80006b4 <print_hal>
	}
	return status;
 800075c:	7bfb      	ldrb	r3, [r7, #15]
}
 800075e:	4618      	mov	r0, r3
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	2000008c 	.word	0x2000008c
 800076c:	0800510c 	.word	0x0800510c

08000770 <i2c1_read>:

HAL_StatusTypeDef i2c1_read(uint8_t reg, uint8_t* buf, uint16_t len)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af04      	add	r7, sp, #16
 8000776:	4603      	mov	r3, r0
 8000778:	6039      	str	r1, [r7, #0]
 800077a:	71fb      	strb	r3, [r7, #7]
 800077c:	4613      	mov	r3, r2
 800077e:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(&hi2c1, LSM303_WHOAMI, reg, 1, buf, len, 100);
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	b29a      	uxth	r2, r3
 8000784:	2364      	movs	r3, #100	; 0x64
 8000786:	9302      	str	r3, [sp, #8]
 8000788:	88bb      	ldrh	r3, [r7, #4]
 800078a:	9301      	str	r3, [sp, #4]
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	2301      	movs	r3, #1
 8000792:	2133      	movs	r1, #51	; 0x33
 8000794:	480b      	ldr	r0, [pc, #44]	; (80007c4 <i2c1_read+0x54>)
 8000796:	f001 fb7f 	bl	8001e98 <HAL_I2C_Mem_Read>
 800079a:	4603      	mov	r3, r0
 800079c:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK)
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d009      	beq.n	80007b8 <i2c1_read+0x48>
	{
		printf("Failed to read %d bytes starting at register 0x%.2x from LSM303: ", len, reg);
 80007a4:	88bb      	ldrh	r3, [r7, #4]
 80007a6:	79fa      	ldrb	r2, [r7, #7]
 80007a8:	4619      	mov	r1, r3
 80007aa:	4807      	ldr	r0, [pc, #28]	; (80007c8 <i2c1_read+0x58>)
 80007ac:	f003 fc26 	bl	8003ffc <iprintf>
		print_hal(status);
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ff7e 	bl	80006b4 <print_hal>
	}
	return status;
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	2000008c 	.word	0x2000008c
 80007c8:	08005150 	.word	0x08005150

080007cc <convert_accel>:
	int y;
	int z;
} accel_t;

accel_t convert_accel(const uint8_t* buf)
{
 80007cc:	b490      	push	{r4, r7}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
	// big endian: MSB first
	accel_t ret;
	ret.x = (buf[0] << 8) + buf[1];
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	021b      	lsls	r3, r3, #8
 80007dc:	683a      	ldr	r2, [r7, #0]
 80007de:	3201      	adds	r2, #1
 80007e0:	7812      	ldrb	r2, [r2, #0]
 80007e2:	4413      	add	r3, r2
 80007e4:	60fb      	str	r3, [r7, #12]
	ret.y = (buf[2] << 8) + buf[3];
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	3302      	adds	r3, #2
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	021b      	lsls	r3, r3, #8
 80007ee:	683a      	ldr	r2, [r7, #0]
 80007f0:	3203      	adds	r2, #3
 80007f2:	7812      	ldrb	r2, [r2, #0]
 80007f4:	4413      	add	r3, r2
 80007f6:	613b      	str	r3, [r7, #16]
	ret.z = (buf[4] << 8) + buf[5];
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	3304      	adds	r3, #4
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	021b      	lsls	r3, r3, #8
 8000800:	683a      	ldr	r2, [r7, #0]
 8000802:	3205      	adds	r2, #5
 8000804:	7812      	ldrb	r2, [r2, #0]
 8000806:	4413      	add	r3, r2
 8000808:	617b      	str	r3, [r7, #20]
	return ret;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	461c      	mov	r4, r3
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000816:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bc90      	pop	{r4, r7}
 8000822:	4770      	bx	lr

08000824 <print_accel>:

void print_accel(accel_t accel)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	printf("X: %d, Y: %d, Z: %d\n", accel.x, accel.y, accel.z);
 8000830:	6879      	ldr	r1, [r7, #4]
 8000832:	68ba      	ldr	r2, [r7, #8]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	4803      	ldr	r0, [pc, #12]	; (8000844 <print_accel+0x20>)
 8000838:	f003 fbe0 	bl	8003ffc <iprintf>
}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	08005194 	.word	0x08005194

08000848 <my_init>:

#define COMMENT "Printing without length spec"

void my_init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
	printf(COMMENT);
 800084e:	4820      	ldr	r0, [pc, #128]	; (80008d0 <my_init+0x88>)
 8000850:	f003 fbd4 	bl	8003ffc <iprintf>
	printf("\n");
 8000854:	200a      	movs	r0, #10
 8000856:	f003 fbe9 	bl	800402c <putchar>

	uint8_t whoami = 0x00;
 800085a:	2300      	movs	r3, #0
 800085c:	71fb      	strb	r3, [r7, #7]
	i2c1_read(LSM303_WHOAMI_REG, &whoami, 1);
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	2201      	movs	r2, #1
 8000862:	4619      	mov	r1, r3
 8000864:	200f      	movs	r0, #15
 8000866:	f7ff ff83 	bl	8000770 <i2c1_read>
	printf("WHOAMI: 0x%.2x\n", whoami);
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	4619      	mov	r1, r3
 800086e:	4819      	ldr	r0, [pc, #100]	; (80008d4 <my_init+0x8c>)
 8000870:	f003 fbc4 	bl	8003ffc <iprintf>

	uint8_t ctrl_reg1 = 0b01010111;
 8000874:	2357      	movs	r3, #87	; 0x57
 8000876:	71bb      	strb	r3, [r7, #6]
	i2c1_write(LSM303_CTRL1, &ctrl_reg1, 1);
 8000878:	1dbb      	adds	r3, r7, #6
 800087a:	2201      	movs	r2, #1
 800087c:	4619      	mov	r1, r3
 800087e:	2020      	movs	r0, #32
 8000880:	f7ff ff48 	bl	8000714 <i2c1_write>
	ctrl_reg1 = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	71bb      	strb	r3, [r7, #6]
	i2c1_read(LSM303_CTRL1, &ctrl_reg1, 1);
 8000888:	1dbb      	adds	r3, r7, #6
 800088a:	2201      	movs	r2, #1
 800088c:	4619      	mov	r1, r3
 800088e:	2020      	movs	r0, #32
 8000890:	f7ff ff6e 	bl	8000770 <i2c1_read>
	printf("CTRL_REG1: 0x%.2x\n", ctrl_reg1);
 8000894:	79bb      	ldrb	r3, [r7, #6]
 8000896:	4619      	mov	r1, r3
 8000898:	480f      	ldr	r0, [pc, #60]	; (80008d8 <my_init+0x90>)
 800089a:	f003 fbaf 	bl	8003ffc <iprintf>

	uint8_t ctrl_reg4 = 0b01001000;
 800089e:	2348      	movs	r3, #72	; 0x48
 80008a0:	717b      	strb	r3, [r7, #5]
	i2c1_write(LSM303_CTRL1 + 3, &ctrl_reg4, 1);
 80008a2:	1d7b      	adds	r3, r7, #5
 80008a4:	2201      	movs	r2, #1
 80008a6:	4619      	mov	r1, r3
 80008a8:	2023      	movs	r0, #35	; 0x23
 80008aa:	f7ff ff33 	bl	8000714 <i2c1_write>
	ctrl_reg4 = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	717b      	strb	r3, [r7, #5]
	i2c1_read(LSM303_CTRL1 + 3, &ctrl_reg4, 1);
 80008b2:	1d7b      	adds	r3, r7, #5
 80008b4:	2201      	movs	r2, #1
 80008b6:	4619      	mov	r1, r3
 80008b8:	2023      	movs	r0, #35	; 0x23
 80008ba:	f7ff ff59 	bl	8000770 <i2c1_read>
	printf("CTRL_REG4: 0x%.2x\n", ctrl_reg4);
 80008be:	797b      	ldrb	r3, [r7, #5]
 80008c0:	4619      	mov	r1, r3
 80008c2:	4806      	ldr	r0, [pc, #24]	; (80008dc <my_init+0x94>)
 80008c4:	f003 fb9a 	bl	8003ffc <iprintf>
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	080051ac 	.word	0x080051ac
 80008d4:	080051cc 	.word	0x080051cc
 80008d8:	080051dc 	.word	0x080051dc
 80008dc:	080051f0 	.word	0x080051f0

080008e0 <loop>:


void loop(int loop_count)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t accel[6];
	accel_t acceleration_mg;

	i2c1_read(LSM303_STATUS, &status, 1);
 80008e8:	f107 031b 	add.w	r3, r7, #27
 80008ec:	2201      	movs	r2, #1
 80008ee:	4619      	mov	r1, r3
 80008f0:	2027      	movs	r0, #39	; 0x27
 80008f2:	f7ff ff3d 	bl	8000770 <i2c1_read>
	printf("Status register: 0x%.2x\n", status);
 80008f6:	7efb      	ldrb	r3, [r7, #27]
 80008f8:	4619      	mov	r1, r3
 80008fa:	481c      	ldr	r0, [pc, #112]	; (800096c <loop+0x8c>)
 80008fc:	f003 fb7e 	bl	8003ffc <iprintf>
	if (status & 0b00001000) // xyz ready
 8000900:	7efb      	ldrb	r3, [r7, #27]
 8000902:	f003 0308 	and.w	r3, r3, #8
 8000906:	2b00      	cmp	r3, #0
 8000908:	d02c      	beq.n	8000964 <loop+0x84>
	{
		for (int i = 0; i < 6; i++)
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
 800090e:	e00e      	b.n	800092e <loop+0x4e>
		{
			i2c1_read(LSM303_DATA + i, accel + i, 1);
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	b2db      	uxtb	r3, r3
 8000914:	3328      	adds	r3, #40	; 0x28
 8000916:	b2d8      	uxtb	r0, r3
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	f107 0214 	add.w	r2, r7, #20
 800091e:	4413      	add	r3, r2
 8000920:	2201      	movs	r2, #1
 8000922:	4619      	mov	r1, r3
 8000924:	f7ff ff24 	bl	8000770 <i2c1_read>
		for (int i = 0; i < 6; i++)
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	3301      	adds	r3, #1
 800092c:	61fb      	str	r3, [r7, #28]
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	2b05      	cmp	r3, #5
 8000932:	dded      	ble.n	8000910 <loop+0x30>
		}
		// i2c1_read(LSM303_DATA, accel, 6);
		printf("(%d) Acceleration register: ", loop_count);
 8000934:	6879      	ldr	r1, [r7, #4]
 8000936:	480e      	ldr	r0, [pc, #56]	; (8000970 <loop+0x90>)
 8000938:	f003 fb60 	bl	8003ffc <iprintf>
		print_hex(accel, 6);
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	2106      	movs	r1, #6
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fe62 	bl	800060c <print_hex>
		acceleration_mg = convert_accel(accel);
 8000948:	f107 0308 	add.w	r3, r7, #8
 800094c:	f107 0214 	add.w	r2, r7, #20
 8000950:	4611      	mov	r1, r2
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ff3a 	bl	80007cc <convert_accel>
		print_accel(acceleration_mg);
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000960:	f7ff ff60 	bl	8000824 <print_accel>
	}
}
 8000964:	bf00      	nop
 8000966:	3720      	adds	r7, #32
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	08005204 	.word	0x08005204
 8000970:	08005220 	.word	0x08005220

08000974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097a:	f000 fd03 	bl	8001384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097e:	f000 f837 	bl	80009f0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000982:	f000 f89d 	bl	8000ac0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000986:	f000 f985 	bl	8000c94 <MX_GPIO_Init>
  MX_I2S2_Init();
 800098a:	f000 f8e7 	bl	8000b5c <MX_I2S2_Init>
  MX_I2S3_Init();
 800098e:	f000 f913 	bl	8000bb8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000992:	f000 f941 	bl	8000c18 <MX_SPI1_Init>
  MX_USB_OTG_FS_USB_Init();
 8000996:	f000 f975 	bl	8000c84 <MX_USB_OTG_FS_USB_Init>
  MX_I2C1_Init();
 800099a:	f000 f8b1 	bl	8000b00 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  my_init();
 800099e:	f7ff ff53 	bl	8000848 <my_init>
  int loop_counter = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 80009a6:	2101      	movs	r1, #1
 80009a8:	4810      	ldr	r0, [pc, #64]	; (80009ec <main+0x78>)
 80009aa:	f000 ffeb 	bl	8001984 <HAL_GPIO_ReadPin>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d10e      	bne.n	80009d2 <main+0x5e>
	  {
		  loop(++loop_counter);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3301      	adds	r3, #1
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff ff90 	bl	80008e0 <loop>
		  toggle_led(BLUE);
 80009c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80009c4:	f7ff fe42 	bl	800064c <toggle_led>
		  set_led(ORANGE);
 80009c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009cc:	f7ff fe4e 	bl	800066c <set_led>
 80009d0:	e007      	b.n	80009e2 <main+0x6e>
	  }
	  else
	  {
		  reset_led(BLUE);
 80009d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80009d6:	f7ff fe5b 	bl	8000690 <reset_led>
		  toggle_led(ORANGE);
 80009da:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009de:	f7ff fe35 	bl	800064c <toggle_led>
	  }
    HAL_Delay(100);
 80009e2:	2064      	movs	r0, #100	; 0x64
 80009e4:	f000 fd40 	bl	8001468 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 80009e8:	e7dd      	b.n	80009a6 <main+0x32>
 80009ea:	bf00      	nop
 80009ec:	40020000 	.word	0x40020000

080009f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b094      	sub	sp, #80	; 0x50
 80009f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f6:	f107 0320 	add.w	r3, r7, #32
 80009fa:	2230      	movs	r2, #48	; 0x30
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f003 faf4 	bl	8003fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <SystemClock_Config+0xc8>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	4a26      	ldr	r2, [pc, #152]	; (8000ab8 <SystemClock_Config+0xc8>)
 8000a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a22:	6413      	str	r3, [r2, #64]	; 0x40
 8000a24:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <SystemClock_Config+0xc8>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	4b21      	ldr	r3, [pc, #132]	; (8000abc <SystemClock_Config+0xcc>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a20      	ldr	r2, [pc, #128]	; (8000abc <SystemClock_Config+0xcc>)
 8000a3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <SystemClock_Config+0xcc>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a56:	2302      	movs	r3, #2
 8000a58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a60:	2304      	movs	r3, #4
 8000a62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000a64:	23c0      	movs	r3, #192	; 0xc0
 8000a66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a68:	2304      	movs	r3, #4
 8000a6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000a6c:	2308      	movs	r3, #8
 8000a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a70:	f107 0320 	add.w	r3, r7, #32
 8000a74:	4618      	mov	r0, r3
 8000a76:	f002 fc31 	bl	80032dc <HAL_RCC_OscConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a80:	f000 fa00 	bl	8000e84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a84:	230f      	movs	r3, #15
 8000a86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	2103      	movs	r1, #3
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f002 fe93 	bl	80037cc <HAL_RCC_ClockConfig>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000aac:	f000 f9ea 	bl	8000e84 <Error_Handler>
  }
}
 8000ab0:	bf00      	nop
 8000ab2:	3750      	adds	r7, #80	; 0x50
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40007000 	.word	0x40007000

08000ac0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
 8000ad4:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000ada:	23c8      	movs	r3, #200	; 0xc8
 8000adc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000ade:	2305      	movs	r3, #5
 8000ae0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f003 f87b 	bl	8003be4 <HAL_RCCEx_PeriphCLKConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000af4:	f000 f9c6 	bl	8000e84 <Error_Handler>
  }
}
 8000af8:	bf00      	nop
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b06:	4a13      	ldr	r2, [pc, #76]	; (8000b54 <MX_I2C1_Init+0x54>)
 8000b08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b0c:	4a12      	ldr	r2, [pc, #72]	; (8000b58 <MX_I2C1_Init+0x58>)
 8000b0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 50;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b18:	2232      	movs	r2, #50	; 0x32
 8000b1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b3c:	4804      	ldr	r0, [pc, #16]	; (8000b50 <MX_I2C1_Init+0x50>)
 8000b3e:	f000 ff6d 	bl	8001a1c <HAL_I2C_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b48:	f000 f99c 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	2000008c 	.word	0x2000008c
 8000b54:	40005400 	.word	0x40005400
 8000b58:	000186a0 	.word	0x000186a0

08000b5c <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <MX_I2S2_Init+0x50>)
 8000b62:	4a13      	ldr	r2, [pc, #76]	; (8000bb0 <MX_I2S2_Init+0x54>)
 8000b64:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_I2S2_Init+0x50>)
 8000b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b6c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <MX_I2S2_Init+0x50>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b74:	4b0d      	ldr	r3, [pc, #52]	; (8000bac <MX_I2S2_Init+0x50>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_I2S2_Init+0x50>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <MX_I2S2_Init+0x50>)
 8000b82:	4a0c      	ldr	r2, [pc, #48]	; (8000bb4 <MX_I2S2_Init+0x58>)
 8000b84:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_I2S2_Init+0x50>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <MX_I2S2_Init+0x50>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MX_I2S2_Init+0x50>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000b98:	4804      	ldr	r0, [pc, #16]	; (8000bac <MX_I2S2_Init+0x50>)
 8000b9a:	f001 feff 	bl	800299c <HAL_I2S_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000ba4:	f000 f96e 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200000e0 	.word	0x200000e0
 8000bb0:	40003800 	.word	0x40003800
 8000bb4:	00017700 	.word	0x00017700

08000bb8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <MX_I2S3_Init+0x54>)
 8000bbe:	4a14      	ldr	r2, [pc, #80]	; (8000c10 <MX_I2S3_Init+0x58>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000bc2:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <MX_I2S3_Init+0x54>)
 8000bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <MX_I2S3_Init+0x54>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <MX_I2S3_Init+0x54>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000bd6:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <MX_I2S3_Init+0x54>)
 8000bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bdc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <MX_I2S3_Init+0x54>)
 8000be0:	4a0c      	ldr	r2, [pc, #48]	; (8000c14 <MX_I2S3_Init+0x5c>)
 8000be2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <MX_I2S3_Init+0x54>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <MX_I2S3_Init+0x54>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <MX_I2S3_Init+0x54>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000bf6:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_I2S3_Init+0x54>)
 8000bf8:	f001 fed0 	bl	800299c <HAL_I2S_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000c02:	f000 f93f 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000128 	.word	0x20000128
 8000c10:	40003c00 	.word	0x40003c00
 8000c14:	00017700 	.word	0x00017700

08000c18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c1c:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <MX_SPI1_Init+0x64>)
 8000c1e:	4a18      	ldr	r2, [pc, #96]	; (8000c80 <MX_SPI1_Init+0x68>)
 8000c20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <MX_SPI1_Init+0x64>)
 8000c24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c28:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c2a:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <MX_SPI1_Init+0x64>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <MX_SPI1_Init+0x64>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_SPI1_Init+0x64>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_SPI1_Init+0x64>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_SPI1_Init+0x64>)
 8000c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c48:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_SPI1_Init+0x64>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <MX_SPI1_Init+0x64>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_SPI1_Init+0x64>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <MX_SPI1_Init+0x64>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_SPI1_Init+0x64>)
 8000c64:	220a      	movs	r2, #10
 8000c66:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c68:	4804      	ldr	r0, [pc, #16]	; (8000c7c <MX_SPI1_Init+0x64>)
 8000c6a:	f003 f90b 	bl	8003e84 <HAL_SPI_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c74:	f000 f906 	bl	8000e84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000170 	.word	0x20000170
 8000c80:	40013000 	.word	0x40013000

08000c84 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08c      	sub	sp, #48	; 0x30
 8000c98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	61bb      	str	r3, [r7, #24]
 8000cae:	4b70      	ldr	r3, [pc, #448]	; (8000e70 <MX_GPIO_Init+0x1dc>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a6f      	ldr	r2, [pc, #444]	; (8000e70 <MX_GPIO_Init+0x1dc>)
 8000cb4:	f043 0310 	orr.w	r3, r3, #16
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b6d      	ldr	r3, [pc, #436]	; (8000e70 <MX_GPIO_Init+0x1dc>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f003 0310 	and.w	r3, r3, #16
 8000cc2:	61bb      	str	r3, [r7, #24]
 8000cc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	4b69      	ldr	r3, [pc, #420]	; (8000e70 <MX_GPIO_Init+0x1dc>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a68      	ldr	r2, [pc, #416]	; (8000e70 <MX_GPIO_Init+0x1dc>)
 8000cd0:	f043 0304 	orr.w	r3, r3, #4
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b66      	ldr	r3, [pc, #408]	; (8000e70 <MX_GPIO_Init+0x1dc>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f003 0304 	and.w	r3, r3, #4
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	4b62      	ldr	r3, [pc, #392]	; (8000e70 <MX_GPIO_Init+0x1dc>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a61      	ldr	r2, [pc, #388]	; (8000e70 <MX_GPIO_Init+0x1dc>)
 8000cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b5f      	ldr	r3, [pc, #380]	; (8000e70 <MX_GPIO_Init+0x1dc>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b5b      	ldr	r3, [pc, #364]	; (8000e70 <MX_GPIO_Init+0x1dc>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a5a      	ldr	r2, [pc, #360]	; (8000e70 <MX_GPIO_Init+0x1dc>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b58      	ldr	r3, [pc, #352]	; (8000e70 <MX_GPIO_Init+0x1dc>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	4b54      	ldr	r3, [pc, #336]	; (8000e70 <MX_GPIO_Init+0x1dc>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a53      	ldr	r2, [pc, #332]	; (8000e70 <MX_GPIO_Init+0x1dc>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b51      	ldr	r3, [pc, #324]	; (8000e70 <MX_GPIO_Init+0x1dc>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	4b4d      	ldr	r3, [pc, #308]	; (8000e70 <MX_GPIO_Init+0x1dc>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a4c      	ldr	r2, [pc, #304]	; (8000e70 <MX_GPIO_Init+0x1dc>)
 8000d40:	f043 0308 	orr.w	r3, r3, #8
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b4a      	ldr	r3, [pc, #296]	; (8000e70 <MX_GPIO_Init+0x1dc>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0308 	and.w	r3, r3, #8
 8000d4e:	607b      	str	r3, [r7, #4]
 8000d50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2108      	movs	r1, #8
 8000d56:	4847      	ldr	r0, [pc, #284]	; (8000e74 <MX_GPIO_Init+0x1e0>)
 8000d58:	f000 fe2c 	bl	80019b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	2101      	movs	r1, #1
 8000d60:	4845      	ldr	r0, [pc, #276]	; (8000e78 <MX_GPIO_Init+0x1e4>)
 8000d62:	f000 fe27 	bl	80019b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d66:	2200      	movs	r2, #0
 8000d68:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000d6c:	4843      	ldr	r0, [pc, #268]	; (8000e7c <MX_GPIO_Init+0x1e8>)
 8000d6e:	f000 fe21 	bl	80019b4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000d72:	2304      	movs	r3, #4
 8000d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	4619      	mov	r1, r3
 8000d84:	483b      	ldr	r0, [pc, #236]	; (8000e74 <MX_GPIO_Init+0x1e0>)
 8000d86:	f000 fc79 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d8a:	2308      	movs	r3, #8
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4834      	ldr	r0, [pc, #208]	; (8000e74 <MX_GPIO_Init+0x1e0>)
 8000da2:	f000 fc6b 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000da6:	2332      	movs	r3, #50	; 0x32
 8000da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000daa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	4619      	mov	r1, r3
 8000dba:	482e      	ldr	r0, [pc, #184]	; (8000e74 <MX_GPIO_Init+0x1e0>)
 8000dbc:	f000 fc5e 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	f107 031c 	add.w	r3, r7, #28
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4828      	ldr	r0, [pc, #160]	; (8000e78 <MX_GPIO_Init+0x1e4>)
 8000dd8:	f000 fc50 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	4619      	mov	r1, r3
 8000dee:	4824      	ldr	r0, [pc, #144]	; (8000e80 <MX_GPIO_Init+0x1ec>)
 8000df0:	f000 fc44 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000df4:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000df8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	481b      	ldr	r0, [pc, #108]	; (8000e7c <MX_GPIO_Init+0x1e8>)
 8000e0e:	f000 fc35 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000e12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000e20:	f107 031c 	add.w	r3, r7, #28
 8000e24:	4619      	mov	r1, r3
 8000e26:	4816      	ldr	r0, [pc, #88]	; (8000e80 <MX_GPIO_Init+0x1ec>)
 8000e28:	f000 fc28 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000e2c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e3e:	230a      	movs	r3, #10
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 031c 	add.w	r3, r7, #28
 8000e46:	4619      	mov	r1, r3
 8000e48:	480d      	ldr	r0, [pc, #52]	; (8000e80 <MX_GPIO_Init+0x1ec>)
 8000e4a:	f000 fc17 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e4e:	2320      	movs	r3, #32
 8000e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4806      	ldr	r0, [pc, #24]	; (8000e7c <MX_GPIO_Init+0x1e8>)
 8000e62:	f000 fc0b 	bl	800167c <HAL_GPIO_Init>

}
 8000e66:	bf00      	nop
 8000e68:	3730      	adds	r7, #48	; 0x30
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40020800 	.word	0x40020800
 8000e7c:	40020c00 	.word	0x40020c00
 8000e80:	40020000 	.word	0x40020000

08000e84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e88:	b672      	cpsid	i
}
 8000e8a:	bf00      	nop

  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  toggle_led(RED);
 8000e8c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e90:	f7ff fbdc 	bl	800064c <toggle_led>
	  HAL_Delay(50);
 8000e94:	2032      	movs	r0, #50	; 0x32
 8000e96:	f000 fae7 	bl	8001468 <HAL_Delay>
	  toggle_led(RED);
 8000e9a:	e7f7      	b.n	8000e8c <Error_Handler+0x8>

08000e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <HAL_MspInit+0x4c>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ee8 <HAL_MspInit+0x4c>)
 8000eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <HAL_MspInit+0x4c>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	603b      	str	r3, [r7, #0]
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <HAL_MspInit+0x4c>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <HAL_MspInit+0x4c>)
 8000ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_MspInit+0x4c>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000eda:	2007      	movs	r0, #7
 8000edc:	f000 fb9a 	bl	8001614 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40023800 	.word	0x40023800

08000eec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a19      	ldr	r2, [pc, #100]	; (8000f70 <HAL_I2C_MspInit+0x84>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d12c      	bne.n	8000f68 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <HAL_I2C_MspInit+0x88>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a17      	ldr	r2, [pc, #92]	; (8000f74 <HAL_I2C_MspInit+0x88>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_I2C_MspInit+0x88>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000f2a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f30:	2312      	movs	r3, #18
 8000f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	480c      	ldr	r0, [pc, #48]	; (8000f78 <HAL_I2C_MspInit+0x8c>)
 8000f48:	f000 fb98 	bl	800167c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <HAL_I2C_MspInit+0x88>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	4a07      	ldr	r2, [pc, #28]	; (8000f74 <HAL_I2C_MspInit+0x88>)
 8000f56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <HAL_I2C_MspInit+0x88>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f68:	bf00      	nop
 8000f6a:	3728      	adds	r7, #40	; 0x28
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40005400 	.word	0x40005400
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020400 	.word	0x40020400

08000f7c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08e      	sub	sp, #56	; 0x38
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a59      	ldr	r2, [pc, #356]	; (8001100 <HAL_I2S_MspInit+0x184>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d15b      	bne.n	8001056 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
 8000fa2:	4b58      	ldr	r3, [pc, #352]	; (8001104 <HAL_I2S_MspInit+0x188>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	4a57      	ldr	r2, [pc, #348]	; (8001104 <HAL_I2S_MspInit+0x188>)
 8000fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fac:	6413      	str	r3, [r2, #64]	; 0x40
 8000fae:	4b55      	ldr	r3, [pc, #340]	; (8001104 <HAL_I2S_MspInit+0x188>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb6:	623b      	str	r3, [r7, #32]
 8000fb8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
 8000fbe:	4b51      	ldr	r3, [pc, #324]	; (8001104 <HAL_I2S_MspInit+0x188>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a50      	ldr	r2, [pc, #320]	; (8001104 <HAL_I2S_MspInit+0x188>)
 8000fc4:	f043 0304 	orr.w	r3, r3, #4
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b4e      	ldr	r3, [pc, #312]	; (8001104 <HAL_I2S_MspInit+0x188>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0304 	and.w	r3, r3, #4
 8000fd2:	61fb      	str	r3, [r7, #28]
 8000fd4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
 8000fda:	4b4a      	ldr	r3, [pc, #296]	; (8001104 <HAL_I2S_MspInit+0x188>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a49      	ldr	r2, [pc, #292]	; (8001104 <HAL_I2S_MspInit+0x188>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b47      	ldr	r3, [pc, #284]	; (8001104 <HAL_I2S_MspInit+0x188>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	61bb      	str	r3, [r7, #24]
 8000ff0:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001002:	2306      	movs	r3, #6
 8001004:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100a:	4619      	mov	r1, r3
 800100c:	483e      	ldr	r0, [pc, #248]	; (8001108 <HAL_I2S_MspInit+0x18c>)
 800100e:	f000 fb35 	bl	800167c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001012:	2308      	movs	r3, #8
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001022:	2305      	movs	r3, #5
 8001024:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102a:	4619      	mov	r1, r3
 800102c:	4836      	ldr	r0, [pc, #216]	; (8001108 <HAL_I2S_MspInit+0x18c>)
 800102e:	f000 fb25 	bl	800167c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001032:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001044:	2305      	movs	r3, #5
 8001046:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104c:	4619      	mov	r1, r3
 800104e:	482f      	ldr	r0, [pc, #188]	; (800110c <HAL_I2S_MspInit+0x190>)
 8001050:	f000 fb14 	bl	800167c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001054:	e04f      	b.n	80010f6 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a2d      	ldr	r2, [pc, #180]	; (8001110 <HAL_I2S_MspInit+0x194>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d14a      	bne.n	80010f6 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	4b27      	ldr	r3, [pc, #156]	; (8001104 <HAL_I2S_MspInit+0x188>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	4a26      	ldr	r2, [pc, #152]	; (8001104 <HAL_I2S_MspInit+0x188>)
 800106a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800106e:	6413      	str	r3, [r2, #64]	; 0x40
 8001070:	4b24      	ldr	r3, [pc, #144]	; (8001104 <HAL_I2S_MspInit+0x188>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	4b20      	ldr	r3, [pc, #128]	; (8001104 <HAL_I2S_MspInit+0x188>)
 8001082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001084:	4a1f      	ldr	r2, [pc, #124]	; (8001104 <HAL_I2S_MspInit+0x188>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	6313      	str	r3, [r2, #48]	; 0x30
 800108c:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <HAL_I2S_MspInit+0x188>)
 800108e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	4b19      	ldr	r3, [pc, #100]	; (8001104 <HAL_I2S_MspInit+0x188>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a0:	4a18      	ldr	r2, [pc, #96]	; (8001104 <HAL_I2S_MspInit+0x188>)
 80010a2:	f043 0304 	orr.w	r3, r3, #4
 80010a6:	6313      	str	r3, [r2, #48]	; 0x30
 80010a8:	4b16      	ldr	r3, [pc, #88]	; (8001104 <HAL_I2S_MspInit+0x188>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80010b4:	2310      	movs	r3, #16
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010c4:	2306      	movs	r3, #6
 80010c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80010c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010cc:	4619      	mov	r1, r3
 80010ce:	4811      	ldr	r0, [pc, #68]	; (8001114 <HAL_I2S_MspInit+0x198>)
 80010d0:	f000 fad4 	bl	800167c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80010d4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010e6:	2306      	movs	r3, #6
 80010e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ee:	4619      	mov	r1, r3
 80010f0:	4805      	ldr	r0, [pc, #20]	; (8001108 <HAL_I2S_MspInit+0x18c>)
 80010f2:	f000 fac3 	bl	800167c <HAL_GPIO_Init>
}
 80010f6:	bf00      	nop
 80010f8:	3738      	adds	r7, #56	; 0x38
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40003800 	.word	0x40003800
 8001104:	40023800 	.word	0x40023800
 8001108:	40020800 	.word	0x40020800
 800110c:	40020400 	.word	0x40020400
 8001110:	40003c00 	.word	0x40003c00
 8001114:	40020000 	.word	0x40020000

08001118 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08a      	sub	sp, #40	; 0x28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a19      	ldr	r2, [pc, #100]	; (800119c <HAL_SPI_MspInit+0x84>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d12b      	bne.n	8001192 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <HAL_SPI_MspInit+0x88>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	4a17      	ldr	r2, [pc, #92]	; (80011a0 <HAL_SPI_MspInit+0x88>)
 8001144:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001148:	6453      	str	r3, [r2, #68]	; 0x44
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <HAL_SPI_MspInit+0x88>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <HAL_SPI_MspInit+0x88>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a10      	ldr	r2, [pc, #64]	; (80011a0 <HAL_SPI_MspInit+0x88>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <HAL_SPI_MspInit+0x88>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001172:	23e0      	movs	r3, #224	; 0xe0
 8001174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001182:	2305      	movs	r3, #5
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <HAL_SPI_MspInit+0x8c>)
 800118e:	f000 fa75 	bl	800167c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	; 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40013000 	.word	0x40013000
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020000 	.word	0x40020000

080011a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <NMI_Handler+0x4>

080011ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b2:	e7fe      	b.n	80011b2 <HardFault_Handler+0x4>

080011b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <MemManage_Handler+0x4>

080011ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011be:	e7fe      	b.n	80011be <BusFault_Handler+0x4>

080011c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <UsageFault_Handler+0x4>

080011c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f4:	f000 f918 	bl	8001428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}

080011fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	e00a      	b.n	8001224 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800120e:	f3af 8000 	nop.w
 8001212:	4601      	mov	r1, r0
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	60ba      	str	r2, [r7, #8]
 800121a:	b2ca      	uxtb	r2, r1
 800121c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	3301      	adds	r3, #1
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	429a      	cmp	r2, r3
 800122a:	dbf0      	blt.n	800120e <_read+0x12>
	}

return len;
 800122c:	687b      	ldr	r3, [r7, #4]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
	return -1;
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800125e:	605a      	str	r2, [r3, #4]
	return 0;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <_isatty>:

int _isatty(int file)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
	return 1;
 8001276:	2301      	movs	r3, #1
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
	return 0;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a8:	4a14      	ldr	r2, [pc, #80]	; (80012fc <_sbrk+0x5c>)
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <_sbrk+0x60>)
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b4:	4b13      	ldr	r3, [pc, #76]	; (8001304 <_sbrk+0x64>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d102      	bne.n	80012c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <_sbrk+0x64>)
 80012be:	4a12      	ldr	r2, [pc, #72]	; (8001308 <_sbrk+0x68>)
 80012c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <_sbrk+0x64>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d207      	bcs.n	80012e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d0:	f002 fe62 	bl	8003f98 <__errno>
 80012d4:	4603      	mov	r3, r0
 80012d6:	220c      	movs	r2, #12
 80012d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	e009      	b.n	80012f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <_sbrk+0x64>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012e6:	4b07      	ldr	r3, [pc, #28]	; (8001304 <_sbrk+0x64>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <_sbrk+0x64>)
 80012f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012f2:	68fb      	ldr	r3, [r7, #12]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20020000 	.word	0x20020000
 8001300:	00000400 	.word	0x00000400
 8001304:	200001c8 	.word	0x200001c8
 8001308:	200001e0 	.word	0x200001e0

0800130c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <SystemInit+0x20>)
 8001312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001316:	4a05      	ldr	r2, [pc, #20]	; (800132c <SystemInit+0x20>)
 8001318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800131c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001368 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001334:	480d      	ldr	r0, [pc, #52]	; (800136c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001336:	490e      	ldr	r1, [pc, #56]	; (8001370 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001338:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800133c:	e002      	b.n	8001344 <LoopCopyDataInit>

0800133e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001342:	3304      	adds	r3, #4

08001344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001348:	d3f9      	bcc.n	800133e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134a:	4a0b      	ldr	r2, [pc, #44]	; (8001378 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800134c:	4c0b      	ldr	r4, [pc, #44]	; (800137c <LoopFillZerobss+0x26>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001350:	e001      	b.n	8001356 <LoopFillZerobss>

08001352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001354:	3204      	adds	r2, #4

08001356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001358:	d3fb      	bcc.n	8001352 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800135a:	f7ff ffd7 	bl	800130c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800135e:	f002 fe21 	bl	8003fa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001362:	f7ff fb07 	bl	8000974 <main>
  bx  lr    
 8001366:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001368:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800136c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001370:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001374:	08005300 	.word	0x08005300
  ldr r2, =_sbss
 8001378:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800137c:	200001e0 	.word	0x200001e0

08001380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001380:	e7fe      	b.n	8001380 <ADC_IRQHandler>
	...

08001384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <HAL_Init+0x40>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <HAL_Init+0x40>)
 800138e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001392:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_Init+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <HAL_Init+0x40>)
 800139a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800139e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <HAL_Init+0x40>)
 80013a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ac:	2003      	movs	r0, #3
 80013ae:	f000 f931 	bl	8001614 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f000 f808 	bl	80013c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b8:	f7ff fd70 	bl	8000e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023c00 	.word	0x40023c00

080013c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_InitTick+0x54>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_InitTick+0x58>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013de:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f93b 	bl	8001662 <HAL_SYSTICK_Config>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00e      	b.n	8001414 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d80a      	bhi.n	8001412 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fc:	2200      	movs	r2, #0
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f000 f911 	bl	800162a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001408:	4a06      	ldr	r2, [pc, #24]	; (8001424 <HAL_InitTick+0x5c>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e000      	b.n	8001414 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000000 	.word	0x20000000
 8001420:	20000008 	.word	0x20000008
 8001424:	20000004 	.word	0x20000004

08001428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_IncTick+0x20>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_IncTick+0x24>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4a04      	ldr	r2, [pc, #16]	; (800144c <HAL_IncTick+0x24>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000008 	.word	0x20000008
 800144c:	200001cc 	.word	0x200001cc

08001450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b03      	ldr	r3, [pc, #12]	; (8001464 <HAL_GetTick+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	200001cc 	.word	0x200001cc

08001468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001470:	f7ff ffee 	bl	8001450 <HAL_GetTick>
 8001474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001480:	d005      	beq.n	800148e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <HAL_Delay+0x44>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4413      	add	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800148e:	bf00      	nop
 8001490:	f7ff ffde 	bl	8001450 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	429a      	cmp	r2, r3
 800149e:	d8f7      	bhi.n	8001490 <HAL_Delay+0x28>
  {
  }
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000008 	.word	0x20000008

080014b0 <__NVIC_SetPriorityGrouping>:
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014cc:	4013      	ands	r3, r2
 80014ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e2:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	60d3      	str	r3, [r2, #12]
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_GetPriorityGrouping>:
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <__NVIC_GetPriorityGrouping+0x18>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	f003 0307 	and.w	r3, r3, #7
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_SetPriority>:
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	2b00      	cmp	r3, #0
 8001526:	db0a      	blt.n	800153e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	b2da      	uxtb	r2, r3
 800152c:	490c      	ldr	r1, [pc, #48]	; (8001560 <__NVIC_SetPriority+0x4c>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	0112      	lsls	r2, r2, #4
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	440b      	add	r3, r1
 8001538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800153c:	e00a      	b.n	8001554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4908      	ldr	r1, [pc, #32]	; (8001564 <__NVIC_SetPriority+0x50>)
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	3b04      	subs	r3, #4
 800154c:	0112      	lsls	r2, r2, #4
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	440b      	add	r3, r1
 8001552:	761a      	strb	r2, [r3, #24]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000e100 	.word	0xe000e100
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <NVIC_EncodePriority>:
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f1c3 0307 	rsb	r3, r3, #7
 8001582:	2b04      	cmp	r3, #4
 8001584:	bf28      	it	cs
 8001586:	2304      	movcs	r3, #4
 8001588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3304      	adds	r3, #4
 800158e:	2b06      	cmp	r3, #6
 8001590:	d902      	bls.n	8001598 <NVIC_EncodePriority+0x30>
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3b03      	subs	r3, #3
 8001596:	e000      	b.n	800159a <NVIC_EncodePriority+0x32>
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	f04f 32ff 	mov.w	r2, #4294967295
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43da      	mvns	r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	401a      	ands	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b0:	f04f 31ff 	mov.w	r1, #4294967295
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	43d9      	mvns	r1, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	4313      	orrs	r3, r2
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3724      	adds	r7, #36	; 0x24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <SysTick_Config>:
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e0:	d301      	bcc.n	80015e6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00f      	b.n	8001606 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <SysTick_Config+0x40>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ee:	210f      	movs	r1, #15
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295
 80015f4:	f7ff ff8e 	bl	8001514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <SysTick_Config+0x40>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <SysTick_Config+0x40>)
 8001600:	2207      	movs	r2, #7
 8001602:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	e000e010 	.word	0xe000e010

08001614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff47 	bl	80014b0 <__NVIC_SetPriorityGrouping>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800163c:	f7ff ff5c 	bl	80014f8 <__NVIC_GetPriorityGrouping>
 8001640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	6978      	ldr	r0, [r7, #20]
 8001648:	f7ff ff8e 	bl	8001568 <NVIC_EncodePriority>
 800164c:	4602      	mov	r2, r0
 800164e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff5d 	bl	8001514 <__NVIC_SetPriority>
}
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff ffb0 	bl	80015d0 <SysTick_Config>
 8001670:	4603      	mov	r3, r0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	; 0x24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
 8001696:	e159      	b.n	800194c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001698:	2201      	movs	r2, #1
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	f040 8148 	bne.w	8001946 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d005      	beq.n	80016ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d130      	bne.n	8001730 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	2203      	movs	r2, #3
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001704:	2201      	movs	r2, #1
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	091b      	lsrs	r3, r3, #4
 800171a:	f003 0201 	and.w	r2, r3, #1
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	2b03      	cmp	r3, #3
 800173a:	d017      	beq.n	800176c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	2203      	movs	r2, #3
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d123      	bne.n	80017c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	08da      	lsrs	r2, r3, #3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3208      	adds	r2, #8
 8001780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001784:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	220f      	movs	r2, #15
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	691a      	ldr	r2, [r3, #16]
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	08da      	lsrs	r2, r3, #3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3208      	adds	r2, #8
 80017ba:	69b9      	ldr	r1, [r7, #24]
 80017bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	2203      	movs	r2, #3
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0203 	and.w	r2, r3, #3
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 80a2 	beq.w	8001946 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	4b57      	ldr	r3, [pc, #348]	; (8001964 <HAL_GPIO_Init+0x2e8>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	4a56      	ldr	r2, [pc, #344]	; (8001964 <HAL_GPIO_Init+0x2e8>)
 800180c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001810:	6453      	str	r3, [r2, #68]	; 0x44
 8001812:	4b54      	ldr	r3, [pc, #336]	; (8001964 <HAL_GPIO_Init+0x2e8>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800181e:	4a52      	ldr	r2, [pc, #328]	; (8001968 <HAL_GPIO_Init+0x2ec>)
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	089b      	lsrs	r3, r3, #2
 8001824:	3302      	adds	r3, #2
 8001826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	220f      	movs	r2, #15
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a49      	ldr	r2, [pc, #292]	; (800196c <HAL_GPIO_Init+0x2f0>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d019      	beq.n	800187e <HAL_GPIO_Init+0x202>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a48      	ldr	r2, [pc, #288]	; (8001970 <HAL_GPIO_Init+0x2f4>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d013      	beq.n	800187a <HAL_GPIO_Init+0x1fe>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a47      	ldr	r2, [pc, #284]	; (8001974 <HAL_GPIO_Init+0x2f8>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d00d      	beq.n	8001876 <HAL_GPIO_Init+0x1fa>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a46      	ldr	r2, [pc, #280]	; (8001978 <HAL_GPIO_Init+0x2fc>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d007      	beq.n	8001872 <HAL_GPIO_Init+0x1f6>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a45      	ldr	r2, [pc, #276]	; (800197c <HAL_GPIO_Init+0x300>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d101      	bne.n	800186e <HAL_GPIO_Init+0x1f2>
 800186a:	2304      	movs	r3, #4
 800186c:	e008      	b.n	8001880 <HAL_GPIO_Init+0x204>
 800186e:	2307      	movs	r3, #7
 8001870:	e006      	b.n	8001880 <HAL_GPIO_Init+0x204>
 8001872:	2303      	movs	r3, #3
 8001874:	e004      	b.n	8001880 <HAL_GPIO_Init+0x204>
 8001876:	2302      	movs	r3, #2
 8001878:	e002      	b.n	8001880 <HAL_GPIO_Init+0x204>
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <HAL_GPIO_Init+0x204>
 800187e:	2300      	movs	r3, #0
 8001880:	69fa      	ldr	r2, [r7, #28]
 8001882:	f002 0203 	and.w	r2, r2, #3
 8001886:	0092      	lsls	r2, r2, #2
 8001888:	4093      	lsls	r3, r2
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001890:	4935      	ldr	r1, [pc, #212]	; (8001968 <HAL_GPIO_Init+0x2ec>)
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	089b      	lsrs	r3, r3, #2
 8001896:	3302      	adds	r3, #2
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800189e:	4b38      	ldr	r3, [pc, #224]	; (8001980 <HAL_GPIO_Init+0x304>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018c2:	4a2f      	ldr	r2, [pc, #188]	; (8001980 <HAL_GPIO_Init+0x304>)
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018c8:	4b2d      	ldr	r3, [pc, #180]	; (8001980 <HAL_GPIO_Init+0x304>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018ec:	4a24      	ldr	r2, [pc, #144]	; (8001980 <HAL_GPIO_Init+0x304>)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018f2:	4b23      	ldr	r3, [pc, #140]	; (8001980 <HAL_GPIO_Init+0x304>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4013      	ands	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001916:	4a1a      	ldr	r2, [pc, #104]	; (8001980 <HAL_GPIO_Init+0x304>)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800191c:	4b18      	ldr	r3, [pc, #96]	; (8001980 <HAL_GPIO_Init+0x304>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001940:	4a0f      	ldr	r2, [pc, #60]	; (8001980 <HAL_GPIO_Init+0x304>)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3301      	adds	r3, #1
 800194a:	61fb      	str	r3, [r7, #28]
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	2b0f      	cmp	r3, #15
 8001950:	f67f aea2 	bls.w	8001698 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001954:	bf00      	nop
 8001956:	bf00      	nop
 8001958:	3724      	adds	r7, #36	; 0x24
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800
 8001968:	40013800 	.word	0x40013800
 800196c:	40020000 	.word	0x40020000
 8001970:	40020400 	.word	0x40020400
 8001974:	40020800 	.word	0x40020800
 8001978:	40020c00 	.word	0x40020c00
 800197c:	40021000 	.word	0x40021000
 8001980:	40013c00 	.word	0x40013c00

08001984 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691a      	ldr	r2, [r3, #16]
 8001994:	887b      	ldrh	r3, [r7, #2]
 8001996:	4013      	ands	r3, r2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d002      	beq.n	80019a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
 80019a0:	e001      	b.n	80019a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019a2:	2300      	movs	r3, #0
 80019a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	807b      	strh	r3, [r7, #2]
 80019c0:	4613      	mov	r3, r2
 80019c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019c4:	787b      	ldrb	r3, [r7, #1]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ca:	887a      	ldrh	r2, [r7, #2]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019d0:	e003      	b.n	80019da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019d2:	887b      	ldrh	r3, [r7, #2]
 80019d4:	041a      	lsls	r2, r3, #16
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	619a      	str	r2, [r3, #24]
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b085      	sub	sp, #20
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	460b      	mov	r3, r1
 80019f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019f8:	887a      	ldrh	r2, [r7, #2]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4013      	ands	r3, r2
 80019fe:	041a      	lsls	r2, r3, #16
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	43d9      	mvns	r1, r3
 8001a04:	887b      	ldrh	r3, [r7, #2]
 8001a06:	400b      	ands	r3, r1
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	619a      	str	r2, [r3, #24]
}
 8001a0e:	bf00      	nop
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e12b      	b.n	8001c86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d106      	bne.n	8001a48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff fa52 	bl	8000eec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2224      	movs	r2, #36	; 0x24
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0201 	bic.w	r2, r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a80:	f002 f89c 	bl	8003bbc <HAL_RCC_GetPCLK1Freq>
 8001a84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	4a81      	ldr	r2, [pc, #516]	; (8001c90 <HAL_I2C_Init+0x274>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d807      	bhi.n	8001aa0 <HAL_I2C_Init+0x84>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4a80      	ldr	r2, [pc, #512]	; (8001c94 <HAL_I2C_Init+0x278>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	bf94      	ite	ls
 8001a98:	2301      	movls	r3, #1
 8001a9a:	2300      	movhi	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	e006      	b.n	8001aae <HAL_I2C_Init+0x92>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4a7d      	ldr	r2, [pc, #500]	; (8001c98 <HAL_I2C_Init+0x27c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	bf94      	ite	ls
 8001aa8:	2301      	movls	r3, #1
 8001aaa:	2300      	movhi	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e0e7      	b.n	8001c86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4a78      	ldr	r2, [pc, #480]	; (8001c9c <HAL_I2C_Init+0x280>)
 8001aba:	fba2 2303 	umull	r2, r3, r2, r3
 8001abe:	0c9b      	lsrs	r3, r3, #18
 8001ac0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	4a6a      	ldr	r2, [pc, #424]	; (8001c90 <HAL_I2C_Init+0x274>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d802      	bhi.n	8001af0 <HAL_I2C_Init+0xd4>
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	3301      	adds	r3, #1
 8001aee:	e009      	b.n	8001b04 <HAL_I2C_Init+0xe8>
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001af6:	fb02 f303 	mul.w	r3, r2, r3
 8001afa:	4a69      	ldr	r2, [pc, #420]	; (8001ca0 <HAL_I2C_Init+0x284>)
 8001afc:	fba2 2303 	umull	r2, r3, r2, r3
 8001b00:	099b      	lsrs	r3, r3, #6
 8001b02:	3301      	adds	r3, #1
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	495c      	ldr	r1, [pc, #368]	; (8001c90 <HAL_I2C_Init+0x274>)
 8001b20:	428b      	cmp	r3, r1
 8001b22:	d819      	bhi.n	8001b58 <HAL_I2C_Init+0x13c>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	1e59      	subs	r1, r3, #1
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b32:	1c59      	adds	r1, r3, #1
 8001b34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b38:	400b      	ands	r3, r1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00a      	beq.n	8001b54 <HAL_I2C_Init+0x138>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1e59      	subs	r1, r3, #1
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b52:	e051      	b.n	8001bf8 <HAL_I2C_Init+0x1dc>
 8001b54:	2304      	movs	r3, #4
 8001b56:	e04f      	b.n	8001bf8 <HAL_I2C_Init+0x1dc>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d111      	bne.n	8001b84 <HAL_I2C_Init+0x168>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	1e58      	subs	r0, r3, #1
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6859      	ldr	r1, [r3, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	440b      	add	r3, r1
 8001b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b72:	3301      	adds	r3, #1
 8001b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bf0c      	ite	eq
 8001b7c:	2301      	moveq	r3, #1
 8001b7e:	2300      	movne	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	e012      	b.n	8001baa <HAL_I2C_Init+0x18e>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	1e58      	subs	r0, r3, #1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6859      	ldr	r1, [r3, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	0099      	lsls	r1, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	bf0c      	ite	eq
 8001ba4:	2301      	moveq	r3, #1
 8001ba6:	2300      	movne	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_I2C_Init+0x196>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e022      	b.n	8001bf8 <HAL_I2C_Init+0x1dc>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10e      	bne.n	8001bd8 <HAL_I2C_Init+0x1bc>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1e58      	subs	r0, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6859      	ldr	r1, [r3, #4]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	440b      	add	r3, r1
 8001bc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bcc:	3301      	adds	r3, #1
 8001bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bd6:	e00f      	b.n	8001bf8 <HAL_I2C_Init+0x1dc>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	1e58      	subs	r0, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6859      	ldr	r1, [r3, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	0099      	lsls	r1, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bee:	3301      	adds	r3, #1
 8001bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	6809      	ldr	r1, [r1, #0]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69da      	ldr	r2, [r3, #28]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6911      	ldr	r1, [r2, #16]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68d2      	ldr	r2, [r2, #12]
 8001c32:	4311      	orrs	r1, r2
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695a      	ldr	r2, [r3, #20]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	430a      	orrs	r2, r1
 8001c56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0201 	orr.w	r2, r2, #1
 8001c66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2220      	movs	r2, #32
 8001c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	000186a0 	.word	0x000186a0
 8001c94:	001e847f 	.word	0x001e847f
 8001c98:	003d08ff 	.word	0x003d08ff
 8001c9c:	431bde83 	.word	0x431bde83
 8001ca0:	10624dd3 	.word	0x10624dd3

08001ca4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af02      	add	r7, sp, #8
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	4608      	mov	r0, r1
 8001cae:	4611      	mov	r1, r2
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	817b      	strh	r3, [r7, #10]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	813b      	strh	r3, [r7, #8]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cbe:	f7ff fbc7 	bl	8001450 <HAL_GetTick>
 8001cc2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b20      	cmp	r3, #32
 8001cce:	f040 80d9 	bne.w	8001e84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	2319      	movs	r3, #25
 8001cd8:	2201      	movs	r2, #1
 8001cda:	496d      	ldr	r1, [pc, #436]	; (8001e90 <HAL_I2C_Mem_Write+0x1ec>)
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 fc7f 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	e0cc      	b.n	8001e86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d101      	bne.n	8001cfa <HAL_I2C_Mem_Write+0x56>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e0c5      	b.n	8001e86 <HAL_I2C_Mem_Write+0x1e2>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d007      	beq.n	8001d20 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2221      	movs	r2, #33	; 0x21
 8001d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2240      	movs	r2, #64	; 0x40
 8001d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6a3a      	ldr	r2, [r7, #32]
 8001d4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4a4d      	ldr	r2, [pc, #308]	; (8001e94 <HAL_I2C_Mem_Write+0x1f0>)
 8001d60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d62:	88f8      	ldrh	r0, [r7, #6]
 8001d64:	893a      	ldrh	r2, [r7, #8]
 8001d66:	8979      	ldrh	r1, [r7, #10]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	9301      	str	r3, [sp, #4]
 8001d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	4603      	mov	r3, r0
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 fab6 	bl	80022e4 <I2C_RequestMemoryWrite>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d052      	beq.n	8001e24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e081      	b.n	8001e86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f000 fd00 	bl	800278c <I2C_WaitOnTXEFlagUntilTimeout>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00d      	beq.n	8001dae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d107      	bne.n	8001daa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001da8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e06b      	b.n	8001e86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	781a      	ldrb	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d11b      	bne.n	8001e24 <HAL_I2C_Mem_Write+0x180>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d017      	beq.n	8001e24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	781a      	ldrb	r2, [r3, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1aa      	bne.n	8001d82 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f000 fcec 	bl	800280e <I2C_WaitOnBTFFlagUntilTimeout>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00d      	beq.n	8001e58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d107      	bne.n	8001e54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e016      	b.n	8001e86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	e000      	b.n	8001e86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001e84:	2302      	movs	r3, #2
  }
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	00100002 	.word	0x00100002
 8001e94:	ffff0000 	.word	0xffff0000

08001e98 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08c      	sub	sp, #48	; 0x30
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	4608      	mov	r0, r1
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	817b      	strh	r3, [r7, #10]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	813b      	strh	r3, [r7, #8]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001eb2:	f7ff facd 	bl	8001450 <HAL_GetTick>
 8001eb6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b20      	cmp	r3, #32
 8001ec2:	f040 8208 	bne.w	80022d6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	2319      	movs	r3, #25
 8001ecc:	2201      	movs	r2, #1
 8001ece:	497b      	ldr	r1, [pc, #492]	; (80020bc <HAL_I2C_Mem_Read+0x224>)
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 fb85 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001edc:	2302      	movs	r3, #2
 8001ede:	e1fb      	b.n	80022d8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d101      	bne.n	8001eee <HAL_I2C_Mem_Read+0x56>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e1f4      	b.n	80022d8 <HAL_I2C_Mem_Read+0x440>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d007      	beq.n	8001f14 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0201 	orr.w	r2, r2, #1
 8001f12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2222      	movs	r2, #34	; 0x22
 8001f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2240      	movs	r2, #64	; 0x40
 8001f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001f44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4a5b      	ldr	r2, [pc, #364]	; (80020c0 <HAL_I2C_Mem_Read+0x228>)
 8001f54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f56:	88f8      	ldrh	r0, [r7, #6]
 8001f58:	893a      	ldrh	r2, [r7, #8]
 8001f5a:	8979      	ldrh	r1, [r7, #10]
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	4603      	mov	r3, r0
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 fa52 	bl	8002410 <I2C_RequestMemoryRead>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e1b0      	b.n	80022d8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d113      	bne.n	8001fa6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f7e:	2300      	movs	r3, #0
 8001f80:	623b      	str	r3, [r7, #32]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	623b      	str	r3, [r7, #32]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	623b      	str	r3, [r7, #32]
 8001f92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	e184      	b.n	80022b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d11b      	bne.n	8001fe6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	e164      	b.n	80022b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d11b      	bne.n	8002026 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ffc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800200c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800200e:	2300      	movs	r3, #0
 8002010:	61bb      	str	r3, [r7, #24]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	61bb      	str	r3, [r7, #24]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	61bb      	str	r3, [r7, #24]
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	e144      	b.n	80022b0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800203c:	e138      	b.n	80022b0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002042:	2b03      	cmp	r3, #3
 8002044:	f200 80f1 	bhi.w	800222a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800204c:	2b01      	cmp	r3, #1
 800204e:	d123      	bne.n	8002098 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002052:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 fc1b 	bl	8002890 <I2C_WaitOnRXNEFlagUntilTimeout>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e139      	b.n	80022d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691a      	ldr	r2, [r3, #16]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002080:	3b01      	subs	r3, #1
 8002082:	b29a      	uxth	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208c:	b29b      	uxth	r3, r3
 800208e:	3b01      	subs	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002096:	e10b      	b.n	80022b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209c:	2b02      	cmp	r3, #2
 800209e:	d14e      	bne.n	800213e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a6:	2200      	movs	r2, #0
 80020a8:	4906      	ldr	r1, [pc, #24]	; (80020c4 <HAL_I2C_Mem_Read+0x22c>)
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 fa98 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d008      	beq.n	80020c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e10e      	b.n	80022d8 <HAL_I2C_Mem_Read+0x440>
 80020ba:	bf00      	nop
 80020bc:	00100002 	.word	0x00100002
 80020c0:	ffff0000 	.word	0xffff0000
 80020c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691a      	ldr	r2, [r3, #16]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002100:	b29b      	uxth	r3, r3
 8002102:	3b01      	subs	r3, #1
 8002104:	b29a      	uxth	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002126:	3b01      	subs	r3, #1
 8002128:	b29a      	uxth	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800213c:	e0b8      	b.n	80022b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002144:	2200      	movs	r2, #0
 8002146:	4966      	ldr	r1, [pc, #408]	; (80022e0 <HAL_I2C_Mem_Read+0x448>)
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 fa49 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0bf      	b.n	80022d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002166:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691a      	ldr	r2, [r3, #16]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002184:	3b01      	subs	r3, #1
 8002186:	b29a      	uxth	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a0:	2200      	movs	r2, #0
 80021a2:	494f      	ldr	r1, [pc, #316]	; (80022e0 <HAL_I2C_Mem_Read+0x448>)
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 fa1b 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e091      	b.n	80022d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e0:	3b01      	subs	r3, #1
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	3b01      	subs	r3, #1
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002212:	3b01      	subs	r3, #1
 8002214:	b29a      	uxth	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221e:	b29b      	uxth	r3, r3
 8002220:	3b01      	subs	r3, #1
 8002222:	b29a      	uxth	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002228:	e042      	b.n	80022b0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800222a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800222c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 fb2e 	bl	8002890 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e04c      	b.n	80022d8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225a:	3b01      	subs	r3, #1
 800225c:	b29a      	uxth	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002266:	b29b      	uxth	r3, r3
 8002268:	3b01      	subs	r3, #1
 800226a:	b29a      	uxth	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	2b04      	cmp	r3, #4
 800227c:	d118      	bne.n	80022b0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800229a:	3b01      	subs	r3, #1
 800229c:	b29a      	uxth	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f47f aec2 	bne.w	800203e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2220      	movs	r2, #32
 80022be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	e000      	b.n	80022d8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80022d6:	2302      	movs	r3, #2
  }
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3728      	adds	r7, #40	; 0x28
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	00010004 	.word	0x00010004

080022e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	4608      	mov	r0, r1
 80022ee:	4611      	mov	r1, r2
 80022f0:	461a      	mov	r2, r3
 80022f2:	4603      	mov	r3, r0
 80022f4:	817b      	strh	r3, [r7, #10]
 80022f6:	460b      	mov	r3, r1
 80022f8:	813b      	strh	r3, [r7, #8]
 80022fa:	4613      	mov	r3, r2
 80022fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800230c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	2200      	movs	r2, #0
 8002316:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 f960 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00d      	beq.n	8002342 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002334:	d103      	bne.n	800233e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800233c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e05f      	b.n	8002402 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002342:	897b      	ldrh	r3, [r7, #10]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	461a      	mov	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002350:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	6a3a      	ldr	r2, [r7, #32]
 8002356:	492d      	ldr	r1, [pc, #180]	; (800240c <I2C_RequestMemoryWrite+0x128>)
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f998 	bl	800268e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e04c      	b.n	8002402 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800237e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002380:	6a39      	ldr	r1, [r7, #32]
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 fa02 	bl	800278c <I2C_WaitOnTXEFlagUntilTimeout>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00d      	beq.n	80023aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	2b04      	cmp	r3, #4
 8002394:	d107      	bne.n	80023a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e02b      	b.n	8002402 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d105      	bne.n	80023bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023b0:	893b      	ldrh	r3, [r7, #8]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	611a      	str	r2, [r3, #16]
 80023ba:	e021      	b.n	8002400 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80023bc:	893b      	ldrh	r3, [r7, #8]
 80023be:	0a1b      	lsrs	r3, r3, #8
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023cc:	6a39      	ldr	r1, [r7, #32]
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f9dc 	bl	800278c <I2C_WaitOnTXEFlagUntilTimeout>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00d      	beq.n	80023f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d107      	bne.n	80023f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e005      	b.n	8002402 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023f6:	893b      	ldrh	r3, [r7, #8]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	00010002 	.word	0x00010002

08002410 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af02      	add	r7, sp, #8
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	4608      	mov	r0, r1
 800241a:	4611      	mov	r1, r2
 800241c:	461a      	mov	r2, r3
 800241e:	4603      	mov	r3, r0
 8002420:	817b      	strh	r3, [r7, #10]
 8002422:	460b      	mov	r3, r1
 8002424:	813b      	strh	r3, [r7, #8]
 8002426:	4613      	mov	r3, r2
 8002428:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002438:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002448:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	2200      	movs	r2, #0
 8002452:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f8c2 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00d      	beq.n	800247e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002470:	d103      	bne.n	800247a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002478:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e0aa      	b.n	80025d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800247e:	897b      	ldrh	r3, [r7, #10]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	461a      	mov	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800248c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	6a3a      	ldr	r2, [r7, #32]
 8002492:	4952      	ldr	r1, [pc, #328]	; (80025dc <I2C_RequestMemoryRead+0x1cc>)
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 f8fa 	bl	800268e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e097      	b.n	80025d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	617b      	str	r3, [r7, #20]
 80024b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024bc:	6a39      	ldr	r1, [r7, #32]
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f964 	bl	800278c <I2C_WaitOnTXEFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00d      	beq.n	80024e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d107      	bne.n	80024e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e076      	b.n	80025d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80024e6:	88fb      	ldrh	r3, [r7, #6]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d105      	bne.n	80024f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024ec:	893b      	ldrh	r3, [r7, #8]
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	611a      	str	r2, [r3, #16]
 80024f6:	e021      	b.n	800253c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80024f8:	893b      	ldrh	r3, [r7, #8]
 80024fa:	0a1b      	lsrs	r3, r3, #8
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002508:	6a39      	ldr	r1, [r7, #32]
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 f93e 	bl	800278c <I2C_WaitOnTXEFlagUntilTimeout>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00d      	beq.n	8002532 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	2b04      	cmp	r3, #4
 800251c:	d107      	bne.n	800252e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800252c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e050      	b.n	80025d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002532:	893b      	ldrh	r3, [r7, #8]
 8002534:	b2da      	uxtb	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800253c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253e:	6a39      	ldr	r1, [r7, #32]
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 f923 	bl	800278c <I2C_WaitOnTXEFlagUntilTimeout>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00d      	beq.n	8002568 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	2b04      	cmp	r3, #4
 8002552:	d107      	bne.n	8002564 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002562:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e035      	b.n	80025d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002576:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	2200      	movs	r2, #0
 8002580:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 f82b 	bl	80025e0 <I2C_WaitOnFlagUntilTimeout>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00d      	beq.n	80025ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800259e:	d103      	bne.n	80025a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e013      	b.n	80025d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80025ac:	897b      	ldrh	r3, [r7, #10]
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	6a3a      	ldr	r2, [r7, #32]
 80025c0:	4906      	ldr	r1, [pc, #24]	; (80025dc <I2C_RequestMemoryRead+0x1cc>)
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 f863 	bl	800268e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	00010002 	.word	0x00010002

080025e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	603b      	str	r3, [r7, #0]
 80025ec:	4613      	mov	r3, r2
 80025ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025f0:	e025      	b.n	800263e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f8:	d021      	beq.n	800263e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025fa:	f7fe ff29 	bl	8001450 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d302      	bcc.n	8002610 <I2C_WaitOnFlagUntilTimeout+0x30>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d116      	bne.n	800263e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2200      	movs	r2, #0
 8002614:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2220      	movs	r2, #32
 800261a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f043 0220 	orr.w	r2, r3, #32
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e023      	b.n	8002686 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	0c1b      	lsrs	r3, r3, #16
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b01      	cmp	r3, #1
 8002646:	d10d      	bne.n	8002664 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	43da      	mvns	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	4013      	ands	r3, r2
 8002654:	b29b      	uxth	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	bf0c      	ite	eq
 800265a:	2301      	moveq	r3, #1
 800265c:	2300      	movne	r3, #0
 800265e:	b2db      	uxtb	r3, r3
 8002660:	461a      	mov	r2, r3
 8002662:	e00c      	b.n	800267e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	43da      	mvns	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	4013      	ands	r3, r2
 8002670:	b29b      	uxth	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	bf0c      	ite	eq
 8002676:	2301      	moveq	r3, #1
 8002678:	2300      	movne	r3, #0
 800267a:	b2db      	uxtb	r3, r3
 800267c:	461a      	mov	r2, r3
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	429a      	cmp	r2, r3
 8002682:	d0b6      	beq.n	80025f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b084      	sub	sp, #16
 8002692:	af00      	add	r7, sp, #0
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
 800269a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800269c:	e051      	b.n	8002742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ac:	d123      	bne.n	80026f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2220      	movs	r2, #32
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f043 0204 	orr.w	r2, r3, #4
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e046      	b.n	8002784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fc:	d021      	beq.n	8002742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026fe:	f7fe fea7 	bl	8001450 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	429a      	cmp	r2, r3
 800270c:	d302      	bcc.n	8002714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d116      	bne.n	8002742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2220      	movs	r2, #32
 800271e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f043 0220 	orr.w	r2, r3, #32
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e020      	b.n	8002784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	0c1b      	lsrs	r3, r3, #16
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b01      	cmp	r3, #1
 800274a:	d10c      	bne.n	8002766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	43da      	mvns	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	4013      	ands	r3, r2
 8002758:	b29b      	uxth	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	bf14      	ite	ne
 800275e:	2301      	movne	r3, #1
 8002760:	2300      	moveq	r3, #0
 8002762:	b2db      	uxtb	r3, r3
 8002764:	e00b      	b.n	800277e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	43da      	mvns	r2, r3
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	4013      	ands	r3, r2
 8002772:	b29b      	uxth	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	bf14      	ite	ne
 8002778:	2301      	movne	r3, #1
 800277a:	2300      	moveq	r3, #0
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d18d      	bne.n	800269e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002798:	e02d      	b.n	80027f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 f8ce 	bl	800293c <I2C_IsAcknowledgeFailed>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e02d      	b.n	8002806 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b0:	d021      	beq.n	80027f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b2:	f7fe fe4d 	bl	8001450 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d302      	bcc.n	80027c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d116      	bne.n	80027f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2220      	movs	r2, #32
 80027d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f043 0220 	orr.w	r2, r3, #32
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e007      	b.n	8002806 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002800:	2b80      	cmp	r3, #128	; 0x80
 8002802:	d1ca      	bne.n	800279a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b084      	sub	sp, #16
 8002812:	af00      	add	r7, sp, #0
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800281a:	e02d      	b.n	8002878 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 f88d 	bl	800293c <I2C_IsAcknowledgeFailed>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e02d      	b.n	8002888 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002832:	d021      	beq.n	8002878 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002834:	f7fe fe0c 	bl	8001450 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	429a      	cmp	r2, r3
 8002842:	d302      	bcc.n	800284a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d116      	bne.n	8002878 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	f043 0220 	orr.w	r2, r3, #32
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e007      	b.n	8002888 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	2b04      	cmp	r3, #4
 8002884:	d1ca      	bne.n	800281c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800289c:	e042      	b.n	8002924 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	2b10      	cmp	r3, #16
 80028aa:	d119      	bne.n	80028e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f06f 0210 	mvn.w	r2, #16
 80028b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e029      	b.n	8002934 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028e0:	f7fe fdb6 	bl	8001450 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d302      	bcc.n	80028f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d116      	bne.n	8002924 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	f043 0220 	orr.w	r2, r3, #32
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e007      	b.n	8002934 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292e:	2b40      	cmp	r3, #64	; 0x40
 8002930:	d1b5      	bne.n	800289e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002952:	d11b      	bne.n	800298c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800295c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	f043 0204 	orr.w	r2, r3, #4
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e000      	b.n	800298e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e128      	b.n	8002c00 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d109      	bne.n	80029ce <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a90      	ldr	r2, [pc, #576]	; (8002c08 <HAL_I2S_Init+0x26c>)
 80029c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7fe fad7 	bl	8000f7c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2202      	movs	r2, #2
 80029d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80029e4:	f023 030f 	bic.w	r3, r3, #15
 80029e8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2202      	movs	r2, #2
 80029f0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d060      	beq.n	8002abc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d102      	bne.n	8002a08 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002a02:	2310      	movs	r3, #16
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	e001      	b.n	8002a0c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002a08:	2320      	movs	r3, #32
 8002a0a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	2b20      	cmp	r3, #32
 8002a12:	d802      	bhi.n	8002a1a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002a1a:	2001      	movs	r0, #1
 8002a1c:	f001 f9d2 	bl	8003dc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002a20:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a2a:	d125      	bne.n	8002a78 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d010      	beq.n	8002a56 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a3e:	4613      	mov	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	461a      	mov	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a50:	3305      	adds	r3, #5
 8002a52:	613b      	str	r3, [r7, #16]
 8002a54:	e01f      	b.n	8002a96 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	461a      	mov	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a72:	3305      	adds	r3, #5
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	e00e      	b.n	8002a96 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	461a      	mov	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a92:	3305      	adds	r3, #5
 8002a94:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4a5c      	ldr	r2, [pc, #368]	; (8002c0c <HAL_I2S_Init+0x270>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	08db      	lsrs	r3, r3, #3
 8002aa0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	085b      	lsrs	r3, r3, #1
 8002ab2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	021b      	lsls	r3, r3, #8
 8002ab8:	61bb      	str	r3, [r7, #24]
 8002aba:	e003      	b.n	8002ac4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002abc:	2302      	movs	r3, #2
 8002abe:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d902      	bls.n	8002ad0 <HAL_I2S_Init+0x134>
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	2bff      	cmp	r3, #255	; 0xff
 8002ace:	d907      	bls.n	8002ae0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad4:	f043 0210 	orr.w	r2, r3, #16
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e08f      	b.n	8002c00 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	ea42 0103 	orr.w	r1, r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	69fa      	ldr	r2, [r7, #28]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002afe:	f023 030f 	bic.w	r3, r3, #15
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6851      	ldr	r1, [r2, #4]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6892      	ldr	r2, [r2, #8]
 8002b0a:	4311      	orrs	r1, r2
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	68d2      	ldr	r2, [r2, #12]
 8002b10:	4311      	orrs	r1, r2
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6992      	ldr	r2, [r2, #24]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b22:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d161      	bne.n	8002bf0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a38      	ldr	r2, [pc, #224]	; (8002c10 <HAL_I2S_Init+0x274>)
 8002b30:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a37      	ldr	r2, [pc, #220]	; (8002c14 <HAL_I2S_Init+0x278>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d101      	bne.n	8002b40 <HAL_I2S_Init+0x1a4>
 8002b3c:	4b36      	ldr	r3, [pc, #216]	; (8002c18 <HAL_I2S_Init+0x27c>)
 8002b3e:	e001      	b.n	8002b44 <HAL_I2S_Init+0x1a8>
 8002b40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6812      	ldr	r2, [r2, #0]
 8002b4a:	4932      	ldr	r1, [pc, #200]	; (8002c14 <HAL_I2S_Init+0x278>)
 8002b4c:	428a      	cmp	r2, r1
 8002b4e:	d101      	bne.n	8002b54 <HAL_I2S_Init+0x1b8>
 8002b50:	4a31      	ldr	r2, [pc, #196]	; (8002c18 <HAL_I2S_Init+0x27c>)
 8002b52:	e001      	b.n	8002b58 <HAL_I2S_Init+0x1bc>
 8002b54:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002b58:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002b5c:	f023 030f 	bic.w	r3, r3, #15
 8002b60:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a2b      	ldr	r2, [pc, #172]	; (8002c14 <HAL_I2S_Init+0x278>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d101      	bne.n	8002b70 <HAL_I2S_Init+0x1d4>
 8002b6c:	4b2a      	ldr	r3, [pc, #168]	; (8002c18 <HAL_I2S_Init+0x27c>)
 8002b6e:	e001      	b.n	8002b74 <HAL_I2S_Init+0x1d8>
 8002b70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b74:	2202      	movs	r2, #2
 8002b76:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a25      	ldr	r2, [pc, #148]	; (8002c14 <HAL_I2S_Init+0x278>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d101      	bne.n	8002b86 <HAL_I2S_Init+0x1ea>
 8002b82:	4b25      	ldr	r3, [pc, #148]	; (8002c18 <HAL_I2S_Init+0x27c>)
 8002b84:	e001      	b.n	8002b8a <HAL_I2S_Init+0x1ee>
 8002b86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b96:	d003      	beq.n	8002ba0 <HAL_I2S_Init+0x204>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d103      	bne.n	8002ba8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002ba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	e001      	b.n	8002bac <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	897b      	ldrh	r3, [r7, #10]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bd8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a0d      	ldr	r2, [pc, #52]	; (8002c14 <HAL_I2S_Init+0x278>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d101      	bne.n	8002be8 <HAL_I2S_Init+0x24c>
 8002be4:	4b0c      	ldr	r3, [pc, #48]	; (8002c18 <HAL_I2S_Init+0x27c>)
 8002be6:	e001      	b.n	8002bec <HAL_I2S_Init+0x250>
 8002be8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bec:	897a      	ldrh	r2, [r7, #10]
 8002bee:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3720      	adds	r7, #32
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	08002d13 	.word	0x08002d13
 8002c0c:	cccccccd 	.word	0xcccccccd
 8002c10:	08002e29 	.word	0x08002e29
 8002c14:	40003800 	.word	0x40003800
 8002c18:	40003400 	.word	0x40003400

08002c1c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	881a      	ldrh	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	1c9a      	adds	r2, r3, #2
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10e      	bne.n	8002cac <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c9c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff ffb8 	bl	8002c1c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002cac:	bf00      	nop
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	b292      	uxth	r2, r2
 8002cc8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	1c9a      	adds	r2, r3, #2
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10e      	bne.n	8002d0a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cfa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff ff93 	bl	8002c30 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b086      	sub	sp, #24
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d13a      	bne.n	8002da4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d109      	bne.n	8002d4c <I2S_IRQHandler+0x3a>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d42:	2b40      	cmp	r3, #64	; 0x40
 8002d44:	d102      	bne.n	8002d4c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7ff ffb4 	bl	8002cb4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d52:	2b40      	cmp	r3, #64	; 0x40
 8002d54:	d126      	bne.n	8002da4 <I2S_IRQHandler+0x92>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 0320 	and.w	r3, r3, #32
 8002d60:	2b20      	cmp	r3, #32
 8002d62:	d11f      	bne.n	8002da4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d72:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002d74:	2300      	movs	r3, #0
 8002d76:	613b      	str	r3, [r7, #16]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	f043 0202 	orr.w	r2, r3, #2
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff ff50 	bl	8002c44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	d136      	bne.n	8002e1e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d109      	bne.n	8002dce <I2S_IRQHandler+0xbc>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc4:	2b80      	cmp	r3, #128	; 0x80
 8002dc6:	d102      	bne.n	8002dce <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7ff ff45 	bl	8002c58 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d122      	bne.n	8002e1e <I2S_IRQHandler+0x10c>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0320 	and.w	r3, r3, #32
 8002de2:	2b20      	cmp	r3, #32
 8002de4:	d11b      	bne.n	8002e1e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002df4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e10:	f043 0204 	orr.w	r2, r3, #4
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff ff13 	bl	8002c44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e1e:	bf00      	nop
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a92      	ldr	r2, [pc, #584]	; (8003088 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d101      	bne.n	8002e46 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002e42:	4b92      	ldr	r3, [pc, #584]	; (800308c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e44:	e001      	b.n	8002e4a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002e46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a8b      	ldr	r2, [pc, #556]	; (8003088 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d101      	bne.n	8002e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002e60:	4b8a      	ldr	r3, [pc, #552]	; (800308c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e62:	e001      	b.n	8002e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002e64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e74:	d004      	beq.n	8002e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f040 8099 	bne.w	8002fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d107      	bne.n	8002e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f925 	bl	80030e4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d107      	bne.n	8002eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f9c8 	bl	8003244 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eba:	2b40      	cmp	r3, #64	; 0x40
 8002ebc:	d13a      	bne.n	8002f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	f003 0320 	and.w	r3, r3, #32
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d035      	beq.n	8002f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a6e      	ldr	r2, [pc, #440]	; (8003088 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d101      	bne.n	8002ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002ed2:	4b6e      	ldr	r3, [pc, #440]	; (800308c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ed4:	e001      	b.n	8002eda <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002ed6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4969      	ldr	r1, [pc, #420]	; (8003088 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ee2:	428b      	cmp	r3, r1
 8002ee4:	d101      	bne.n	8002eea <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002ee6:	4b69      	ldr	r3, [pc, #420]	; (800308c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ee8:	e001      	b.n	8002eee <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002eea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ef2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f02:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002f04:	2300      	movs	r3, #0
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f26:	f043 0202 	orr.w	r2, r3, #2
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff fe88 	bl	8002c44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	f040 80c3 	bne.w	80030c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f003 0320 	and.w	r3, r3, #32
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	f000 80bd 	beq.w	80030c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f5a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a49      	ldr	r2, [pc, #292]	; (8003088 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d101      	bne.n	8002f6a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002f66:	4b49      	ldr	r3, [pc, #292]	; (800308c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f68:	e001      	b.n	8002f6e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002f6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4944      	ldr	r1, [pc, #272]	; (8003088 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f76:	428b      	cmp	r3, r1
 8002f78:	d101      	bne.n	8002f7e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002f7a:	4b44      	ldr	r3, [pc, #272]	; (800308c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f7c:	e001      	b.n	8002f82 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002f7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f86:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	f043 0204 	orr.w	r2, r3, #4
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff fe4a 	bl	8002c44 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002fb0:	e089      	b.n	80030c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d107      	bne.n	8002fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f8be 	bl	8003148 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d107      	bne.n	8002fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f8fd 	bl	80031e0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fec:	2b40      	cmp	r3, #64	; 0x40
 8002fee:	d12f      	bne.n	8003050 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f003 0320 	and.w	r3, r3, #32
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d02a      	beq.n	8003050 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003008:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a1e      	ldr	r2, [pc, #120]	; (8003088 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d101      	bne.n	8003018 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003014:	4b1d      	ldr	r3, [pc, #116]	; (800308c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003016:	e001      	b.n	800301c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003018:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4919      	ldr	r1, [pc, #100]	; (8003088 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003024:	428b      	cmp	r3, r1
 8003026:	d101      	bne.n	800302c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003028:	4b18      	ldr	r3, [pc, #96]	; (800308c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800302a:	e001      	b.n	8003030 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800302c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003030:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003034:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003042:	f043 0202 	orr.w	r2, r3, #2
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff fdfa 	bl	8002c44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b08      	cmp	r3, #8
 8003058:	d136      	bne.n	80030c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	f003 0320 	and.w	r3, r3, #32
 8003060:	2b00      	cmp	r3, #0
 8003062:	d031      	beq.n	80030c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a07      	ldr	r2, [pc, #28]	; (8003088 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d101      	bne.n	8003072 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800306e:	4b07      	ldr	r3, [pc, #28]	; (800308c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003070:	e001      	b.n	8003076 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003072:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4902      	ldr	r1, [pc, #8]	; (8003088 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800307e:	428b      	cmp	r3, r1
 8003080:	d106      	bne.n	8003090 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003082:	4b02      	ldr	r3, [pc, #8]	; (800308c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003084:	e006      	b.n	8003094 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003086:	bf00      	nop
 8003088:	40003800 	.word	0x40003800
 800308c:	40003400 	.word	0x40003400
 8003090:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003094:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003098:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030a8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b6:	f043 0204 	orr.w	r2, r3, #4
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7ff fdc0 	bl	8002c44 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80030c4:	e000      	b.n	80030c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80030c6:	bf00      	nop
}
 80030c8:	bf00      	nop
 80030ca:	3720      	adds	r7, #32
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	1c99      	adds	r1, r3, #2
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6251      	str	r1, [r2, #36]	; 0x24
 80030f6:	881a      	ldrh	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003102:	b29b      	uxth	r3, r3
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d113      	bne.n	800313e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003124:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800312a:	b29b      	uxth	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d106      	bne.n	800313e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff ffc9 	bl	80030d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	1c99      	adds	r1, r3, #2
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6251      	str	r1, [r2, #36]	; 0x24
 800315a:	8819      	ldrh	r1, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1d      	ldr	r2, [pc, #116]	; (80031d8 <I2SEx_TxISR_I2SExt+0x90>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d101      	bne.n	800316a <I2SEx_TxISR_I2SExt+0x22>
 8003166:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <I2SEx_TxISR_I2SExt+0x94>)
 8003168:	e001      	b.n	800316e <I2SEx_TxISR_I2SExt+0x26>
 800316a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800316e:	460a      	mov	r2, r1
 8003170:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003176:	b29b      	uxth	r3, r3
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003184:	b29b      	uxth	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d121      	bne.n	80031ce <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a12      	ldr	r2, [pc, #72]	; (80031d8 <I2SEx_TxISR_I2SExt+0x90>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d101      	bne.n	8003198 <I2SEx_TxISR_I2SExt+0x50>
 8003194:	4b11      	ldr	r3, [pc, #68]	; (80031dc <I2SEx_TxISR_I2SExt+0x94>)
 8003196:	e001      	b.n	800319c <I2SEx_TxISR_I2SExt+0x54>
 8003198:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	490d      	ldr	r1, [pc, #52]	; (80031d8 <I2SEx_TxISR_I2SExt+0x90>)
 80031a4:	428b      	cmp	r3, r1
 80031a6:	d101      	bne.n	80031ac <I2SEx_TxISR_I2SExt+0x64>
 80031a8:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <I2SEx_TxISR_I2SExt+0x94>)
 80031aa:	e001      	b.n	80031b0 <I2SEx_TxISR_I2SExt+0x68>
 80031ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031b4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d106      	bne.n	80031ce <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff ff81 	bl	80030d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40003800 	.word	0x40003800
 80031dc:	40003400 	.word	0x40003400

080031e0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68d8      	ldr	r0, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f2:	1c99      	adds	r1, r3, #2
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80031f8:	b282      	uxth	r2, r0
 80031fa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003200:	b29b      	uxth	r3, r3
 8003202:	3b01      	subs	r3, #1
 8003204:	b29a      	uxth	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800320e:	b29b      	uxth	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d113      	bne.n	800323c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003222:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003228:	b29b      	uxth	r3, r3
 800322a:	2b00      	cmp	r3, #0
 800322c:	d106      	bne.n	800323c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff ff4a 	bl	80030d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800323c:	bf00      	nop
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a20      	ldr	r2, [pc, #128]	; (80032d4 <I2SEx_RxISR_I2SExt+0x90>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d101      	bne.n	800325a <I2SEx_RxISR_I2SExt+0x16>
 8003256:	4b20      	ldr	r3, [pc, #128]	; (80032d8 <I2SEx_RxISR_I2SExt+0x94>)
 8003258:	e001      	b.n	800325e <I2SEx_RxISR_I2SExt+0x1a>
 800325a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800325e:	68d8      	ldr	r0, [r3, #12]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	1c99      	adds	r1, r3, #2
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	62d1      	str	r1, [r2, #44]	; 0x2c
 800326a:	b282      	uxth	r2, r0
 800326c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003272:	b29b      	uxth	r3, r3
 8003274:	3b01      	subs	r3, #1
 8003276:	b29a      	uxth	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003280:	b29b      	uxth	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d121      	bne.n	80032ca <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a12      	ldr	r2, [pc, #72]	; (80032d4 <I2SEx_RxISR_I2SExt+0x90>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d101      	bne.n	8003294 <I2SEx_RxISR_I2SExt+0x50>
 8003290:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <I2SEx_RxISR_I2SExt+0x94>)
 8003292:	e001      	b.n	8003298 <I2SEx_RxISR_I2SExt+0x54>
 8003294:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	490d      	ldr	r1, [pc, #52]	; (80032d4 <I2SEx_RxISR_I2SExt+0x90>)
 80032a0:	428b      	cmp	r3, r1
 80032a2:	d101      	bne.n	80032a8 <I2SEx_RxISR_I2SExt+0x64>
 80032a4:	4b0c      	ldr	r3, [pc, #48]	; (80032d8 <I2SEx_RxISR_I2SExt+0x94>)
 80032a6:	e001      	b.n	80032ac <I2SEx_RxISR_I2SExt+0x68>
 80032a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80032b0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d106      	bne.n	80032ca <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7ff ff03 	bl	80030d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40003800 	.word	0x40003800
 80032d8:	40003400 	.word	0x40003400

080032dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e267      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d075      	beq.n	80033e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032fa:	4b88      	ldr	r3, [pc, #544]	; (800351c <HAL_RCC_OscConfig+0x240>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 030c 	and.w	r3, r3, #12
 8003302:	2b04      	cmp	r3, #4
 8003304:	d00c      	beq.n	8003320 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003306:	4b85      	ldr	r3, [pc, #532]	; (800351c <HAL_RCC_OscConfig+0x240>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800330e:	2b08      	cmp	r3, #8
 8003310:	d112      	bne.n	8003338 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003312:	4b82      	ldr	r3, [pc, #520]	; (800351c <HAL_RCC_OscConfig+0x240>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800331a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800331e:	d10b      	bne.n	8003338 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003320:	4b7e      	ldr	r3, [pc, #504]	; (800351c <HAL_RCC_OscConfig+0x240>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d05b      	beq.n	80033e4 <HAL_RCC_OscConfig+0x108>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d157      	bne.n	80033e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e242      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003340:	d106      	bne.n	8003350 <HAL_RCC_OscConfig+0x74>
 8003342:	4b76      	ldr	r3, [pc, #472]	; (800351c <HAL_RCC_OscConfig+0x240>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a75      	ldr	r2, [pc, #468]	; (800351c <HAL_RCC_OscConfig+0x240>)
 8003348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	e01d      	b.n	800338c <HAL_RCC_OscConfig+0xb0>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003358:	d10c      	bne.n	8003374 <HAL_RCC_OscConfig+0x98>
 800335a:	4b70      	ldr	r3, [pc, #448]	; (800351c <HAL_RCC_OscConfig+0x240>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a6f      	ldr	r2, [pc, #444]	; (800351c <HAL_RCC_OscConfig+0x240>)
 8003360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	4b6d      	ldr	r3, [pc, #436]	; (800351c <HAL_RCC_OscConfig+0x240>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a6c      	ldr	r2, [pc, #432]	; (800351c <HAL_RCC_OscConfig+0x240>)
 800336c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	e00b      	b.n	800338c <HAL_RCC_OscConfig+0xb0>
 8003374:	4b69      	ldr	r3, [pc, #420]	; (800351c <HAL_RCC_OscConfig+0x240>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a68      	ldr	r2, [pc, #416]	; (800351c <HAL_RCC_OscConfig+0x240>)
 800337a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	4b66      	ldr	r3, [pc, #408]	; (800351c <HAL_RCC_OscConfig+0x240>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a65      	ldr	r2, [pc, #404]	; (800351c <HAL_RCC_OscConfig+0x240>)
 8003386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800338a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d013      	beq.n	80033bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003394:	f7fe f85c 	bl	8001450 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800339c:	f7fe f858 	bl	8001450 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b64      	cmp	r3, #100	; 0x64
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e207      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ae:	4b5b      	ldr	r3, [pc, #364]	; (800351c <HAL_RCC_OscConfig+0x240>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0xc0>
 80033ba:	e014      	b.n	80033e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033bc:	f7fe f848 	bl	8001450 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033c4:	f7fe f844 	bl	8001450 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b64      	cmp	r3, #100	; 0x64
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e1f3      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033d6:	4b51      	ldr	r3, [pc, #324]	; (800351c <HAL_RCC_OscConfig+0x240>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f0      	bne.n	80033c4 <HAL_RCC_OscConfig+0xe8>
 80033e2:	e000      	b.n	80033e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d063      	beq.n	80034ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033f2:	4b4a      	ldr	r3, [pc, #296]	; (800351c <HAL_RCC_OscConfig+0x240>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 030c 	and.w	r3, r3, #12
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00b      	beq.n	8003416 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033fe:	4b47      	ldr	r3, [pc, #284]	; (800351c <HAL_RCC_OscConfig+0x240>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003406:	2b08      	cmp	r3, #8
 8003408:	d11c      	bne.n	8003444 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800340a:	4b44      	ldr	r3, [pc, #272]	; (800351c <HAL_RCC_OscConfig+0x240>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d116      	bne.n	8003444 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003416:	4b41      	ldr	r3, [pc, #260]	; (800351c <HAL_RCC_OscConfig+0x240>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d005      	beq.n	800342e <HAL_RCC_OscConfig+0x152>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d001      	beq.n	800342e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e1c7      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800342e:	4b3b      	ldr	r3, [pc, #236]	; (800351c <HAL_RCC_OscConfig+0x240>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	4937      	ldr	r1, [pc, #220]	; (800351c <HAL_RCC_OscConfig+0x240>)
 800343e:	4313      	orrs	r3, r2
 8003440:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003442:	e03a      	b.n	80034ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d020      	beq.n	800348e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800344c:	4b34      	ldr	r3, [pc, #208]	; (8003520 <HAL_RCC_OscConfig+0x244>)
 800344e:	2201      	movs	r2, #1
 8003450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003452:	f7fd fffd 	bl	8001450 <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800345a:	f7fd fff9 	bl	8001450 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e1a8      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346c:	4b2b      	ldr	r3, [pc, #172]	; (800351c <HAL_RCC_OscConfig+0x240>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0f0      	beq.n	800345a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003478:	4b28      	ldr	r3, [pc, #160]	; (800351c <HAL_RCC_OscConfig+0x240>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	4925      	ldr	r1, [pc, #148]	; (800351c <HAL_RCC_OscConfig+0x240>)
 8003488:	4313      	orrs	r3, r2
 800348a:	600b      	str	r3, [r1, #0]
 800348c:	e015      	b.n	80034ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800348e:	4b24      	ldr	r3, [pc, #144]	; (8003520 <HAL_RCC_OscConfig+0x244>)
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003494:	f7fd ffdc 	bl	8001450 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800349c:	f7fd ffd8 	bl	8001450 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e187      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ae:	4b1b      	ldr	r3, [pc, #108]	; (800351c <HAL_RCC_OscConfig+0x240>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d036      	beq.n	8003534 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d016      	beq.n	80034fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ce:	4b15      	ldr	r3, [pc, #84]	; (8003524 <HAL_RCC_OscConfig+0x248>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d4:	f7fd ffbc 	bl	8001450 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034dc:	f7fd ffb8 	bl	8001450 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e167      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ee:	4b0b      	ldr	r3, [pc, #44]	; (800351c <HAL_RCC_OscConfig+0x240>)
 80034f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0f0      	beq.n	80034dc <HAL_RCC_OscConfig+0x200>
 80034fa:	e01b      	b.n	8003534 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034fc:	4b09      	ldr	r3, [pc, #36]	; (8003524 <HAL_RCC_OscConfig+0x248>)
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003502:	f7fd ffa5 	bl	8001450 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003508:	e00e      	b.n	8003528 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800350a:	f7fd ffa1 	bl	8001450 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d907      	bls.n	8003528 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e150      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
 800351c:	40023800 	.word	0x40023800
 8003520:	42470000 	.word	0x42470000
 8003524:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003528:	4b88      	ldr	r3, [pc, #544]	; (800374c <HAL_RCC_OscConfig+0x470>)
 800352a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1ea      	bne.n	800350a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 8097 	beq.w	8003670 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003542:	2300      	movs	r3, #0
 8003544:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003546:	4b81      	ldr	r3, [pc, #516]	; (800374c <HAL_RCC_OscConfig+0x470>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10f      	bne.n	8003572 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	60bb      	str	r3, [r7, #8]
 8003556:	4b7d      	ldr	r3, [pc, #500]	; (800374c <HAL_RCC_OscConfig+0x470>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	4a7c      	ldr	r2, [pc, #496]	; (800374c <HAL_RCC_OscConfig+0x470>)
 800355c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003560:	6413      	str	r3, [r2, #64]	; 0x40
 8003562:	4b7a      	ldr	r3, [pc, #488]	; (800374c <HAL_RCC_OscConfig+0x470>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356a:	60bb      	str	r3, [r7, #8]
 800356c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800356e:	2301      	movs	r3, #1
 8003570:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003572:	4b77      	ldr	r3, [pc, #476]	; (8003750 <HAL_RCC_OscConfig+0x474>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357a:	2b00      	cmp	r3, #0
 800357c:	d118      	bne.n	80035b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800357e:	4b74      	ldr	r3, [pc, #464]	; (8003750 <HAL_RCC_OscConfig+0x474>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a73      	ldr	r2, [pc, #460]	; (8003750 <HAL_RCC_OscConfig+0x474>)
 8003584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800358a:	f7fd ff61 	bl	8001450 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003592:	f7fd ff5d 	bl	8001450 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e10c      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a4:	4b6a      	ldr	r3, [pc, #424]	; (8003750 <HAL_RCC_OscConfig+0x474>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0f0      	beq.n	8003592 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d106      	bne.n	80035c6 <HAL_RCC_OscConfig+0x2ea>
 80035b8:	4b64      	ldr	r3, [pc, #400]	; (800374c <HAL_RCC_OscConfig+0x470>)
 80035ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035bc:	4a63      	ldr	r2, [pc, #396]	; (800374c <HAL_RCC_OscConfig+0x470>)
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	6713      	str	r3, [r2, #112]	; 0x70
 80035c4:	e01c      	b.n	8003600 <HAL_RCC_OscConfig+0x324>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b05      	cmp	r3, #5
 80035cc:	d10c      	bne.n	80035e8 <HAL_RCC_OscConfig+0x30c>
 80035ce:	4b5f      	ldr	r3, [pc, #380]	; (800374c <HAL_RCC_OscConfig+0x470>)
 80035d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d2:	4a5e      	ldr	r2, [pc, #376]	; (800374c <HAL_RCC_OscConfig+0x470>)
 80035d4:	f043 0304 	orr.w	r3, r3, #4
 80035d8:	6713      	str	r3, [r2, #112]	; 0x70
 80035da:	4b5c      	ldr	r3, [pc, #368]	; (800374c <HAL_RCC_OscConfig+0x470>)
 80035dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035de:	4a5b      	ldr	r2, [pc, #364]	; (800374c <HAL_RCC_OscConfig+0x470>)
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	6713      	str	r3, [r2, #112]	; 0x70
 80035e6:	e00b      	b.n	8003600 <HAL_RCC_OscConfig+0x324>
 80035e8:	4b58      	ldr	r3, [pc, #352]	; (800374c <HAL_RCC_OscConfig+0x470>)
 80035ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ec:	4a57      	ldr	r2, [pc, #348]	; (800374c <HAL_RCC_OscConfig+0x470>)
 80035ee:	f023 0301 	bic.w	r3, r3, #1
 80035f2:	6713      	str	r3, [r2, #112]	; 0x70
 80035f4:	4b55      	ldr	r3, [pc, #340]	; (800374c <HAL_RCC_OscConfig+0x470>)
 80035f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f8:	4a54      	ldr	r2, [pc, #336]	; (800374c <HAL_RCC_OscConfig+0x470>)
 80035fa:	f023 0304 	bic.w	r3, r3, #4
 80035fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d015      	beq.n	8003634 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003608:	f7fd ff22 	bl	8001450 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360e:	e00a      	b.n	8003626 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003610:	f7fd ff1e 	bl	8001450 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f241 3288 	movw	r2, #5000	; 0x1388
 800361e:	4293      	cmp	r3, r2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e0cb      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003626:	4b49      	ldr	r3, [pc, #292]	; (800374c <HAL_RCC_OscConfig+0x470>)
 8003628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0ee      	beq.n	8003610 <HAL_RCC_OscConfig+0x334>
 8003632:	e014      	b.n	800365e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003634:	f7fd ff0c 	bl	8001450 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800363a:	e00a      	b.n	8003652 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800363c:	f7fd ff08 	bl	8001450 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	f241 3288 	movw	r2, #5000	; 0x1388
 800364a:	4293      	cmp	r3, r2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e0b5      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003652:	4b3e      	ldr	r3, [pc, #248]	; (800374c <HAL_RCC_OscConfig+0x470>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1ee      	bne.n	800363c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800365e:	7dfb      	ldrb	r3, [r7, #23]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d105      	bne.n	8003670 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003664:	4b39      	ldr	r3, [pc, #228]	; (800374c <HAL_RCC_OscConfig+0x470>)
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	4a38      	ldr	r2, [pc, #224]	; (800374c <HAL_RCC_OscConfig+0x470>)
 800366a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800366e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 80a1 	beq.w	80037bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800367a:	4b34      	ldr	r3, [pc, #208]	; (800374c <HAL_RCC_OscConfig+0x470>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 030c 	and.w	r3, r3, #12
 8003682:	2b08      	cmp	r3, #8
 8003684:	d05c      	beq.n	8003740 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d141      	bne.n	8003712 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368e:	4b31      	ldr	r3, [pc, #196]	; (8003754 <HAL_RCC_OscConfig+0x478>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003694:	f7fd fedc 	bl	8001450 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800369c:	f7fd fed8 	bl	8001450 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e087      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ae:	4b27      	ldr	r3, [pc, #156]	; (800374c <HAL_RCC_OscConfig+0x470>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69da      	ldr	r2, [r3, #28]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	019b      	lsls	r3, r3, #6
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d0:	085b      	lsrs	r3, r3, #1
 80036d2:	3b01      	subs	r3, #1
 80036d4:	041b      	lsls	r3, r3, #16
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	061b      	lsls	r3, r3, #24
 80036de:	491b      	ldr	r1, [pc, #108]	; (800374c <HAL_RCC_OscConfig+0x470>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e4:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <HAL_RCC_OscConfig+0x478>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ea:	f7fd feb1 	bl	8001450 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f2:	f7fd fead 	bl	8001450 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e05c      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003704:	4b11      	ldr	r3, [pc, #68]	; (800374c <HAL_RCC_OscConfig+0x470>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0f0      	beq.n	80036f2 <HAL_RCC_OscConfig+0x416>
 8003710:	e054      	b.n	80037bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003712:	4b10      	ldr	r3, [pc, #64]	; (8003754 <HAL_RCC_OscConfig+0x478>)
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003718:	f7fd fe9a 	bl	8001450 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003720:	f7fd fe96 	bl	8001450 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e045      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003732:	4b06      	ldr	r3, [pc, #24]	; (800374c <HAL_RCC_OscConfig+0x470>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCC_OscConfig+0x444>
 800373e:	e03d      	b.n	80037bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d107      	bne.n	8003758 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e038      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
 800374c:	40023800 	.word	0x40023800
 8003750:	40007000 	.word	0x40007000
 8003754:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003758:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <HAL_RCC_OscConfig+0x4ec>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d028      	beq.n	80037b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003770:	429a      	cmp	r2, r3
 8003772:	d121      	bne.n	80037b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800377e:	429a      	cmp	r2, r3
 8003780:	d11a      	bne.n	80037b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003788:	4013      	ands	r3, r2
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800378e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003790:	4293      	cmp	r3, r2
 8003792:	d111      	bne.n	80037b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	085b      	lsrs	r3, r3, #1
 80037a0:	3b01      	subs	r3, #1
 80037a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d107      	bne.n	80037b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d001      	beq.n	80037bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e000      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40023800 	.word	0x40023800

080037cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0cc      	b.n	800397a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037e0:	4b68      	ldr	r3, [pc, #416]	; (8003984 <HAL_RCC_ClockConfig+0x1b8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d90c      	bls.n	8003808 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ee:	4b65      	ldr	r3, [pc, #404]	; (8003984 <HAL_RCC_ClockConfig+0x1b8>)
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f6:	4b63      	ldr	r3, [pc, #396]	; (8003984 <HAL_RCC_ClockConfig+0x1b8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d001      	beq.n	8003808 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0b8      	b.n	800397a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d020      	beq.n	8003856 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003820:	4b59      	ldr	r3, [pc, #356]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	4a58      	ldr	r2, [pc, #352]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800382a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0308 	and.w	r3, r3, #8
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003838:	4b53      	ldr	r3, [pc, #332]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	4a52      	ldr	r2, [pc, #328]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003842:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003844:	4b50      	ldr	r3, [pc, #320]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	494d      	ldr	r1, [pc, #308]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	4313      	orrs	r3, r2
 8003854:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d044      	beq.n	80038ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d107      	bne.n	800387a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386a:	4b47      	ldr	r3, [pc, #284]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d119      	bne.n	80038aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e07f      	b.n	800397a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d003      	beq.n	800388a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003886:	2b03      	cmp	r3, #3
 8003888:	d107      	bne.n	800389a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388a:	4b3f      	ldr	r3, [pc, #252]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d109      	bne.n	80038aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e06f      	b.n	800397a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389a:	4b3b      	ldr	r3, [pc, #236]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e067      	b.n	800397a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038aa:	4b37      	ldr	r3, [pc, #220]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f023 0203 	bic.w	r2, r3, #3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	4934      	ldr	r1, [pc, #208]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038bc:	f7fd fdc8 	bl	8001450 <HAL_GetTick>
 80038c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c2:	e00a      	b.n	80038da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038c4:	f7fd fdc4 	bl	8001450 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e04f      	b.n	800397a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038da:	4b2b      	ldr	r3, [pc, #172]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 020c 	and.w	r2, r3, #12
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d1eb      	bne.n	80038c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038ec:	4b25      	ldr	r3, [pc, #148]	; (8003984 <HAL_RCC_ClockConfig+0x1b8>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d20c      	bcs.n	8003914 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fa:	4b22      	ldr	r3, [pc, #136]	; (8003984 <HAL_RCC_ClockConfig+0x1b8>)
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003902:	4b20      	ldr	r3, [pc, #128]	; (8003984 <HAL_RCC_ClockConfig+0x1b8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d001      	beq.n	8003914 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e032      	b.n	800397a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003920:	4b19      	ldr	r3, [pc, #100]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	4916      	ldr	r1, [pc, #88]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	4313      	orrs	r3, r2
 8003930:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d009      	beq.n	8003952 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800393e:	4b12      	ldr	r3, [pc, #72]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	490e      	ldr	r1, [pc, #56]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	4313      	orrs	r3, r2
 8003950:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003952:	f000 f821 	bl	8003998 <HAL_RCC_GetSysClockFreq>
 8003956:	4602      	mov	r2, r0
 8003958:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	091b      	lsrs	r3, r3, #4
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	490a      	ldr	r1, [pc, #40]	; (800398c <HAL_RCC_ClockConfig+0x1c0>)
 8003964:	5ccb      	ldrb	r3, [r1, r3]
 8003966:	fa22 f303 	lsr.w	r3, r2, r3
 800396a:	4a09      	ldr	r2, [pc, #36]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800396c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800396e:	4b09      	ldr	r3, [pc, #36]	; (8003994 <HAL_RCC_ClockConfig+0x1c8>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f7fd fd28 	bl	80013c8 <HAL_InitTick>

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40023c00 	.word	0x40023c00
 8003988:	40023800 	.word	0x40023800
 800398c:	08005240 	.word	0x08005240
 8003990:	20000000 	.word	0x20000000
 8003994:	20000004 	.word	0x20000004

08003998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800399c:	b094      	sub	sp, #80	; 0x50
 800399e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	647b      	str	r3, [r7, #68]	; 0x44
 80039a4:	2300      	movs	r3, #0
 80039a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039a8:	2300      	movs	r3, #0
 80039aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039b0:	4b79      	ldr	r3, [pc, #484]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x200>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 030c 	and.w	r3, r3, #12
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d00d      	beq.n	80039d8 <HAL_RCC_GetSysClockFreq+0x40>
 80039bc:	2b08      	cmp	r3, #8
 80039be:	f200 80e1 	bhi.w	8003b84 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <HAL_RCC_GetSysClockFreq+0x34>
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d003      	beq.n	80039d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80039ca:	e0db      	b.n	8003b84 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039cc:	4b73      	ldr	r3, [pc, #460]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x204>)
 80039ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80039d0:	e0db      	b.n	8003b8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039d2:	4b73      	ldr	r3, [pc, #460]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0x208>)
 80039d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039d6:	e0d8      	b.n	8003b8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039d8:	4b6f      	ldr	r3, [pc, #444]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x200>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039e2:	4b6d      	ldr	r3, [pc, #436]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x200>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d063      	beq.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ee:	4b6a      	ldr	r3, [pc, #424]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x200>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	099b      	lsrs	r3, r3, #6
 80039f4:	2200      	movs	r2, #0
 80039f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80039f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a00:	633b      	str	r3, [r7, #48]	; 0x30
 8003a02:	2300      	movs	r3, #0
 8003a04:	637b      	str	r3, [r7, #52]	; 0x34
 8003a06:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a0a:	4622      	mov	r2, r4
 8003a0c:	462b      	mov	r3, r5
 8003a0e:	f04f 0000 	mov.w	r0, #0
 8003a12:	f04f 0100 	mov.w	r1, #0
 8003a16:	0159      	lsls	r1, r3, #5
 8003a18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a1c:	0150      	lsls	r0, r2, #5
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	4621      	mov	r1, r4
 8003a24:	1a51      	subs	r1, r2, r1
 8003a26:	6139      	str	r1, [r7, #16]
 8003a28:	4629      	mov	r1, r5
 8003a2a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	f04f 0200 	mov.w	r2, #0
 8003a34:	f04f 0300 	mov.w	r3, #0
 8003a38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a3c:	4659      	mov	r1, fp
 8003a3e:	018b      	lsls	r3, r1, #6
 8003a40:	4651      	mov	r1, sl
 8003a42:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a46:	4651      	mov	r1, sl
 8003a48:	018a      	lsls	r2, r1, #6
 8003a4a:	4651      	mov	r1, sl
 8003a4c:	ebb2 0801 	subs.w	r8, r2, r1
 8003a50:	4659      	mov	r1, fp
 8003a52:	eb63 0901 	sbc.w	r9, r3, r1
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a6a:	4690      	mov	r8, r2
 8003a6c:	4699      	mov	r9, r3
 8003a6e:	4623      	mov	r3, r4
 8003a70:	eb18 0303 	adds.w	r3, r8, r3
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	462b      	mov	r3, r5
 8003a78:	eb49 0303 	adc.w	r3, r9, r3
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a8a:	4629      	mov	r1, r5
 8003a8c:	024b      	lsls	r3, r1, #9
 8003a8e:	4621      	mov	r1, r4
 8003a90:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a94:	4621      	mov	r1, r4
 8003a96:	024a      	lsls	r2, r1, #9
 8003a98:	4610      	mov	r0, r2
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003aa4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003aa8:	f7fc fbea 	bl	8000280 <__aeabi_uldivmod>
 8003aac:	4602      	mov	r2, r0
 8003aae:	460b      	mov	r3, r1
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ab4:	e058      	b.n	8003b68 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ab6:	4b38      	ldr	r3, [pc, #224]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	099b      	lsrs	r3, r3, #6
 8003abc:	2200      	movs	r2, #0
 8003abe:	4618      	mov	r0, r3
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ac6:	623b      	str	r3, [r7, #32]
 8003ac8:	2300      	movs	r3, #0
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
 8003acc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ad0:	4642      	mov	r2, r8
 8003ad2:	464b      	mov	r3, r9
 8003ad4:	f04f 0000 	mov.w	r0, #0
 8003ad8:	f04f 0100 	mov.w	r1, #0
 8003adc:	0159      	lsls	r1, r3, #5
 8003ade:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ae2:	0150      	lsls	r0, r2, #5
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	4641      	mov	r1, r8
 8003aea:	ebb2 0a01 	subs.w	sl, r2, r1
 8003aee:	4649      	mov	r1, r9
 8003af0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b00:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b04:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b08:	ebb2 040a 	subs.w	r4, r2, sl
 8003b0c:	eb63 050b 	sbc.w	r5, r3, fp
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	f04f 0300 	mov.w	r3, #0
 8003b18:	00eb      	lsls	r3, r5, #3
 8003b1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b1e:	00e2      	lsls	r2, r4, #3
 8003b20:	4614      	mov	r4, r2
 8003b22:	461d      	mov	r5, r3
 8003b24:	4643      	mov	r3, r8
 8003b26:	18e3      	adds	r3, r4, r3
 8003b28:	603b      	str	r3, [r7, #0]
 8003b2a:	464b      	mov	r3, r9
 8003b2c:	eb45 0303 	adc.w	r3, r5, r3
 8003b30:	607b      	str	r3, [r7, #4]
 8003b32:	f04f 0200 	mov.w	r2, #0
 8003b36:	f04f 0300 	mov.w	r3, #0
 8003b3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b3e:	4629      	mov	r1, r5
 8003b40:	028b      	lsls	r3, r1, #10
 8003b42:	4621      	mov	r1, r4
 8003b44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b48:	4621      	mov	r1, r4
 8003b4a:	028a      	lsls	r2, r1, #10
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	4619      	mov	r1, r3
 8003b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b52:	2200      	movs	r2, #0
 8003b54:	61bb      	str	r3, [r7, #24]
 8003b56:	61fa      	str	r2, [r7, #28]
 8003b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b5c:	f7fc fb90 	bl	8000280 <__aeabi_uldivmod>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4613      	mov	r3, r2
 8003b66:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b68:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	0c1b      	lsrs	r3, r3, #16
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	3301      	adds	r3, #1
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b82:	e002      	b.n	8003b8a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b84:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x204>)
 8003b86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3750      	adds	r7, #80	; 0x50
 8003b90:	46bd      	mov	sp, r7
 8003b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b96:	bf00      	nop
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	00f42400 	.word	0x00f42400
 8003ba0:	007a1200 	.word	0x007a1200

08003ba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ba8:	4b03      	ldr	r3, [pc, #12]	; (8003bb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003baa:	681b      	ldr	r3, [r3, #0]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	20000000 	.word	0x20000000

08003bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bc0:	f7ff fff0 	bl	8003ba4 <HAL_RCC_GetHCLKFreq>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	0a9b      	lsrs	r3, r3, #10
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	4903      	ldr	r1, [pc, #12]	; (8003be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bd2:	5ccb      	ldrb	r3, [r1, r3]
 8003bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	08005250 	.word	0x08005250

08003be4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d105      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d038      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003c0c:	4b68      	ldr	r3, [pc, #416]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c12:	f7fd fc1d 	bl	8001450 <HAL_GetTick>
 8003c16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c18:	e008      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c1a:	f7fd fc19 	bl	8001450 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e0bd      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003c2c:	4b61      	ldr	r3, [pc, #388]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1f0      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	019b      	lsls	r3, r3, #6
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	071b      	lsls	r3, r3, #28
 8003c4a:	495a      	ldr	r1, [pc, #360]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003c52:	4b57      	ldr	r3, [pc, #348]	; (8003db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003c54:	2201      	movs	r2, #1
 8003c56:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c58:	f7fd fbfa 	bl	8001450 <HAL_GetTick>
 8003c5c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003c60:	f7fd fbf6 	bl	8001450 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e09a      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003c72:	4b50      	ldr	r3, [pc, #320]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0f0      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 8083 	beq.w	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	4b48      	ldr	r3, [pc, #288]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	4a47      	ldr	r2, [pc, #284]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8003c9c:	4b45      	ldr	r3, [pc, #276]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca4:	60fb      	str	r3, [r7, #12]
 8003ca6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003ca8:	4b43      	ldr	r3, [pc, #268]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a42      	ldr	r2, [pc, #264]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003cb4:	f7fd fbcc 	bl	8001450 <HAL_GetTick>
 8003cb8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003cbc:	f7fd fbc8 	bl	8001450 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e06c      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003cce:	4b3a      	ldr	r3, [pc, #232]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0f0      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cda:	4b36      	ldr	r3, [pc, #216]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d02f      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d028      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cf8:	4b2e      	ldr	r3, [pc, #184]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d00:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d02:	4b2e      	ldr	r3, [pc, #184]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d04:	2201      	movs	r2, #1
 8003d06:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d08:	4b2c      	ldr	r3, [pc, #176]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003d0e:	4a29      	ldr	r2, [pc, #164]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d14:	4b27      	ldr	r3, [pc, #156]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d114      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003d20:	f7fd fb96 	bl	8001450 <HAL_GetTick>
 8003d24:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d26:	e00a      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d28:	f7fd fb92 	bl	8001450 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e034      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d3e:	4b1d      	ldr	r3, [pc, #116]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0ee      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d56:	d10d      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003d58:	4b16      	ldr	r3, [pc, #88]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d6c:	4911      	ldr	r1, [pc, #68]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	608b      	str	r3, [r1, #8]
 8003d72:	e005      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003d74:	4b0f      	ldr	r3, [pc, #60]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	4a0e      	ldr	r2, [pc, #56]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d7a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d7e:	6093      	str	r3, [r2, #8]
 8003d80:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d8c:	4909      	ldr	r1, [pc, #36]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	7d1a      	ldrb	r2, [r3, #20]
 8003da2:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003da4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	42470068 	.word	0x42470068
 8003db4:	40023800 	.word	0x40023800
 8003db8:	40007000 	.word	0x40007000
 8003dbc:	42470e40 	.word	0x42470e40
 8003dc0:	424711e0 	.word	0x424711e0

08003dc4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d140      	bne.n	8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003de2:	4b24      	ldr	r3, [pc, #144]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d005      	beq.n	8003dfe <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d131      	bne.n	8003e5c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003df8:	4b1f      	ldr	r3, [pc, #124]	; (8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003dfa:	617b      	str	r3, [r7, #20]
          break;
 8003dfc:	e031      	b.n	8003e62 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003dfe:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e0a:	d109      	bne.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003e0c:	4b19      	ldr	r3, [pc, #100]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e16:	4a19      	ldr	r2, [pc, #100]	; (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1c:	613b      	str	r3, [r7, #16]
 8003e1e:	e008      	b.n	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003e20:	4b14      	ldr	r3, [pc, #80]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e2a:	4a15      	ldr	r2, [pc, #84]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e30:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003e32:	4b10      	ldr	r3, [pc, #64]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e38:	099b      	lsrs	r3, r3, #6
 8003e3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	fb02 f303 	mul.w	r3, r2, r3
 8003e44:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003e46:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e4c:	0f1b      	lsrs	r3, r3, #28
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e58:	617b      	str	r3, [r7, #20]
          break;
 8003e5a:	e002      	b.n	8003e62 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	617b      	str	r3, [r7, #20]
          break;
 8003e60:	bf00      	nop
        }
      }
      break;
 8003e62:	bf00      	nop
    }
  }
  return frequency;
 8003e64:	697b      	ldr	r3, [r7, #20]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	371c      	adds	r7, #28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40023800 	.word	0x40023800
 8003e78:	00bb8000 	.word	0x00bb8000
 8003e7c:	007a1200 	.word	0x007a1200
 8003e80:	00f42400 	.word	0x00f42400

08003e84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e07b      	b.n	8003f8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d108      	bne.n	8003eb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ea6:	d009      	beq.n	8003ebc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	61da      	str	r2, [r3, #28]
 8003eae:	e005      	b.n	8003ebc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fd f91e 	bl	8001118 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ef2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f36:	431a      	orrs	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f40:	ea42 0103 	orr.w	r1, r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	0c1b      	lsrs	r3, r3, #16
 8003f5a:	f003 0104 	and.w	r1, r3, #4
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	f003 0210 	and.w	r2, r3, #16
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	69da      	ldr	r2, [r3, #28]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <__errno>:
 8003f98:	4b01      	ldr	r3, [pc, #4]	; (8003fa0 <__errno+0x8>)
 8003f9a:	6818      	ldr	r0, [r3, #0]
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	2000000c 	.word	0x2000000c

08003fa4 <__libc_init_array>:
 8003fa4:	b570      	push	{r4, r5, r6, lr}
 8003fa6:	4d0d      	ldr	r5, [pc, #52]	; (8003fdc <__libc_init_array+0x38>)
 8003fa8:	4c0d      	ldr	r4, [pc, #52]	; (8003fe0 <__libc_init_array+0x3c>)
 8003faa:	1b64      	subs	r4, r4, r5
 8003fac:	10a4      	asrs	r4, r4, #2
 8003fae:	2600      	movs	r6, #0
 8003fb0:	42a6      	cmp	r6, r4
 8003fb2:	d109      	bne.n	8003fc8 <__libc_init_array+0x24>
 8003fb4:	4d0b      	ldr	r5, [pc, #44]	; (8003fe4 <__libc_init_array+0x40>)
 8003fb6:	4c0c      	ldr	r4, [pc, #48]	; (8003fe8 <__libc_init_array+0x44>)
 8003fb8:	f001 f882 	bl	80050c0 <_init>
 8003fbc:	1b64      	subs	r4, r4, r5
 8003fbe:	10a4      	asrs	r4, r4, #2
 8003fc0:	2600      	movs	r6, #0
 8003fc2:	42a6      	cmp	r6, r4
 8003fc4:	d105      	bne.n	8003fd2 <__libc_init_array+0x2e>
 8003fc6:	bd70      	pop	{r4, r5, r6, pc}
 8003fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fcc:	4798      	blx	r3
 8003fce:	3601      	adds	r6, #1
 8003fd0:	e7ee      	b.n	8003fb0 <__libc_init_array+0xc>
 8003fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fd6:	4798      	blx	r3
 8003fd8:	3601      	adds	r6, #1
 8003fda:	e7f2      	b.n	8003fc2 <__libc_init_array+0x1e>
 8003fdc:	080052f8 	.word	0x080052f8
 8003fe0:	080052f8 	.word	0x080052f8
 8003fe4:	080052f8 	.word	0x080052f8
 8003fe8:	080052fc 	.word	0x080052fc

08003fec <memset>:
 8003fec:	4402      	add	r2, r0
 8003fee:	4603      	mov	r3, r0
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d100      	bne.n	8003ff6 <memset+0xa>
 8003ff4:	4770      	bx	lr
 8003ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8003ffa:	e7f9      	b.n	8003ff0 <memset+0x4>

08003ffc <iprintf>:
 8003ffc:	b40f      	push	{r0, r1, r2, r3}
 8003ffe:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <iprintf+0x2c>)
 8004000:	b513      	push	{r0, r1, r4, lr}
 8004002:	681c      	ldr	r4, [r3, #0]
 8004004:	b124      	cbz	r4, 8004010 <iprintf+0x14>
 8004006:	69a3      	ldr	r3, [r4, #24]
 8004008:	b913      	cbnz	r3, 8004010 <iprintf+0x14>
 800400a:	4620      	mov	r0, r4
 800400c:	f000 fa74 	bl	80044f8 <__sinit>
 8004010:	ab05      	add	r3, sp, #20
 8004012:	9a04      	ldr	r2, [sp, #16]
 8004014:	68a1      	ldr	r1, [r4, #8]
 8004016:	9301      	str	r3, [sp, #4]
 8004018:	4620      	mov	r0, r4
 800401a:	f000 fc7d 	bl	8004918 <_vfiprintf_r>
 800401e:	b002      	add	sp, #8
 8004020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004024:	b004      	add	sp, #16
 8004026:	4770      	bx	lr
 8004028:	2000000c 	.word	0x2000000c

0800402c <putchar>:
 800402c:	4b09      	ldr	r3, [pc, #36]	; (8004054 <putchar+0x28>)
 800402e:	b513      	push	{r0, r1, r4, lr}
 8004030:	681c      	ldr	r4, [r3, #0]
 8004032:	4601      	mov	r1, r0
 8004034:	b134      	cbz	r4, 8004044 <putchar+0x18>
 8004036:	69a3      	ldr	r3, [r4, #24]
 8004038:	b923      	cbnz	r3, 8004044 <putchar+0x18>
 800403a:	9001      	str	r0, [sp, #4]
 800403c:	4620      	mov	r0, r4
 800403e:	f000 fa5b 	bl	80044f8 <__sinit>
 8004042:	9901      	ldr	r1, [sp, #4]
 8004044:	68a2      	ldr	r2, [r4, #8]
 8004046:	4620      	mov	r0, r4
 8004048:	b002      	add	sp, #8
 800404a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800404e:	f000 bf27 	b.w	8004ea0 <_putc_r>
 8004052:	bf00      	nop
 8004054:	2000000c 	.word	0x2000000c

08004058 <_puts_r>:
 8004058:	b570      	push	{r4, r5, r6, lr}
 800405a:	460e      	mov	r6, r1
 800405c:	4605      	mov	r5, r0
 800405e:	b118      	cbz	r0, 8004068 <_puts_r+0x10>
 8004060:	6983      	ldr	r3, [r0, #24]
 8004062:	b90b      	cbnz	r3, 8004068 <_puts_r+0x10>
 8004064:	f000 fa48 	bl	80044f8 <__sinit>
 8004068:	69ab      	ldr	r3, [r5, #24]
 800406a:	68ac      	ldr	r4, [r5, #8]
 800406c:	b913      	cbnz	r3, 8004074 <_puts_r+0x1c>
 800406e:	4628      	mov	r0, r5
 8004070:	f000 fa42 	bl	80044f8 <__sinit>
 8004074:	4b2c      	ldr	r3, [pc, #176]	; (8004128 <_puts_r+0xd0>)
 8004076:	429c      	cmp	r4, r3
 8004078:	d120      	bne.n	80040bc <_puts_r+0x64>
 800407a:	686c      	ldr	r4, [r5, #4]
 800407c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800407e:	07db      	lsls	r3, r3, #31
 8004080:	d405      	bmi.n	800408e <_puts_r+0x36>
 8004082:	89a3      	ldrh	r3, [r4, #12]
 8004084:	0598      	lsls	r0, r3, #22
 8004086:	d402      	bmi.n	800408e <_puts_r+0x36>
 8004088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800408a:	f000 fad3 	bl	8004634 <__retarget_lock_acquire_recursive>
 800408e:	89a3      	ldrh	r3, [r4, #12]
 8004090:	0719      	lsls	r1, r3, #28
 8004092:	d51d      	bpl.n	80040d0 <_puts_r+0x78>
 8004094:	6923      	ldr	r3, [r4, #16]
 8004096:	b1db      	cbz	r3, 80040d0 <_puts_r+0x78>
 8004098:	3e01      	subs	r6, #1
 800409a:	68a3      	ldr	r3, [r4, #8]
 800409c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80040a0:	3b01      	subs	r3, #1
 80040a2:	60a3      	str	r3, [r4, #8]
 80040a4:	bb39      	cbnz	r1, 80040f6 <_puts_r+0x9e>
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	da38      	bge.n	800411c <_puts_r+0xc4>
 80040aa:	4622      	mov	r2, r4
 80040ac:	210a      	movs	r1, #10
 80040ae:	4628      	mov	r0, r5
 80040b0:	f000 f848 	bl	8004144 <__swbuf_r>
 80040b4:	3001      	adds	r0, #1
 80040b6:	d011      	beq.n	80040dc <_puts_r+0x84>
 80040b8:	250a      	movs	r5, #10
 80040ba:	e011      	b.n	80040e0 <_puts_r+0x88>
 80040bc:	4b1b      	ldr	r3, [pc, #108]	; (800412c <_puts_r+0xd4>)
 80040be:	429c      	cmp	r4, r3
 80040c0:	d101      	bne.n	80040c6 <_puts_r+0x6e>
 80040c2:	68ac      	ldr	r4, [r5, #8]
 80040c4:	e7da      	b.n	800407c <_puts_r+0x24>
 80040c6:	4b1a      	ldr	r3, [pc, #104]	; (8004130 <_puts_r+0xd8>)
 80040c8:	429c      	cmp	r4, r3
 80040ca:	bf08      	it	eq
 80040cc:	68ec      	ldreq	r4, [r5, #12]
 80040ce:	e7d5      	b.n	800407c <_puts_r+0x24>
 80040d0:	4621      	mov	r1, r4
 80040d2:	4628      	mov	r0, r5
 80040d4:	f000 f888 	bl	80041e8 <__swsetup_r>
 80040d8:	2800      	cmp	r0, #0
 80040da:	d0dd      	beq.n	8004098 <_puts_r+0x40>
 80040dc:	f04f 35ff 	mov.w	r5, #4294967295
 80040e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040e2:	07da      	lsls	r2, r3, #31
 80040e4:	d405      	bmi.n	80040f2 <_puts_r+0x9a>
 80040e6:	89a3      	ldrh	r3, [r4, #12]
 80040e8:	059b      	lsls	r3, r3, #22
 80040ea:	d402      	bmi.n	80040f2 <_puts_r+0x9a>
 80040ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040ee:	f000 faa2 	bl	8004636 <__retarget_lock_release_recursive>
 80040f2:	4628      	mov	r0, r5
 80040f4:	bd70      	pop	{r4, r5, r6, pc}
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	da04      	bge.n	8004104 <_puts_r+0xac>
 80040fa:	69a2      	ldr	r2, [r4, #24]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	dc06      	bgt.n	800410e <_puts_r+0xb6>
 8004100:	290a      	cmp	r1, #10
 8004102:	d004      	beq.n	800410e <_puts_r+0xb6>
 8004104:	6823      	ldr	r3, [r4, #0]
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	6022      	str	r2, [r4, #0]
 800410a:	7019      	strb	r1, [r3, #0]
 800410c:	e7c5      	b.n	800409a <_puts_r+0x42>
 800410e:	4622      	mov	r2, r4
 8004110:	4628      	mov	r0, r5
 8004112:	f000 f817 	bl	8004144 <__swbuf_r>
 8004116:	3001      	adds	r0, #1
 8004118:	d1bf      	bne.n	800409a <_puts_r+0x42>
 800411a:	e7df      	b.n	80040dc <_puts_r+0x84>
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	250a      	movs	r5, #10
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	6022      	str	r2, [r4, #0]
 8004124:	701d      	strb	r5, [r3, #0]
 8004126:	e7db      	b.n	80040e0 <_puts_r+0x88>
 8004128:	0800527c 	.word	0x0800527c
 800412c:	0800529c 	.word	0x0800529c
 8004130:	0800525c 	.word	0x0800525c

08004134 <puts>:
 8004134:	4b02      	ldr	r3, [pc, #8]	; (8004140 <puts+0xc>)
 8004136:	4601      	mov	r1, r0
 8004138:	6818      	ldr	r0, [r3, #0]
 800413a:	f7ff bf8d 	b.w	8004058 <_puts_r>
 800413e:	bf00      	nop
 8004140:	2000000c 	.word	0x2000000c

08004144 <__swbuf_r>:
 8004144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004146:	460e      	mov	r6, r1
 8004148:	4614      	mov	r4, r2
 800414a:	4605      	mov	r5, r0
 800414c:	b118      	cbz	r0, 8004156 <__swbuf_r+0x12>
 800414e:	6983      	ldr	r3, [r0, #24]
 8004150:	b90b      	cbnz	r3, 8004156 <__swbuf_r+0x12>
 8004152:	f000 f9d1 	bl	80044f8 <__sinit>
 8004156:	4b21      	ldr	r3, [pc, #132]	; (80041dc <__swbuf_r+0x98>)
 8004158:	429c      	cmp	r4, r3
 800415a:	d12b      	bne.n	80041b4 <__swbuf_r+0x70>
 800415c:	686c      	ldr	r4, [r5, #4]
 800415e:	69a3      	ldr	r3, [r4, #24]
 8004160:	60a3      	str	r3, [r4, #8]
 8004162:	89a3      	ldrh	r3, [r4, #12]
 8004164:	071a      	lsls	r2, r3, #28
 8004166:	d52f      	bpl.n	80041c8 <__swbuf_r+0x84>
 8004168:	6923      	ldr	r3, [r4, #16]
 800416a:	b36b      	cbz	r3, 80041c8 <__swbuf_r+0x84>
 800416c:	6923      	ldr	r3, [r4, #16]
 800416e:	6820      	ldr	r0, [r4, #0]
 8004170:	1ac0      	subs	r0, r0, r3
 8004172:	6963      	ldr	r3, [r4, #20]
 8004174:	b2f6      	uxtb	r6, r6
 8004176:	4283      	cmp	r3, r0
 8004178:	4637      	mov	r7, r6
 800417a:	dc04      	bgt.n	8004186 <__swbuf_r+0x42>
 800417c:	4621      	mov	r1, r4
 800417e:	4628      	mov	r0, r5
 8004180:	f000 f926 	bl	80043d0 <_fflush_r>
 8004184:	bb30      	cbnz	r0, 80041d4 <__swbuf_r+0x90>
 8004186:	68a3      	ldr	r3, [r4, #8]
 8004188:	3b01      	subs	r3, #1
 800418a:	60a3      	str	r3, [r4, #8]
 800418c:	6823      	ldr	r3, [r4, #0]
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	6022      	str	r2, [r4, #0]
 8004192:	701e      	strb	r6, [r3, #0]
 8004194:	6963      	ldr	r3, [r4, #20]
 8004196:	3001      	adds	r0, #1
 8004198:	4283      	cmp	r3, r0
 800419a:	d004      	beq.n	80041a6 <__swbuf_r+0x62>
 800419c:	89a3      	ldrh	r3, [r4, #12]
 800419e:	07db      	lsls	r3, r3, #31
 80041a0:	d506      	bpl.n	80041b0 <__swbuf_r+0x6c>
 80041a2:	2e0a      	cmp	r6, #10
 80041a4:	d104      	bne.n	80041b0 <__swbuf_r+0x6c>
 80041a6:	4621      	mov	r1, r4
 80041a8:	4628      	mov	r0, r5
 80041aa:	f000 f911 	bl	80043d0 <_fflush_r>
 80041ae:	b988      	cbnz	r0, 80041d4 <__swbuf_r+0x90>
 80041b0:	4638      	mov	r0, r7
 80041b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041b4:	4b0a      	ldr	r3, [pc, #40]	; (80041e0 <__swbuf_r+0x9c>)
 80041b6:	429c      	cmp	r4, r3
 80041b8:	d101      	bne.n	80041be <__swbuf_r+0x7a>
 80041ba:	68ac      	ldr	r4, [r5, #8]
 80041bc:	e7cf      	b.n	800415e <__swbuf_r+0x1a>
 80041be:	4b09      	ldr	r3, [pc, #36]	; (80041e4 <__swbuf_r+0xa0>)
 80041c0:	429c      	cmp	r4, r3
 80041c2:	bf08      	it	eq
 80041c4:	68ec      	ldreq	r4, [r5, #12]
 80041c6:	e7ca      	b.n	800415e <__swbuf_r+0x1a>
 80041c8:	4621      	mov	r1, r4
 80041ca:	4628      	mov	r0, r5
 80041cc:	f000 f80c 	bl	80041e8 <__swsetup_r>
 80041d0:	2800      	cmp	r0, #0
 80041d2:	d0cb      	beq.n	800416c <__swbuf_r+0x28>
 80041d4:	f04f 37ff 	mov.w	r7, #4294967295
 80041d8:	e7ea      	b.n	80041b0 <__swbuf_r+0x6c>
 80041da:	bf00      	nop
 80041dc:	0800527c 	.word	0x0800527c
 80041e0:	0800529c 	.word	0x0800529c
 80041e4:	0800525c 	.word	0x0800525c

080041e8 <__swsetup_r>:
 80041e8:	4b32      	ldr	r3, [pc, #200]	; (80042b4 <__swsetup_r+0xcc>)
 80041ea:	b570      	push	{r4, r5, r6, lr}
 80041ec:	681d      	ldr	r5, [r3, #0]
 80041ee:	4606      	mov	r6, r0
 80041f0:	460c      	mov	r4, r1
 80041f2:	b125      	cbz	r5, 80041fe <__swsetup_r+0x16>
 80041f4:	69ab      	ldr	r3, [r5, #24]
 80041f6:	b913      	cbnz	r3, 80041fe <__swsetup_r+0x16>
 80041f8:	4628      	mov	r0, r5
 80041fa:	f000 f97d 	bl	80044f8 <__sinit>
 80041fe:	4b2e      	ldr	r3, [pc, #184]	; (80042b8 <__swsetup_r+0xd0>)
 8004200:	429c      	cmp	r4, r3
 8004202:	d10f      	bne.n	8004224 <__swsetup_r+0x3c>
 8004204:	686c      	ldr	r4, [r5, #4]
 8004206:	89a3      	ldrh	r3, [r4, #12]
 8004208:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800420c:	0719      	lsls	r1, r3, #28
 800420e:	d42c      	bmi.n	800426a <__swsetup_r+0x82>
 8004210:	06dd      	lsls	r5, r3, #27
 8004212:	d411      	bmi.n	8004238 <__swsetup_r+0x50>
 8004214:	2309      	movs	r3, #9
 8004216:	6033      	str	r3, [r6, #0]
 8004218:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800421c:	81a3      	strh	r3, [r4, #12]
 800421e:	f04f 30ff 	mov.w	r0, #4294967295
 8004222:	e03e      	b.n	80042a2 <__swsetup_r+0xba>
 8004224:	4b25      	ldr	r3, [pc, #148]	; (80042bc <__swsetup_r+0xd4>)
 8004226:	429c      	cmp	r4, r3
 8004228:	d101      	bne.n	800422e <__swsetup_r+0x46>
 800422a:	68ac      	ldr	r4, [r5, #8]
 800422c:	e7eb      	b.n	8004206 <__swsetup_r+0x1e>
 800422e:	4b24      	ldr	r3, [pc, #144]	; (80042c0 <__swsetup_r+0xd8>)
 8004230:	429c      	cmp	r4, r3
 8004232:	bf08      	it	eq
 8004234:	68ec      	ldreq	r4, [r5, #12]
 8004236:	e7e6      	b.n	8004206 <__swsetup_r+0x1e>
 8004238:	0758      	lsls	r0, r3, #29
 800423a:	d512      	bpl.n	8004262 <__swsetup_r+0x7a>
 800423c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800423e:	b141      	cbz	r1, 8004252 <__swsetup_r+0x6a>
 8004240:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004244:	4299      	cmp	r1, r3
 8004246:	d002      	beq.n	800424e <__swsetup_r+0x66>
 8004248:	4630      	mov	r0, r6
 800424a:	f000 fa5b 	bl	8004704 <_free_r>
 800424e:	2300      	movs	r3, #0
 8004250:	6363      	str	r3, [r4, #52]	; 0x34
 8004252:	89a3      	ldrh	r3, [r4, #12]
 8004254:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004258:	81a3      	strh	r3, [r4, #12]
 800425a:	2300      	movs	r3, #0
 800425c:	6063      	str	r3, [r4, #4]
 800425e:	6923      	ldr	r3, [r4, #16]
 8004260:	6023      	str	r3, [r4, #0]
 8004262:	89a3      	ldrh	r3, [r4, #12]
 8004264:	f043 0308 	orr.w	r3, r3, #8
 8004268:	81a3      	strh	r3, [r4, #12]
 800426a:	6923      	ldr	r3, [r4, #16]
 800426c:	b94b      	cbnz	r3, 8004282 <__swsetup_r+0x9a>
 800426e:	89a3      	ldrh	r3, [r4, #12]
 8004270:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004278:	d003      	beq.n	8004282 <__swsetup_r+0x9a>
 800427a:	4621      	mov	r1, r4
 800427c:	4630      	mov	r0, r6
 800427e:	f000 fa01 	bl	8004684 <__smakebuf_r>
 8004282:	89a0      	ldrh	r0, [r4, #12]
 8004284:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004288:	f010 0301 	ands.w	r3, r0, #1
 800428c:	d00a      	beq.n	80042a4 <__swsetup_r+0xbc>
 800428e:	2300      	movs	r3, #0
 8004290:	60a3      	str	r3, [r4, #8]
 8004292:	6963      	ldr	r3, [r4, #20]
 8004294:	425b      	negs	r3, r3
 8004296:	61a3      	str	r3, [r4, #24]
 8004298:	6923      	ldr	r3, [r4, #16]
 800429a:	b943      	cbnz	r3, 80042ae <__swsetup_r+0xc6>
 800429c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80042a0:	d1ba      	bne.n	8004218 <__swsetup_r+0x30>
 80042a2:	bd70      	pop	{r4, r5, r6, pc}
 80042a4:	0781      	lsls	r1, r0, #30
 80042a6:	bf58      	it	pl
 80042a8:	6963      	ldrpl	r3, [r4, #20]
 80042aa:	60a3      	str	r3, [r4, #8]
 80042ac:	e7f4      	b.n	8004298 <__swsetup_r+0xb0>
 80042ae:	2000      	movs	r0, #0
 80042b0:	e7f7      	b.n	80042a2 <__swsetup_r+0xba>
 80042b2:	bf00      	nop
 80042b4:	2000000c 	.word	0x2000000c
 80042b8:	0800527c 	.word	0x0800527c
 80042bc:	0800529c 	.word	0x0800529c
 80042c0:	0800525c 	.word	0x0800525c

080042c4 <__sflush_r>:
 80042c4:	898a      	ldrh	r2, [r1, #12]
 80042c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042ca:	4605      	mov	r5, r0
 80042cc:	0710      	lsls	r0, r2, #28
 80042ce:	460c      	mov	r4, r1
 80042d0:	d458      	bmi.n	8004384 <__sflush_r+0xc0>
 80042d2:	684b      	ldr	r3, [r1, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	dc05      	bgt.n	80042e4 <__sflush_r+0x20>
 80042d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80042da:	2b00      	cmp	r3, #0
 80042dc:	dc02      	bgt.n	80042e4 <__sflush_r+0x20>
 80042de:	2000      	movs	r0, #0
 80042e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042e6:	2e00      	cmp	r6, #0
 80042e8:	d0f9      	beq.n	80042de <__sflush_r+0x1a>
 80042ea:	2300      	movs	r3, #0
 80042ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80042f0:	682f      	ldr	r7, [r5, #0]
 80042f2:	602b      	str	r3, [r5, #0]
 80042f4:	d032      	beq.n	800435c <__sflush_r+0x98>
 80042f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80042f8:	89a3      	ldrh	r3, [r4, #12]
 80042fa:	075a      	lsls	r2, r3, #29
 80042fc:	d505      	bpl.n	800430a <__sflush_r+0x46>
 80042fe:	6863      	ldr	r3, [r4, #4]
 8004300:	1ac0      	subs	r0, r0, r3
 8004302:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004304:	b10b      	cbz	r3, 800430a <__sflush_r+0x46>
 8004306:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004308:	1ac0      	subs	r0, r0, r3
 800430a:	2300      	movs	r3, #0
 800430c:	4602      	mov	r2, r0
 800430e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004310:	6a21      	ldr	r1, [r4, #32]
 8004312:	4628      	mov	r0, r5
 8004314:	47b0      	blx	r6
 8004316:	1c43      	adds	r3, r0, #1
 8004318:	89a3      	ldrh	r3, [r4, #12]
 800431a:	d106      	bne.n	800432a <__sflush_r+0x66>
 800431c:	6829      	ldr	r1, [r5, #0]
 800431e:	291d      	cmp	r1, #29
 8004320:	d82c      	bhi.n	800437c <__sflush_r+0xb8>
 8004322:	4a2a      	ldr	r2, [pc, #168]	; (80043cc <__sflush_r+0x108>)
 8004324:	40ca      	lsrs	r2, r1
 8004326:	07d6      	lsls	r6, r2, #31
 8004328:	d528      	bpl.n	800437c <__sflush_r+0xb8>
 800432a:	2200      	movs	r2, #0
 800432c:	6062      	str	r2, [r4, #4]
 800432e:	04d9      	lsls	r1, r3, #19
 8004330:	6922      	ldr	r2, [r4, #16]
 8004332:	6022      	str	r2, [r4, #0]
 8004334:	d504      	bpl.n	8004340 <__sflush_r+0x7c>
 8004336:	1c42      	adds	r2, r0, #1
 8004338:	d101      	bne.n	800433e <__sflush_r+0x7a>
 800433a:	682b      	ldr	r3, [r5, #0]
 800433c:	b903      	cbnz	r3, 8004340 <__sflush_r+0x7c>
 800433e:	6560      	str	r0, [r4, #84]	; 0x54
 8004340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004342:	602f      	str	r7, [r5, #0]
 8004344:	2900      	cmp	r1, #0
 8004346:	d0ca      	beq.n	80042de <__sflush_r+0x1a>
 8004348:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800434c:	4299      	cmp	r1, r3
 800434e:	d002      	beq.n	8004356 <__sflush_r+0x92>
 8004350:	4628      	mov	r0, r5
 8004352:	f000 f9d7 	bl	8004704 <_free_r>
 8004356:	2000      	movs	r0, #0
 8004358:	6360      	str	r0, [r4, #52]	; 0x34
 800435a:	e7c1      	b.n	80042e0 <__sflush_r+0x1c>
 800435c:	6a21      	ldr	r1, [r4, #32]
 800435e:	2301      	movs	r3, #1
 8004360:	4628      	mov	r0, r5
 8004362:	47b0      	blx	r6
 8004364:	1c41      	adds	r1, r0, #1
 8004366:	d1c7      	bne.n	80042f8 <__sflush_r+0x34>
 8004368:	682b      	ldr	r3, [r5, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0c4      	beq.n	80042f8 <__sflush_r+0x34>
 800436e:	2b1d      	cmp	r3, #29
 8004370:	d001      	beq.n	8004376 <__sflush_r+0xb2>
 8004372:	2b16      	cmp	r3, #22
 8004374:	d101      	bne.n	800437a <__sflush_r+0xb6>
 8004376:	602f      	str	r7, [r5, #0]
 8004378:	e7b1      	b.n	80042de <__sflush_r+0x1a>
 800437a:	89a3      	ldrh	r3, [r4, #12]
 800437c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004380:	81a3      	strh	r3, [r4, #12]
 8004382:	e7ad      	b.n	80042e0 <__sflush_r+0x1c>
 8004384:	690f      	ldr	r7, [r1, #16]
 8004386:	2f00      	cmp	r7, #0
 8004388:	d0a9      	beq.n	80042de <__sflush_r+0x1a>
 800438a:	0793      	lsls	r3, r2, #30
 800438c:	680e      	ldr	r6, [r1, #0]
 800438e:	bf08      	it	eq
 8004390:	694b      	ldreq	r3, [r1, #20]
 8004392:	600f      	str	r7, [r1, #0]
 8004394:	bf18      	it	ne
 8004396:	2300      	movne	r3, #0
 8004398:	eba6 0807 	sub.w	r8, r6, r7
 800439c:	608b      	str	r3, [r1, #8]
 800439e:	f1b8 0f00 	cmp.w	r8, #0
 80043a2:	dd9c      	ble.n	80042de <__sflush_r+0x1a>
 80043a4:	6a21      	ldr	r1, [r4, #32]
 80043a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80043a8:	4643      	mov	r3, r8
 80043aa:	463a      	mov	r2, r7
 80043ac:	4628      	mov	r0, r5
 80043ae:	47b0      	blx	r6
 80043b0:	2800      	cmp	r0, #0
 80043b2:	dc06      	bgt.n	80043c2 <__sflush_r+0xfe>
 80043b4:	89a3      	ldrh	r3, [r4, #12]
 80043b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043ba:	81a3      	strh	r3, [r4, #12]
 80043bc:	f04f 30ff 	mov.w	r0, #4294967295
 80043c0:	e78e      	b.n	80042e0 <__sflush_r+0x1c>
 80043c2:	4407      	add	r7, r0
 80043c4:	eba8 0800 	sub.w	r8, r8, r0
 80043c8:	e7e9      	b.n	800439e <__sflush_r+0xda>
 80043ca:	bf00      	nop
 80043cc:	20400001 	.word	0x20400001

080043d0 <_fflush_r>:
 80043d0:	b538      	push	{r3, r4, r5, lr}
 80043d2:	690b      	ldr	r3, [r1, #16]
 80043d4:	4605      	mov	r5, r0
 80043d6:	460c      	mov	r4, r1
 80043d8:	b913      	cbnz	r3, 80043e0 <_fflush_r+0x10>
 80043da:	2500      	movs	r5, #0
 80043dc:	4628      	mov	r0, r5
 80043de:	bd38      	pop	{r3, r4, r5, pc}
 80043e0:	b118      	cbz	r0, 80043ea <_fflush_r+0x1a>
 80043e2:	6983      	ldr	r3, [r0, #24]
 80043e4:	b90b      	cbnz	r3, 80043ea <_fflush_r+0x1a>
 80043e6:	f000 f887 	bl	80044f8 <__sinit>
 80043ea:	4b14      	ldr	r3, [pc, #80]	; (800443c <_fflush_r+0x6c>)
 80043ec:	429c      	cmp	r4, r3
 80043ee:	d11b      	bne.n	8004428 <_fflush_r+0x58>
 80043f0:	686c      	ldr	r4, [r5, #4]
 80043f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0ef      	beq.n	80043da <_fflush_r+0xa>
 80043fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80043fc:	07d0      	lsls	r0, r2, #31
 80043fe:	d404      	bmi.n	800440a <_fflush_r+0x3a>
 8004400:	0599      	lsls	r1, r3, #22
 8004402:	d402      	bmi.n	800440a <_fflush_r+0x3a>
 8004404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004406:	f000 f915 	bl	8004634 <__retarget_lock_acquire_recursive>
 800440a:	4628      	mov	r0, r5
 800440c:	4621      	mov	r1, r4
 800440e:	f7ff ff59 	bl	80042c4 <__sflush_r>
 8004412:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004414:	07da      	lsls	r2, r3, #31
 8004416:	4605      	mov	r5, r0
 8004418:	d4e0      	bmi.n	80043dc <_fflush_r+0xc>
 800441a:	89a3      	ldrh	r3, [r4, #12]
 800441c:	059b      	lsls	r3, r3, #22
 800441e:	d4dd      	bmi.n	80043dc <_fflush_r+0xc>
 8004420:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004422:	f000 f908 	bl	8004636 <__retarget_lock_release_recursive>
 8004426:	e7d9      	b.n	80043dc <_fflush_r+0xc>
 8004428:	4b05      	ldr	r3, [pc, #20]	; (8004440 <_fflush_r+0x70>)
 800442a:	429c      	cmp	r4, r3
 800442c:	d101      	bne.n	8004432 <_fflush_r+0x62>
 800442e:	68ac      	ldr	r4, [r5, #8]
 8004430:	e7df      	b.n	80043f2 <_fflush_r+0x22>
 8004432:	4b04      	ldr	r3, [pc, #16]	; (8004444 <_fflush_r+0x74>)
 8004434:	429c      	cmp	r4, r3
 8004436:	bf08      	it	eq
 8004438:	68ec      	ldreq	r4, [r5, #12]
 800443a:	e7da      	b.n	80043f2 <_fflush_r+0x22>
 800443c:	0800527c 	.word	0x0800527c
 8004440:	0800529c 	.word	0x0800529c
 8004444:	0800525c 	.word	0x0800525c

08004448 <std>:
 8004448:	2300      	movs	r3, #0
 800444a:	b510      	push	{r4, lr}
 800444c:	4604      	mov	r4, r0
 800444e:	e9c0 3300 	strd	r3, r3, [r0]
 8004452:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004456:	6083      	str	r3, [r0, #8]
 8004458:	8181      	strh	r1, [r0, #12]
 800445a:	6643      	str	r3, [r0, #100]	; 0x64
 800445c:	81c2      	strh	r2, [r0, #14]
 800445e:	6183      	str	r3, [r0, #24]
 8004460:	4619      	mov	r1, r3
 8004462:	2208      	movs	r2, #8
 8004464:	305c      	adds	r0, #92	; 0x5c
 8004466:	f7ff fdc1 	bl	8003fec <memset>
 800446a:	4b05      	ldr	r3, [pc, #20]	; (8004480 <std+0x38>)
 800446c:	6263      	str	r3, [r4, #36]	; 0x24
 800446e:	4b05      	ldr	r3, [pc, #20]	; (8004484 <std+0x3c>)
 8004470:	62a3      	str	r3, [r4, #40]	; 0x28
 8004472:	4b05      	ldr	r3, [pc, #20]	; (8004488 <std+0x40>)
 8004474:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004476:	4b05      	ldr	r3, [pc, #20]	; (800448c <std+0x44>)
 8004478:	6224      	str	r4, [r4, #32]
 800447a:	6323      	str	r3, [r4, #48]	; 0x30
 800447c:	bd10      	pop	{r4, pc}
 800447e:	bf00      	nop
 8004480:	08004f51 	.word	0x08004f51
 8004484:	08004f73 	.word	0x08004f73
 8004488:	08004fab 	.word	0x08004fab
 800448c:	08004fcf 	.word	0x08004fcf

08004490 <_cleanup_r>:
 8004490:	4901      	ldr	r1, [pc, #4]	; (8004498 <_cleanup_r+0x8>)
 8004492:	f000 b8af 	b.w	80045f4 <_fwalk_reent>
 8004496:	bf00      	nop
 8004498:	080043d1 	.word	0x080043d1

0800449c <__sfmoreglue>:
 800449c:	b570      	push	{r4, r5, r6, lr}
 800449e:	2268      	movs	r2, #104	; 0x68
 80044a0:	1e4d      	subs	r5, r1, #1
 80044a2:	4355      	muls	r5, r2
 80044a4:	460e      	mov	r6, r1
 80044a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80044aa:	f000 f997 	bl	80047dc <_malloc_r>
 80044ae:	4604      	mov	r4, r0
 80044b0:	b140      	cbz	r0, 80044c4 <__sfmoreglue+0x28>
 80044b2:	2100      	movs	r1, #0
 80044b4:	e9c0 1600 	strd	r1, r6, [r0]
 80044b8:	300c      	adds	r0, #12
 80044ba:	60a0      	str	r0, [r4, #8]
 80044bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80044c0:	f7ff fd94 	bl	8003fec <memset>
 80044c4:	4620      	mov	r0, r4
 80044c6:	bd70      	pop	{r4, r5, r6, pc}

080044c8 <__sfp_lock_acquire>:
 80044c8:	4801      	ldr	r0, [pc, #4]	; (80044d0 <__sfp_lock_acquire+0x8>)
 80044ca:	f000 b8b3 	b.w	8004634 <__retarget_lock_acquire_recursive>
 80044ce:	bf00      	nop
 80044d0:	200001d1 	.word	0x200001d1

080044d4 <__sfp_lock_release>:
 80044d4:	4801      	ldr	r0, [pc, #4]	; (80044dc <__sfp_lock_release+0x8>)
 80044d6:	f000 b8ae 	b.w	8004636 <__retarget_lock_release_recursive>
 80044da:	bf00      	nop
 80044dc:	200001d1 	.word	0x200001d1

080044e0 <__sinit_lock_acquire>:
 80044e0:	4801      	ldr	r0, [pc, #4]	; (80044e8 <__sinit_lock_acquire+0x8>)
 80044e2:	f000 b8a7 	b.w	8004634 <__retarget_lock_acquire_recursive>
 80044e6:	bf00      	nop
 80044e8:	200001d2 	.word	0x200001d2

080044ec <__sinit_lock_release>:
 80044ec:	4801      	ldr	r0, [pc, #4]	; (80044f4 <__sinit_lock_release+0x8>)
 80044ee:	f000 b8a2 	b.w	8004636 <__retarget_lock_release_recursive>
 80044f2:	bf00      	nop
 80044f4:	200001d2 	.word	0x200001d2

080044f8 <__sinit>:
 80044f8:	b510      	push	{r4, lr}
 80044fa:	4604      	mov	r4, r0
 80044fc:	f7ff fff0 	bl	80044e0 <__sinit_lock_acquire>
 8004500:	69a3      	ldr	r3, [r4, #24]
 8004502:	b11b      	cbz	r3, 800450c <__sinit+0x14>
 8004504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004508:	f7ff bff0 	b.w	80044ec <__sinit_lock_release>
 800450c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004510:	6523      	str	r3, [r4, #80]	; 0x50
 8004512:	4b13      	ldr	r3, [pc, #76]	; (8004560 <__sinit+0x68>)
 8004514:	4a13      	ldr	r2, [pc, #76]	; (8004564 <__sinit+0x6c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	62a2      	str	r2, [r4, #40]	; 0x28
 800451a:	42a3      	cmp	r3, r4
 800451c:	bf04      	itt	eq
 800451e:	2301      	moveq	r3, #1
 8004520:	61a3      	streq	r3, [r4, #24]
 8004522:	4620      	mov	r0, r4
 8004524:	f000 f820 	bl	8004568 <__sfp>
 8004528:	6060      	str	r0, [r4, #4]
 800452a:	4620      	mov	r0, r4
 800452c:	f000 f81c 	bl	8004568 <__sfp>
 8004530:	60a0      	str	r0, [r4, #8]
 8004532:	4620      	mov	r0, r4
 8004534:	f000 f818 	bl	8004568 <__sfp>
 8004538:	2200      	movs	r2, #0
 800453a:	60e0      	str	r0, [r4, #12]
 800453c:	2104      	movs	r1, #4
 800453e:	6860      	ldr	r0, [r4, #4]
 8004540:	f7ff ff82 	bl	8004448 <std>
 8004544:	68a0      	ldr	r0, [r4, #8]
 8004546:	2201      	movs	r2, #1
 8004548:	2109      	movs	r1, #9
 800454a:	f7ff ff7d 	bl	8004448 <std>
 800454e:	68e0      	ldr	r0, [r4, #12]
 8004550:	2202      	movs	r2, #2
 8004552:	2112      	movs	r1, #18
 8004554:	f7ff ff78 	bl	8004448 <std>
 8004558:	2301      	movs	r3, #1
 800455a:	61a3      	str	r3, [r4, #24]
 800455c:	e7d2      	b.n	8004504 <__sinit+0xc>
 800455e:	bf00      	nop
 8004560:	08005258 	.word	0x08005258
 8004564:	08004491 	.word	0x08004491

08004568 <__sfp>:
 8004568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456a:	4607      	mov	r7, r0
 800456c:	f7ff ffac 	bl	80044c8 <__sfp_lock_acquire>
 8004570:	4b1e      	ldr	r3, [pc, #120]	; (80045ec <__sfp+0x84>)
 8004572:	681e      	ldr	r6, [r3, #0]
 8004574:	69b3      	ldr	r3, [r6, #24]
 8004576:	b913      	cbnz	r3, 800457e <__sfp+0x16>
 8004578:	4630      	mov	r0, r6
 800457a:	f7ff ffbd 	bl	80044f8 <__sinit>
 800457e:	3648      	adds	r6, #72	; 0x48
 8004580:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004584:	3b01      	subs	r3, #1
 8004586:	d503      	bpl.n	8004590 <__sfp+0x28>
 8004588:	6833      	ldr	r3, [r6, #0]
 800458a:	b30b      	cbz	r3, 80045d0 <__sfp+0x68>
 800458c:	6836      	ldr	r6, [r6, #0]
 800458e:	e7f7      	b.n	8004580 <__sfp+0x18>
 8004590:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004594:	b9d5      	cbnz	r5, 80045cc <__sfp+0x64>
 8004596:	4b16      	ldr	r3, [pc, #88]	; (80045f0 <__sfp+0x88>)
 8004598:	60e3      	str	r3, [r4, #12]
 800459a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800459e:	6665      	str	r5, [r4, #100]	; 0x64
 80045a0:	f000 f847 	bl	8004632 <__retarget_lock_init_recursive>
 80045a4:	f7ff ff96 	bl	80044d4 <__sfp_lock_release>
 80045a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80045ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80045b0:	6025      	str	r5, [r4, #0]
 80045b2:	61a5      	str	r5, [r4, #24]
 80045b4:	2208      	movs	r2, #8
 80045b6:	4629      	mov	r1, r5
 80045b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80045bc:	f7ff fd16 	bl	8003fec <memset>
 80045c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80045c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80045c8:	4620      	mov	r0, r4
 80045ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045cc:	3468      	adds	r4, #104	; 0x68
 80045ce:	e7d9      	b.n	8004584 <__sfp+0x1c>
 80045d0:	2104      	movs	r1, #4
 80045d2:	4638      	mov	r0, r7
 80045d4:	f7ff ff62 	bl	800449c <__sfmoreglue>
 80045d8:	4604      	mov	r4, r0
 80045da:	6030      	str	r0, [r6, #0]
 80045dc:	2800      	cmp	r0, #0
 80045de:	d1d5      	bne.n	800458c <__sfp+0x24>
 80045e0:	f7ff ff78 	bl	80044d4 <__sfp_lock_release>
 80045e4:	230c      	movs	r3, #12
 80045e6:	603b      	str	r3, [r7, #0]
 80045e8:	e7ee      	b.n	80045c8 <__sfp+0x60>
 80045ea:	bf00      	nop
 80045ec:	08005258 	.word	0x08005258
 80045f0:	ffff0001 	.word	0xffff0001

080045f4 <_fwalk_reent>:
 80045f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045f8:	4606      	mov	r6, r0
 80045fa:	4688      	mov	r8, r1
 80045fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004600:	2700      	movs	r7, #0
 8004602:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004606:	f1b9 0901 	subs.w	r9, r9, #1
 800460a:	d505      	bpl.n	8004618 <_fwalk_reent+0x24>
 800460c:	6824      	ldr	r4, [r4, #0]
 800460e:	2c00      	cmp	r4, #0
 8004610:	d1f7      	bne.n	8004602 <_fwalk_reent+0xe>
 8004612:	4638      	mov	r0, r7
 8004614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004618:	89ab      	ldrh	r3, [r5, #12]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d907      	bls.n	800462e <_fwalk_reent+0x3a>
 800461e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004622:	3301      	adds	r3, #1
 8004624:	d003      	beq.n	800462e <_fwalk_reent+0x3a>
 8004626:	4629      	mov	r1, r5
 8004628:	4630      	mov	r0, r6
 800462a:	47c0      	blx	r8
 800462c:	4307      	orrs	r7, r0
 800462e:	3568      	adds	r5, #104	; 0x68
 8004630:	e7e9      	b.n	8004606 <_fwalk_reent+0x12>

08004632 <__retarget_lock_init_recursive>:
 8004632:	4770      	bx	lr

08004634 <__retarget_lock_acquire_recursive>:
 8004634:	4770      	bx	lr

08004636 <__retarget_lock_release_recursive>:
 8004636:	4770      	bx	lr

08004638 <__swhatbuf_r>:
 8004638:	b570      	push	{r4, r5, r6, lr}
 800463a:	460e      	mov	r6, r1
 800463c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004640:	2900      	cmp	r1, #0
 8004642:	b096      	sub	sp, #88	; 0x58
 8004644:	4614      	mov	r4, r2
 8004646:	461d      	mov	r5, r3
 8004648:	da08      	bge.n	800465c <__swhatbuf_r+0x24>
 800464a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	602a      	str	r2, [r5, #0]
 8004652:	061a      	lsls	r2, r3, #24
 8004654:	d410      	bmi.n	8004678 <__swhatbuf_r+0x40>
 8004656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800465a:	e00e      	b.n	800467a <__swhatbuf_r+0x42>
 800465c:	466a      	mov	r2, sp
 800465e:	f000 fcdd 	bl	800501c <_fstat_r>
 8004662:	2800      	cmp	r0, #0
 8004664:	dbf1      	blt.n	800464a <__swhatbuf_r+0x12>
 8004666:	9a01      	ldr	r2, [sp, #4]
 8004668:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800466c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004670:	425a      	negs	r2, r3
 8004672:	415a      	adcs	r2, r3
 8004674:	602a      	str	r2, [r5, #0]
 8004676:	e7ee      	b.n	8004656 <__swhatbuf_r+0x1e>
 8004678:	2340      	movs	r3, #64	; 0x40
 800467a:	2000      	movs	r0, #0
 800467c:	6023      	str	r3, [r4, #0]
 800467e:	b016      	add	sp, #88	; 0x58
 8004680:	bd70      	pop	{r4, r5, r6, pc}
	...

08004684 <__smakebuf_r>:
 8004684:	898b      	ldrh	r3, [r1, #12]
 8004686:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004688:	079d      	lsls	r5, r3, #30
 800468a:	4606      	mov	r6, r0
 800468c:	460c      	mov	r4, r1
 800468e:	d507      	bpl.n	80046a0 <__smakebuf_r+0x1c>
 8004690:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004694:	6023      	str	r3, [r4, #0]
 8004696:	6123      	str	r3, [r4, #16]
 8004698:	2301      	movs	r3, #1
 800469a:	6163      	str	r3, [r4, #20]
 800469c:	b002      	add	sp, #8
 800469e:	bd70      	pop	{r4, r5, r6, pc}
 80046a0:	ab01      	add	r3, sp, #4
 80046a2:	466a      	mov	r2, sp
 80046a4:	f7ff ffc8 	bl	8004638 <__swhatbuf_r>
 80046a8:	9900      	ldr	r1, [sp, #0]
 80046aa:	4605      	mov	r5, r0
 80046ac:	4630      	mov	r0, r6
 80046ae:	f000 f895 	bl	80047dc <_malloc_r>
 80046b2:	b948      	cbnz	r0, 80046c8 <__smakebuf_r+0x44>
 80046b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046b8:	059a      	lsls	r2, r3, #22
 80046ba:	d4ef      	bmi.n	800469c <__smakebuf_r+0x18>
 80046bc:	f023 0303 	bic.w	r3, r3, #3
 80046c0:	f043 0302 	orr.w	r3, r3, #2
 80046c4:	81a3      	strh	r3, [r4, #12]
 80046c6:	e7e3      	b.n	8004690 <__smakebuf_r+0xc>
 80046c8:	4b0d      	ldr	r3, [pc, #52]	; (8004700 <__smakebuf_r+0x7c>)
 80046ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80046cc:	89a3      	ldrh	r3, [r4, #12]
 80046ce:	6020      	str	r0, [r4, #0]
 80046d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d4:	81a3      	strh	r3, [r4, #12]
 80046d6:	9b00      	ldr	r3, [sp, #0]
 80046d8:	6163      	str	r3, [r4, #20]
 80046da:	9b01      	ldr	r3, [sp, #4]
 80046dc:	6120      	str	r0, [r4, #16]
 80046de:	b15b      	cbz	r3, 80046f8 <__smakebuf_r+0x74>
 80046e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046e4:	4630      	mov	r0, r6
 80046e6:	f000 fcab 	bl	8005040 <_isatty_r>
 80046ea:	b128      	cbz	r0, 80046f8 <__smakebuf_r+0x74>
 80046ec:	89a3      	ldrh	r3, [r4, #12]
 80046ee:	f023 0303 	bic.w	r3, r3, #3
 80046f2:	f043 0301 	orr.w	r3, r3, #1
 80046f6:	81a3      	strh	r3, [r4, #12]
 80046f8:	89a0      	ldrh	r0, [r4, #12]
 80046fa:	4305      	orrs	r5, r0
 80046fc:	81a5      	strh	r5, [r4, #12]
 80046fe:	e7cd      	b.n	800469c <__smakebuf_r+0x18>
 8004700:	08004491 	.word	0x08004491

08004704 <_free_r>:
 8004704:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004706:	2900      	cmp	r1, #0
 8004708:	d044      	beq.n	8004794 <_free_r+0x90>
 800470a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800470e:	9001      	str	r0, [sp, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	f1a1 0404 	sub.w	r4, r1, #4
 8004716:	bfb8      	it	lt
 8004718:	18e4      	addlt	r4, r4, r3
 800471a:	f000 fcb3 	bl	8005084 <__malloc_lock>
 800471e:	4a1e      	ldr	r2, [pc, #120]	; (8004798 <_free_r+0x94>)
 8004720:	9801      	ldr	r0, [sp, #4]
 8004722:	6813      	ldr	r3, [r2, #0]
 8004724:	b933      	cbnz	r3, 8004734 <_free_r+0x30>
 8004726:	6063      	str	r3, [r4, #4]
 8004728:	6014      	str	r4, [r2, #0]
 800472a:	b003      	add	sp, #12
 800472c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004730:	f000 bcae 	b.w	8005090 <__malloc_unlock>
 8004734:	42a3      	cmp	r3, r4
 8004736:	d908      	bls.n	800474a <_free_r+0x46>
 8004738:	6825      	ldr	r5, [r4, #0]
 800473a:	1961      	adds	r1, r4, r5
 800473c:	428b      	cmp	r3, r1
 800473e:	bf01      	itttt	eq
 8004740:	6819      	ldreq	r1, [r3, #0]
 8004742:	685b      	ldreq	r3, [r3, #4]
 8004744:	1949      	addeq	r1, r1, r5
 8004746:	6021      	streq	r1, [r4, #0]
 8004748:	e7ed      	b.n	8004726 <_free_r+0x22>
 800474a:	461a      	mov	r2, r3
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	b10b      	cbz	r3, 8004754 <_free_r+0x50>
 8004750:	42a3      	cmp	r3, r4
 8004752:	d9fa      	bls.n	800474a <_free_r+0x46>
 8004754:	6811      	ldr	r1, [r2, #0]
 8004756:	1855      	adds	r5, r2, r1
 8004758:	42a5      	cmp	r5, r4
 800475a:	d10b      	bne.n	8004774 <_free_r+0x70>
 800475c:	6824      	ldr	r4, [r4, #0]
 800475e:	4421      	add	r1, r4
 8004760:	1854      	adds	r4, r2, r1
 8004762:	42a3      	cmp	r3, r4
 8004764:	6011      	str	r1, [r2, #0]
 8004766:	d1e0      	bne.n	800472a <_free_r+0x26>
 8004768:	681c      	ldr	r4, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	6053      	str	r3, [r2, #4]
 800476e:	4421      	add	r1, r4
 8004770:	6011      	str	r1, [r2, #0]
 8004772:	e7da      	b.n	800472a <_free_r+0x26>
 8004774:	d902      	bls.n	800477c <_free_r+0x78>
 8004776:	230c      	movs	r3, #12
 8004778:	6003      	str	r3, [r0, #0]
 800477a:	e7d6      	b.n	800472a <_free_r+0x26>
 800477c:	6825      	ldr	r5, [r4, #0]
 800477e:	1961      	adds	r1, r4, r5
 8004780:	428b      	cmp	r3, r1
 8004782:	bf04      	itt	eq
 8004784:	6819      	ldreq	r1, [r3, #0]
 8004786:	685b      	ldreq	r3, [r3, #4]
 8004788:	6063      	str	r3, [r4, #4]
 800478a:	bf04      	itt	eq
 800478c:	1949      	addeq	r1, r1, r5
 800478e:	6021      	streq	r1, [r4, #0]
 8004790:	6054      	str	r4, [r2, #4]
 8004792:	e7ca      	b.n	800472a <_free_r+0x26>
 8004794:	b003      	add	sp, #12
 8004796:	bd30      	pop	{r4, r5, pc}
 8004798:	200001d4 	.word	0x200001d4

0800479c <sbrk_aligned>:
 800479c:	b570      	push	{r4, r5, r6, lr}
 800479e:	4e0e      	ldr	r6, [pc, #56]	; (80047d8 <sbrk_aligned+0x3c>)
 80047a0:	460c      	mov	r4, r1
 80047a2:	6831      	ldr	r1, [r6, #0]
 80047a4:	4605      	mov	r5, r0
 80047a6:	b911      	cbnz	r1, 80047ae <sbrk_aligned+0x12>
 80047a8:	f000 fbc2 	bl	8004f30 <_sbrk_r>
 80047ac:	6030      	str	r0, [r6, #0]
 80047ae:	4621      	mov	r1, r4
 80047b0:	4628      	mov	r0, r5
 80047b2:	f000 fbbd 	bl	8004f30 <_sbrk_r>
 80047b6:	1c43      	adds	r3, r0, #1
 80047b8:	d00a      	beq.n	80047d0 <sbrk_aligned+0x34>
 80047ba:	1cc4      	adds	r4, r0, #3
 80047bc:	f024 0403 	bic.w	r4, r4, #3
 80047c0:	42a0      	cmp	r0, r4
 80047c2:	d007      	beq.n	80047d4 <sbrk_aligned+0x38>
 80047c4:	1a21      	subs	r1, r4, r0
 80047c6:	4628      	mov	r0, r5
 80047c8:	f000 fbb2 	bl	8004f30 <_sbrk_r>
 80047cc:	3001      	adds	r0, #1
 80047ce:	d101      	bne.n	80047d4 <sbrk_aligned+0x38>
 80047d0:	f04f 34ff 	mov.w	r4, #4294967295
 80047d4:	4620      	mov	r0, r4
 80047d6:	bd70      	pop	{r4, r5, r6, pc}
 80047d8:	200001d8 	.word	0x200001d8

080047dc <_malloc_r>:
 80047dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047e0:	1ccd      	adds	r5, r1, #3
 80047e2:	f025 0503 	bic.w	r5, r5, #3
 80047e6:	3508      	adds	r5, #8
 80047e8:	2d0c      	cmp	r5, #12
 80047ea:	bf38      	it	cc
 80047ec:	250c      	movcc	r5, #12
 80047ee:	2d00      	cmp	r5, #0
 80047f0:	4607      	mov	r7, r0
 80047f2:	db01      	blt.n	80047f8 <_malloc_r+0x1c>
 80047f4:	42a9      	cmp	r1, r5
 80047f6:	d905      	bls.n	8004804 <_malloc_r+0x28>
 80047f8:	230c      	movs	r3, #12
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	2600      	movs	r6, #0
 80047fe:	4630      	mov	r0, r6
 8004800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004804:	4e2e      	ldr	r6, [pc, #184]	; (80048c0 <_malloc_r+0xe4>)
 8004806:	f000 fc3d 	bl	8005084 <__malloc_lock>
 800480a:	6833      	ldr	r3, [r6, #0]
 800480c:	461c      	mov	r4, r3
 800480e:	bb34      	cbnz	r4, 800485e <_malloc_r+0x82>
 8004810:	4629      	mov	r1, r5
 8004812:	4638      	mov	r0, r7
 8004814:	f7ff ffc2 	bl	800479c <sbrk_aligned>
 8004818:	1c43      	adds	r3, r0, #1
 800481a:	4604      	mov	r4, r0
 800481c:	d14d      	bne.n	80048ba <_malloc_r+0xde>
 800481e:	6834      	ldr	r4, [r6, #0]
 8004820:	4626      	mov	r6, r4
 8004822:	2e00      	cmp	r6, #0
 8004824:	d140      	bne.n	80048a8 <_malloc_r+0xcc>
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	4631      	mov	r1, r6
 800482a:	4638      	mov	r0, r7
 800482c:	eb04 0803 	add.w	r8, r4, r3
 8004830:	f000 fb7e 	bl	8004f30 <_sbrk_r>
 8004834:	4580      	cmp	r8, r0
 8004836:	d13a      	bne.n	80048ae <_malloc_r+0xd2>
 8004838:	6821      	ldr	r1, [r4, #0]
 800483a:	3503      	adds	r5, #3
 800483c:	1a6d      	subs	r5, r5, r1
 800483e:	f025 0503 	bic.w	r5, r5, #3
 8004842:	3508      	adds	r5, #8
 8004844:	2d0c      	cmp	r5, #12
 8004846:	bf38      	it	cc
 8004848:	250c      	movcc	r5, #12
 800484a:	4629      	mov	r1, r5
 800484c:	4638      	mov	r0, r7
 800484e:	f7ff ffa5 	bl	800479c <sbrk_aligned>
 8004852:	3001      	adds	r0, #1
 8004854:	d02b      	beq.n	80048ae <_malloc_r+0xd2>
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	442b      	add	r3, r5
 800485a:	6023      	str	r3, [r4, #0]
 800485c:	e00e      	b.n	800487c <_malloc_r+0xa0>
 800485e:	6822      	ldr	r2, [r4, #0]
 8004860:	1b52      	subs	r2, r2, r5
 8004862:	d41e      	bmi.n	80048a2 <_malloc_r+0xc6>
 8004864:	2a0b      	cmp	r2, #11
 8004866:	d916      	bls.n	8004896 <_malloc_r+0xba>
 8004868:	1961      	adds	r1, r4, r5
 800486a:	42a3      	cmp	r3, r4
 800486c:	6025      	str	r5, [r4, #0]
 800486e:	bf18      	it	ne
 8004870:	6059      	strne	r1, [r3, #4]
 8004872:	6863      	ldr	r3, [r4, #4]
 8004874:	bf08      	it	eq
 8004876:	6031      	streq	r1, [r6, #0]
 8004878:	5162      	str	r2, [r4, r5]
 800487a:	604b      	str	r3, [r1, #4]
 800487c:	4638      	mov	r0, r7
 800487e:	f104 060b 	add.w	r6, r4, #11
 8004882:	f000 fc05 	bl	8005090 <__malloc_unlock>
 8004886:	f026 0607 	bic.w	r6, r6, #7
 800488a:	1d23      	adds	r3, r4, #4
 800488c:	1af2      	subs	r2, r6, r3
 800488e:	d0b6      	beq.n	80047fe <_malloc_r+0x22>
 8004890:	1b9b      	subs	r3, r3, r6
 8004892:	50a3      	str	r3, [r4, r2]
 8004894:	e7b3      	b.n	80047fe <_malloc_r+0x22>
 8004896:	6862      	ldr	r2, [r4, #4]
 8004898:	42a3      	cmp	r3, r4
 800489a:	bf0c      	ite	eq
 800489c:	6032      	streq	r2, [r6, #0]
 800489e:	605a      	strne	r2, [r3, #4]
 80048a0:	e7ec      	b.n	800487c <_malloc_r+0xa0>
 80048a2:	4623      	mov	r3, r4
 80048a4:	6864      	ldr	r4, [r4, #4]
 80048a6:	e7b2      	b.n	800480e <_malloc_r+0x32>
 80048a8:	4634      	mov	r4, r6
 80048aa:	6876      	ldr	r6, [r6, #4]
 80048ac:	e7b9      	b.n	8004822 <_malloc_r+0x46>
 80048ae:	230c      	movs	r3, #12
 80048b0:	603b      	str	r3, [r7, #0]
 80048b2:	4638      	mov	r0, r7
 80048b4:	f000 fbec 	bl	8005090 <__malloc_unlock>
 80048b8:	e7a1      	b.n	80047fe <_malloc_r+0x22>
 80048ba:	6025      	str	r5, [r4, #0]
 80048bc:	e7de      	b.n	800487c <_malloc_r+0xa0>
 80048be:	bf00      	nop
 80048c0:	200001d4 	.word	0x200001d4

080048c4 <__sfputc_r>:
 80048c4:	6893      	ldr	r3, [r2, #8]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	b410      	push	{r4}
 80048cc:	6093      	str	r3, [r2, #8]
 80048ce:	da08      	bge.n	80048e2 <__sfputc_r+0x1e>
 80048d0:	6994      	ldr	r4, [r2, #24]
 80048d2:	42a3      	cmp	r3, r4
 80048d4:	db01      	blt.n	80048da <__sfputc_r+0x16>
 80048d6:	290a      	cmp	r1, #10
 80048d8:	d103      	bne.n	80048e2 <__sfputc_r+0x1e>
 80048da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048de:	f7ff bc31 	b.w	8004144 <__swbuf_r>
 80048e2:	6813      	ldr	r3, [r2, #0]
 80048e4:	1c58      	adds	r0, r3, #1
 80048e6:	6010      	str	r0, [r2, #0]
 80048e8:	7019      	strb	r1, [r3, #0]
 80048ea:	4608      	mov	r0, r1
 80048ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <__sfputs_r>:
 80048f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f4:	4606      	mov	r6, r0
 80048f6:	460f      	mov	r7, r1
 80048f8:	4614      	mov	r4, r2
 80048fa:	18d5      	adds	r5, r2, r3
 80048fc:	42ac      	cmp	r4, r5
 80048fe:	d101      	bne.n	8004904 <__sfputs_r+0x12>
 8004900:	2000      	movs	r0, #0
 8004902:	e007      	b.n	8004914 <__sfputs_r+0x22>
 8004904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004908:	463a      	mov	r2, r7
 800490a:	4630      	mov	r0, r6
 800490c:	f7ff ffda 	bl	80048c4 <__sfputc_r>
 8004910:	1c43      	adds	r3, r0, #1
 8004912:	d1f3      	bne.n	80048fc <__sfputs_r+0xa>
 8004914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004918 <_vfiprintf_r>:
 8004918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800491c:	460d      	mov	r5, r1
 800491e:	b09d      	sub	sp, #116	; 0x74
 8004920:	4614      	mov	r4, r2
 8004922:	4698      	mov	r8, r3
 8004924:	4606      	mov	r6, r0
 8004926:	b118      	cbz	r0, 8004930 <_vfiprintf_r+0x18>
 8004928:	6983      	ldr	r3, [r0, #24]
 800492a:	b90b      	cbnz	r3, 8004930 <_vfiprintf_r+0x18>
 800492c:	f7ff fde4 	bl	80044f8 <__sinit>
 8004930:	4b89      	ldr	r3, [pc, #548]	; (8004b58 <_vfiprintf_r+0x240>)
 8004932:	429d      	cmp	r5, r3
 8004934:	d11b      	bne.n	800496e <_vfiprintf_r+0x56>
 8004936:	6875      	ldr	r5, [r6, #4]
 8004938:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800493a:	07d9      	lsls	r1, r3, #31
 800493c:	d405      	bmi.n	800494a <_vfiprintf_r+0x32>
 800493e:	89ab      	ldrh	r3, [r5, #12]
 8004940:	059a      	lsls	r2, r3, #22
 8004942:	d402      	bmi.n	800494a <_vfiprintf_r+0x32>
 8004944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004946:	f7ff fe75 	bl	8004634 <__retarget_lock_acquire_recursive>
 800494a:	89ab      	ldrh	r3, [r5, #12]
 800494c:	071b      	lsls	r3, r3, #28
 800494e:	d501      	bpl.n	8004954 <_vfiprintf_r+0x3c>
 8004950:	692b      	ldr	r3, [r5, #16]
 8004952:	b9eb      	cbnz	r3, 8004990 <_vfiprintf_r+0x78>
 8004954:	4629      	mov	r1, r5
 8004956:	4630      	mov	r0, r6
 8004958:	f7ff fc46 	bl	80041e8 <__swsetup_r>
 800495c:	b1c0      	cbz	r0, 8004990 <_vfiprintf_r+0x78>
 800495e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004960:	07dc      	lsls	r4, r3, #31
 8004962:	d50e      	bpl.n	8004982 <_vfiprintf_r+0x6a>
 8004964:	f04f 30ff 	mov.w	r0, #4294967295
 8004968:	b01d      	add	sp, #116	; 0x74
 800496a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800496e:	4b7b      	ldr	r3, [pc, #492]	; (8004b5c <_vfiprintf_r+0x244>)
 8004970:	429d      	cmp	r5, r3
 8004972:	d101      	bne.n	8004978 <_vfiprintf_r+0x60>
 8004974:	68b5      	ldr	r5, [r6, #8]
 8004976:	e7df      	b.n	8004938 <_vfiprintf_r+0x20>
 8004978:	4b79      	ldr	r3, [pc, #484]	; (8004b60 <_vfiprintf_r+0x248>)
 800497a:	429d      	cmp	r5, r3
 800497c:	bf08      	it	eq
 800497e:	68f5      	ldreq	r5, [r6, #12]
 8004980:	e7da      	b.n	8004938 <_vfiprintf_r+0x20>
 8004982:	89ab      	ldrh	r3, [r5, #12]
 8004984:	0598      	lsls	r0, r3, #22
 8004986:	d4ed      	bmi.n	8004964 <_vfiprintf_r+0x4c>
 8004988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800498a:	f7ff fe54 	bl	8004636 <__retarget_lock_release_recursive>
 800498e:	e7e9      	b.n	8004964 <_vfiprintf_r+0x4c>
 8004990:	2300      	movs	r3, #0
 8004992:	9309      	str	r3, [sp, #36]	; 0x24
 8004994:	2320      	movs	r3, #32
 8004996:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800499a:	f8cd 800c 	str.w	r8, [sp, #12]
 800499e:	2330      	movs	r3, #48	; 0x30
 80049a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004b64 <_vfiprintf_r+0x24c>
 80049a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049a8:	f04f 0901 	mov.w	r9, #1
 80049ac:	4623      	mov	r3, r4
 80049ae:	469a      	mov	sl, r3
 80049b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049b4:	b10a      	cbz	r2, 80049ba <_vfiprintf_r+0xa2>
 80049b6:	2a25      	cmp	r2, #37	; 0x25
 80049b8:	d1f9      	bne.n	80049ae <_vfiprintf_r+0x96>
 80049ba:	ebba 0b04 	subs.w	fp, sl, r4
 80049be:	d00b      	beq.n	80049d8 <_vfiprintf_r+0xc0>
 80049c0:	465b      	mov	r3, fp
 80049c2:	4622      	mov	r2, r4
 80049c4:	4629      	mov	r1, r5
 80049c6:	4630      	mov	r0, r6
 80049c8:	f7ff ff93 	bl	80048f2 <__sfputs_r>
 80049cc:	3001      	adds	r0, #1
 80049ce:	f000 80aa 	beq.w	8004b26 <_vfiprintf_r+0x20e>
 80049d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049d4:	445a      	add	r2, fp
 80049d6:	9209      	str	r2, [sp, #36]	; 0x24
 80049d8:	f89a 3000 	ldrb.w	r3, [sl]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 80a2 	beq.w	8004b26 <_vfiprintf_r+0x20e>
 80049e2:	2300      	movs	r3, #0
 80049e4:	f04f 32ff 	mov.w	r2, #4294967295
 80049e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049ec:	f10a 0a01 	add.w	sl, sl, #1
 80049f0:	9304      	str	r3, [sp, #16]
 80049f2:	9307      	str	r3, [sp, #28]
 80049f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049f8:	931a      	str	r3, [sp, #104]	; 0x68
 80049fa:	4654      	mov	r4, sl
 80049fc:	2205      	movs	r2, #5
 80049fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a02:	4858      	ldr	r0, [pc, #352]	; (8004b64 <_vfiprintf_r+0x24c>)
 8004a04:	f7fb fbec 	bl	80001e0 <memchr>
 8004a08:	9a04      	ldr	r2, [sp, #16]
 8004a0a:	b9d8      	cbnz	r0, 8004a44 <_vfiprintf_r+0x12c>
 8004a0c:	06d1      	lsls	r1, r2, #27
 8004a0e:	bf44      	itt	mi
 8004a10:	2320      	movmi	r3, #32
 8004a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a16:	0713      	lsls	r3, r2, #28
 8004a18:	bf44      	itt	mi
 8004a1a:	232b      	movmi	r3, #43	; 0x2b
 8004a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a20:	f89a 3000 	ldrb.w	r3, [sl]
 8004a24:	2b2a      	cmp	r3, #42	; 0x2a
 8004a26:	d015      	beq.n	8004a54 <_vfiprintf_r+0x13c>
 8004a28:	9a07      	ldr	r2, [sp, #28]
 8004a2a:	4654      	mov	r4, sl
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	f04f 0c0a 	mov.w	ip, #10
 8004a32:	4621      	mov	r1, r4
 8004a34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a38:	3b30      	subs	r3, #48	; 0x30
 8004a3a:	2b09      	cmp	r3, #9
 8004a3c:	d94e      	bls.n	8004adc <_vfiprintf_r+0x1c4>
 8004a3e:	b1b0      	cbz	r0, 8004a6e <_vfiprintf_r+0x156>
 8004a40:	9207      	str	r2, [sp, #28]
 8004a42:	e014      	b.n	8004a6e <_vfiprintf_r+0x156>
 8004a44:	eba0 0308 	sub.w	r3, r0, r8
 8004a48:	fa09 f303 	lsl.w	r3, r9, r3
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	9304      	str	r3, [sp, #16]
 8004a50:	46a2      	mov	sl, r4
 8004a52:	e7d2      	b.n	80049fa <_vfiprintf_r+0xe2>
 8004a54:	9b03      	ldr	r3, [sp, #12]
 8004a56:	1d19      	adds	r1, r3, #4
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	9103      	str	r1, [sp, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	bfbb      	ittet	lt
 8004a60:	425b      	neglt	r3, r3
 8004a62:	f042 0202 	orrlt.w	r2, r2, #2
 8004a66:	9307      	strge	r3, [sp, #28]
 8004a68:	9307      	strlt	r3, [sp, #28]
 8004a6a:	bfb8      	it	lt
 8004a6c:	9204      	strlt	r2, [sp, #16]
 8004a6e:	7823      	ldrb	r3, [r4, #0]
 8004a70:	2b2e      	cmp	r3, #46	; 0x2e
 8004a72:	d10c      	bne.n	8004a8e <_vfiprintf_r+0x176>
 8004a74:	7863      	ldrb	r3, [r4, #1]
 8004a76:	2b2a      	cmp	r3, #42	; 0x2a
 8004a78:	d135      	bne.n	8004ae6 <_vfiprintf_r+0x1ce>
 8004a7a:	9b03      	ldr	r3, [sp, #12]
 8004a7c:	1d1a      	adds	r2, r3, #4
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	9203      	str	r2, [sp, #12]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	bfb8      	it	lt
 8004a86:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a8a:	3402      	adds	r4, #2
 8004a8c:	9305      	str	r3, [sp, #20]
 8004a8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004b74 <_vfiprintf_r+0x25c>
 8004a92:	7821      	ldrb	r1, [r4, #0]
 8004a94:	2203      	movs	r2, #3
 8004a96:	4650      	mov	r0, sl
 8004a98:	f7fb fba2 	bl	80001e0 <memchr>
 8004a9c:	b140      	cbz	r0, 8004ab0 <_vfiprintf_r+0x198>
 8004a9e:	2340      	movs	r3, #64	; 0x40
 8004aa0:	eba0 000a 	sub.w	r0, r0, sl
 8004aa4:	fa03 f000 	lsl.w	r0, r3, r0
 8004aa8:	9b04      	ldr	r3, [sp, #16]
 8004aaa:	4303      	orrs	r3, r0
 8004aac:	3401      	adds	r4, #1
 8004aae:	9304      	str	r3, [sp, #16]
 8004ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ab4:	482c      	ldr	r0, [pc, #176]	; (8004b68 <_vfiprintf_r+0x250>)
 8004ab6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004aba:	2206      	movs	r2, #6
 8004abc:	f7fb fb90 	bl	80001e0 <memchr>
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	d03f      	beq.n	8004b44 <_vfiprintf_r+0x22c>
 8004ac4:	4b29      	ldr	r3, [pc, #164]	; (8004b6c <_vfiprintf_r+0x254>)
 8004ac6:	bb1b      	cbnz	r3, 8004b10 <_vfiprintf_r+0x1f8>
 8004ac8:	9b03      	ldr	r3, [sp, #12]
 8004aca:	3307      	adds	r3, #7
 8004acc:	f023 0307 	bic.w	r3, r3, #7
 8004ad0:	3308      	adds	r3, #8
 8004ad2:	9303      	str	r3, [sp, #12]
 8004ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ad6:	443b      	add	r3, r7
 8004ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8004ada:	e767      	b.n	80049ac <_vfiprintf_r+0x94>
 8004adc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ae0:	460c      	mov	r4, r1
 8004ae2:	2001      	movs	r0, #1
 8004ae4:	e7a5      	b.n	8004a32 <_vfiprintf_r+0x11a>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	3401      	adds	r4, #1
 8004aea:	9305      	str	r3, [sp, #20]
 8004aec:	4619      	mov	r1, r3
 8004aee:	f04f 0c0a 	mov.w	ip, #10
 8004af2:	4620      	mov	r0, r4
 8004af4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004af8:	3a30      	subs	r2, #48	; 0x30
 8004afa:	2a09      	cmp	r2, #9
 8004afc:	d903      	bls.n	8004b06 <_vfiprintf_r+0x1ee>
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0c5      	beq.n	8004a8e <_vfiprintf_r+0x176>
 8004b02:	9105      	str	r1, [sp, #20]
 8004b04:	e7c3      	b.n	8004a8e <_vfiprintf_r+0x176>
 8004b06:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b0a:	4604      	mov	r4, r0
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e7f0      	b.n	8004af2 <_vfiprintf_r+0x1da>
 8004b10:	ab03      	add	r3, sp, #12
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	462a      	mov	r2, r5
 8004b16:	4b16      	ldr	r3, [pc, #88]	; (8004b70 <_vfiprintf_r+0x258>)
 8004b18:	a904      	add	r1, sp, #16
 8004b1a:	4630      	mov	r0, r6
 8004b1c:	f3af 8000 	nop.w
 8004b20:	4607      	mov	r7, r0
 8004b22:	1c78      	adds	r0, r7, #1
 8004b24:	d1d6      	bne.n	8004ad4 <_vfiprintf_r+0x1bc>
 8004b26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b28:	07d9      	lsls	r1, r3, #31
 8004b2a:	d405      	bmi.n	8004b38 <_vfiprintf_r+0x220>
 8004b2c:	89ab      	ldrh	r3, [r5, #12]
 8004b2e:	059a      	lsls	r2, r3, #22
 8004b30:	d402      	bmi.n	8004b38 <_vfiprintf_r+0x220>
 8004b32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b34:	f7ff fd7f 	bl	8004636 <__retarget_lock_release_recursive>
 8004b38:	89ab      	ldrh	r3, [r5, #12]
 8004b3a:	065b      	lsls	r3, r3, #25
 8004b3c:	f53f af12 	bmi.w	8004964 <_vfiprintf_r+0x4c>
 8004b40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b42:	e711      	b.n	8004968 <_vfiprintf_r+0x50>
 8004b44:	ab03      	add	r3, sp, #12
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	462a      	mov	r2, r5
 8004b4a:	4b09      	ldr	r3, [pc, #36]	; (8004b70 <_vfiprintf_r+0x258>)
 8004b4c:	a904      	add	r1, sp, #16
 8004b4e:	4630      	mov	r0, r6
 8004b50:	f000 f880 	bl	8004c54 <_printf_i>
 8004b54:	e7e4      	b.n	8004b20 <_vfiprintf_r+0x208>
 8004b56:	bf00      	nop
 8004b58:	0800527c 	.word	0x0800527c
 8004b5c:	0800529c 	.word	0x0800529c
 8004b60:	0800525c 	.word	0x0800525c
 8004b64:	080052bc 	.word	0x080052bc
 8004b68:	080052c6 	.word	0x080052c6
 8004b6c:	00000000 	.word	0x00000000
 8004b70:	080048f3 	.word	0x080048f3
 8004b74:	080052c2 	.word	0x080052c2

08004b78 <_printf_common>:
 8004b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b7c:	4616      	mov	r6, r2
 8004b7e:	4699      	mov	r9, r3
 8004b80:	688a      	ldr	r2, [r1, #8]
 8004b82:	690b      	ldr	r3, [r1, #16]
 8004b84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	bfb8      	it	lt
 8004b8c:	4613      	movlt	r3, r2
 8004b8e:	6033      	str	r3, [r6, #0]
 8004b90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b94:	4607      	mov	r7, r0
 8004b96:	460c      	mov	r4, r1
 8004b98:	b10a      	cbz	r2, 8004b9e <_printf_common+0x26>
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	6033      	str	r3, [r6, #0]
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	0699      	lsls	r1, r3, #26
 8004ba2:	bf42      	ittt	mi
 8004ba4:	6833      	ldrmi	r3, [r6, #0]
 8004ba6:	3302      	addmi	r3, #2
 8004ba8:	6033      	strmi	r3, [r6, #0]
 8004baa:	6825      	ldr	r5, [r4, #0]
 8004bac:	f015 0506 	ands.w	r5, r5, #6
 8004bb0:	d106      	bne.n	8004bc0 <_printf_common+0x48>
 8004bb2:	f104 0a19 	add.w	sl, r4, #25
 8004bb6:	68e3      	ldr	r3, [r4, #12]
 8004bb8:	6832      	ldr	r2, [r6, #0]
 8004bba:	1a9b      	subs	r3, r3, r2
 8004bbc:	42ab      	cmp	r3, r5
 8004bbe:	dc26      	bgt.n	8004c0e <_printf_common+0x96>
 8004bc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bc4:	1e13      	subs	r3, r2, #0
 8004bc6:	6822      	ldr	r2, [r4, #0]
 8004bc8:	bf18      	it	ne
 8004bca:	2301      	movne	r3, #1
 8004bcc:	0692      	lsls	r2, r2, #26
 8004bce:	d42b      	bmi.n	8004c28 <_printf_common+0xb0>
 8004bd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bd4:	4649      	mov	r1, r9
 8004bd6:	4638      	mov	r0, r7
 8004bd8:	47c0      	blx	r8
 8004bda:	3001      	adds	r0, #1
 8004bdc:	d01e      	beq.n	8004c1c <_printf_common+0xa4>
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	68e5      	ldr	r5, [r4, #12]
 8004be2:	6832      	ldr	r2, [r6, #0]
 8004be4:	f003 0306 	and.w	r3, r3, #6
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	bf08      	it	eq
 8004bec:	1aad      	subeq	r5, r5, r2
 8004bee:	68a3      	ldr	r3, [r4, #8]
 8004bf0:	6922      	ldr	r2, [r4, #16]
 8004bf2:	bf0c      	ite	eq
 8004bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bf8:	2500      	movne	r5, #0
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	bfc4      	itt	gt
 8004bfe:	1a9b      	subgt	r3, r3, r2
 8004c00:	18ed      	addgt	r5, r5, r3
 8004c02:	2600      	movs	r6, #0
 8004c04:	341a      	adds	r4, #26
 8004c06:	42b5      	cmp	r5, r6
 8004c08:	d11a      	bne.n	8004c40 <_printf_common+0xc8>
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	e008      	b.n	8004c20 <_printf_common+0xa8>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	4652      	mov	r2, sl
 8004c12:	4649      	mov	r1, r9
 8004c14:	4638      	mov	r0, r7
 8004c16:	47c0      	blx	r8
 8004c18:	3001      	adds	r0, #1
 8004c1a:	d103      	bne.n	8004c24 <_printf_common+0xac>
 8004c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c24:	3501      	adds	r5, #1
 8004c26:	e7c6      	b.n	8004bb6 <_printf_common+0x3e>
 8004c28:	18e1      	adds	r1, r4, r3
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	2030      	movs	r0, #48	; 0x30
 8004c2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c32:	4422      	add	r2, r4
 8004c34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c3c:	3302      	adds	r3, #2
 8004c3e:	e7c7      	b.n	8004bd0 <_printf_common+0x58>
 8004c40:	2301      	movs	r3, #1
 8004c42:	4622      	mov	r2, r4
 8004c44:	4649      	mov	r1, r9
 8004c46:	4638      	mov	r0, r7
 8004c48:	47c0      	blx	r8
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	d0e6      	beq.n	8004c1c <_printf_common+0xa4>
 8004c4e:	3601      	adds	r6, #1
 8004c50:	e7d9      	b.n	8004c06 <_printf_common+0x8e>
	...

08004c54 <_printf_i>:
 8004c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c58:	7e0f      	ldrb	r7, [r1, #24]
 8004c5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c5c:	2f78      	cmp	r7, #120	; 0x78
 8004c5e:	4691      	mov	r9, r2
 8004c60:	4680      	mov	r8, r0
 8004c62:	460c      	mov	r4, r1
 8004c64:	469a      	mov	sl, r3
 8004c66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c6a:	d807      	bhi.n	8004c7c <_printf_i+0x28>
 8004c6c:	2f62      	cmp	r7, #98	; 0x62
 8004c6e:	d80a      	bhi.n	8004c86 <_printf_i+0x32>
 8004c70:	2f00      	cmp	r7, #0
 8004c72:	f000 80d8 	beq.w	8004e26 <_printf_i+0x1d2>
 8004c76:	2f58      	cmp	r7, #88	; 0x58
 8004c78:	f000 80a3 	beq.w	8004dc2 <_printf_i+0x16e>
 8004c7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c84:	e03a      	b.n	8004cfc <_printf_i+0xa8>
 8004c86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c8a:	2b15      	cmp	r3, #21
 8004c8c:	d8f6      	bhi.n	8004c7c <_printf_i+0x28>
 8004c8e:	a101      	add	r1, pc, #4	; (adr r1, 8004c94 <_printf_i+0x40>)
 8004c90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c94:	08004ced 	.word	0x08004ced
 8004c98:	08004d01 	.word	0x08004d01
 8004c9c:	08004c7d 	.word	0x08004c7d
 8004ca0:	08004c7d 	.word	0x08004c7d
 8004ca4:	08004c7d 	.word	0x08004c7d
 8004ca8:	08004c7d 	.word	0x08004c7d
 8004cac:	08004d01 	.word	0x08004d01
 8004cb0:	08004c7d 	.word	0x08004c7d
 8004cb4:	08004c7d 	.word	0x08004c7d
 8004cb8:	08004c7d 	.word	0x08004c7d
 8004cbc:	08004c7d 	.word	0x08004c7d
 8004cc0:	08004e0d 	.word	0x08004e0d
 8004cc4:	08004d31 	.word	0x08004d31
 8004cc8:	08004def 	.word	0x08004def
 8004ccc:	08004c7d 	.word	0x08004c7d
 8004cd0:	08004c7d 	.word	0x08004c7d
 8004cd4:	08004e2f 	.word	0x08004e2f
 8004cd8:	08004c7d 	.word	0x08004c7d
 8004cdc:	08004d31 	.word	0x08004d31
 8004ce0:	08004c7d 	.word	0x08004c7d
 8004ce4:	08004c7d 	.word	0x08004c7d
 8004ce8:	08004df7 	.word	0x08004df7
 8004cec:	682b      	ldr	r3, [r5, #0]
 8004cee:	1d1a      	adds	r2, r3, #4
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	602a      	str	r2, [r5, #0]
 8004cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e0a3      	b.n	8004e48 <_printf_i+0x1f4>
 8004d00:	6820      	ldr	r0, [r4, #0]
 8004d02:	6829      	ldr	r1, [r5, #0]
 8004d04:	0606      	lsls	r6, r0, #24
 8004d06:	f101 0304 	add.w	r3, r1, #4
 8004d0a:	d50a      	bpl.n	8004d22 <_printf_i+0xce>
 8004d0c:	680e      	ldr	r6, [r1, #0]
 8004d0e:	602b      	str	r3, [r5, #0]
 8004d10:	2e00      	cmp	r6, #0
 8004d12:	da03      	bge.n	8004d1c <_printf_i+0xc8>
 8004d14:	232d      	movs	r3, #45	; 0x2d
 8004d16:	4276      	negs	r6, r6
 8004d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d1c:	485e      	ldr	r0, [pc, #376]	; (8004e98 <_printf_i+0x244>)
 8004d1e:	230a      	movs	r3, #10
 8004d20:	e019      	b.n	8004d56 <_printf_i+0x102>
 8004d22:	680e      	ldr	r6, [r1, #0]
 8004d24:	602b      	str	r3, [r5, #0]
 8004d26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d2a:	bf18      	it	ne
 8004d2c:	b236      	sxthne	r6, r6
 8004d2e:	e7ef      	b.n	8004d10 <_printf_i+0xbc>
 8004d30:	682b      	ldr	r3, [r5, #0]
 8004d32:	6820      	ldr	r0, [r4, #0]
 8004d34:	1d19      	adds	r1, r3, #4
 8004d36:	6029      	str	r1, [r5, #0]
 8004d38:	0601      	lsls	r1, r0, #24
 8004d3a:	d501      	bpl.n	8004d40 <_printf_i+0xec>
 8004d3c:	681e      	ldr	r6, [r3, #0]
 8004d3e:	e002      	b.n	8004d46 <_printf_i+0xf2>
 8004d40:	0646      	lsls	r6, r0, #25
 8004d42:	d5fb      	bpl.n	8004d3c <_printf_i+0xe8>
 8004d44:	881e      	ldrh	r6, [r3, #0]
 8004d46:	4854      	ldr	r0, [pc, #336]	; (8004e98 <_printf_i+0x244>)
 8004d48:	2f6f      	cmp	r7, #111	; 0x6f
 8004d4a:	bf0c      	ite	eq
 8004d4c:	2308      	moveq	r3, #8
 8004d4e:	230a      	movne	r3, #10
 8004d50:	2100      	movs	r1, #0
 8004d52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d56:	6865      	ldr	r5, [r4, #4]
 8004d58:	60a5      	str	r5, [r4, #8]
 8004d5a:	2d00      	cmp	r5, #0
 8004d5c:	bfa2      	ittt	ge
 8004d5e:	6821      	ldrge	r1, [r4, #0]
 8004d60:	f021 0104 	bicge.w	r1, r1, #4
 8004d64:	6021      	strge	r1, [r4, #0]
 8004d66:	b90e      	cbnz	r6, 8004d6c <_printf_i+0x118>
 8004d68:	2d00      	cmp	r5, #0
 8004d6a:	d04d      	beq.n	8004e08 <_printf_i+0x1b4>
 8004d6c:	4615      	mov	r5, r2
 8004d6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d72:	fb03 6711 	mls	r7, r3, r1, r6
 8004d76:	5dc7      	ldrb	r7, [r0, r7]
 8004d78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d7c:	4637      	mov	r7, r6
 8004d7e:	42bb      	cmp	r3, r7
 8004d80:	460e      	mov	r6, r1
 8004d82:	d9f4      	bls.n	8004d6e <_printf_i+0x11a>
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d10b      	bne.n	8004da0 <_printf_i+0x14c>
 8004d88:	6823      	ldr	r3, [r4, #0]
 8004d8a:	07de      	lsls	r6, r3, #31
 8004d8c:	d508      	bpl.n	8004da0 <_printf_i+0x14c>
 8004d8e:	6923      	ldr	r3, [r4, #16]
 8004d90:	6861      	ldr	r1, [r4, #4]
 8004d92:	4299      	cmp	r1, r3
 8004d94:	bfde      	ittt	le
 8004d96:	2330      	movle	r3, #48	; 0x30
 8004d98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004da0:	1b52      	subs	r2, r2, r5
 8004da2:	6122      	str	r2, [r4, #16]
 8004da4:	f8cd a000 	str.w	sl, [sp]
 8004da8:	464b      	mov	r3, r9
 8004daa:	aa03      	add	r2, sp, #12
 8004dac:	4621      	mov	r1, r4
 8004dae:	4640      	mov	r0, r8
 8004db0:	f7ff fee2 	bl	8004b78 <_printf_common>
 8004db4:	3001      	adds	r0, #1
 8004db6:	d14c      	bne.n	8004e52 <_printf_i+0x1fe>
 8004db8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dbc:	b004      	add	sp, #16
 8004dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc2:	4835      	ldr	r0, [pc, #212]	; (8004e98 <_printf_i+0x244>)
 8004dc4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004dc8:	6829      	ldr	r1, [r5, #0]
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	f851 6b04 	ldr.w	r6, [r1], #4
 8004dd0:	6029      	str	r1, [r5, #0]
 8004dd2:	061d      	lsls	r5, r3, #24
 8004dd4:	d514      	bpl.n	8004e00 <_printf_i+0x1ac>
 8004dd6:	07df      	lsls	r7, r3, #31
 8004dd8:	bf44      	itt	mi
 8004dda:	f043 0320 	orrmi.w	r3, r3, #32
 8004dde:	6023      	strmi	r3, [r4, #0]
 8004de0:	b91e      	cbnz	r6, 8004dea <_printf_i+0x196>
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	f023 0320 	bic.w	r3, r3, #32
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	2310      	movs	r3, #16
 8004dec:	e7b0      	b.n	8004d50 <_printf_i+0xfc>
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	f043 0320 	orr.w	r3, r3, #32
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	2378      	movs	r3, #120	; 0x78
 8004df8:	4828      	ldr	r0, [pc, #160]	; (8004e9c <_printf_i+0x248>)
 8004dfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004dfe:	e7e3      	b.n	8004dc8 <_printf_i+0x174>
 8004e00:	0659      	lsls	r1, r3, #25
 8004e02:	bf48      	it	mi
 8004e04:	b2b6      	uxthmi	r6, r6
 8004e06:	e7e6      	b.n	8004dd6 <_printf_i+0x182>
 8004e08:	4615      	mov	r5, r2
 8004e0a:	e7bb      	b.n	8004d84 <_printf_i+0x130>
 8004e0c:	682b      	ldr	r3, [r5, #0]
 8004e0e:	6826      	ldr	r6, [r4, #0]
 8004e10:	6961      	ldr	r1, [r4, #20]
 8004e12:	1d18      	adds	r0, r3, #4
 8004e14:	6028      	str	r0, [r5, #0]
 8004e16:	0635      	lsls	r5, r6, #24
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	d501      	bpl.n	8004e20 <_printf_i+0x1cc>
 8004e1c:	6019      	str	r1, [r3, #0]
 8004e1e:	e002      	b.n	8004e26 <_printf_i+0x1d2>
 8004e20:	0670      	lsls	r0, r6, #25
 8004e22:	d5fb      	bpl.n	8004e1c <_printf_i+0x1c8>
 8004e24:	8019      	strh	r1, [r3, #0]
 8004e26:	2300      	movs	r3, #0
 8004e28:	6123      	str	r3, [r4, #16]
 8004e2a:	4615      	mov	r5, r2
 8004e2c:	e7ba      	b.n	8004da4 <_printf_i+0x150>
 8004e2e:	682b      	ldr	r3, [r5, #0]
 8004e30:	1d1a      	adds	r2, r3, #4
 8004e32:	602a      	str	r2, [r5, #0]
 8004e34:	681d      	ldr	r5, [r3, #0]
 8004e36:	6862      	ldr	r2, [r4, #4]
 8004e38:	2100      	movs	r1, #0
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	f7fb f9d0 	bl	80001e0 <memchr>
 8004e40:	b108      	cbz	r0, 8004e46 <_printf_i+0x1f2>
 8004e42:	1b40      	subs	r0, r0, r5
 8004e44:	6060      	str	r0, [r4, #4]
 8004e46:	6863      	ldr	r3, [r4, #4]
 8004e48:	6123      	str	r3, [r4, #16]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e50:	e7a8      	b.n	8004da4 <_printf_i+0x150>
 8004e52:	6923      	ldr	r3, [r4, #16]
 8004e54:	462a      	mov	r2, r5
 8004e56:	4649      	mov	r1, r9
 8004e58:	4640      	mov	r0, r8
 8004e5a:	47d0      	blx	sl
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	d0ab      	beq.n	8004db8 <_printf_i+0x164>
 8004e60:	6823      	ldr	r3, [r4, #0]
 8004e62:	079b      	lsls	r3, r3, #30
 8004e64:	d413      	bmi.n	8004e8e <_printf_i+0x23a>
 8004e66:	68e0      	ldr	r0, [r4, #12]
 8004e68:	9b03      	ldr	r3, [sp, #12]
 8004e6a:	4298      	cmp	r0, r3
 8004e6c:	bfb8      	it	lt
 8004e6e:	4618      	movlt	r0, r3
 8004e70:	e7a4      	b.n	8004dbc <_printf_i+0x168>
 8004e72:	2301      	movs	r3, #1
 8004e74:	4632      	mov	r2, r6
 8004e76:	4649      	mov	r1, r9
 8004e78:	4640      	mov	r0, r8
 8004e7a:	47d0      	blx	sl
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	d09b      	beq.n	8004db8 <_printf_i+0x164>
 8004e80:	3501      	adds	r5, #1
 8004e82:	68e3      	ldr	r3, [r4, #12]
 8004e84:	9903      	ldr	r1, [sp, #12]
 8004e86:	1a5b      	subs	r3, r3, r1
 8004e88:	42ab      	cmp	r3, r5
 8004e8a:	dcf2      	bgt.n	8004e72 <_printf_i+0x21e>
 8004e8c:	e7eb      	b.n	8004e66 <_printf_i+0x212>
 8004e8e:	2500      	movs	r5, #0
 8004e90:	f104 0619 	add.w	r6, r4, #25
 8004e94:	e7f5      	b.n	8004e82 <_printf_i+0x22e>
 8004e96:	bf00      	nop
 8004e98:	080052cd 	.word	0x080052cd
 8004e9c:	080052de 	.word	0x080052de

08004ea0 <_putc_r>:
 8004ea0:	b570      	push	{r4, r5, r6, lr}
 8004ea2:	460d      	mov	r5, r1
 8004ea4:	4614      	mov	r4, r2
 8004ea6:	4606      	mov	r6, r0
 8004ea8:	b118      	cbz	r0, 8004eb2 <_putc_r+0x12>
 8004eaa:	6983      	ldr	r3, [r0, #24]
 8004eac:	b90b      	cbnz	r3, 8004eb2 <_putc_r+0x12>
 8004eae:	f7ff fb23 	bl	80044f8 <__sinit>
 8004eb2:	4b1c      	ldr	r3, [pc, #112]	; (8004f24 <_putc_r+0x84>)
 8004eb4:	429c      	cmp	r4, r3
 8004eb6:	d124      	bne.n	8004f02 <_putc_r+0x62>
 8004eb8:	6874      	ldr	r4, [r6, #4]
 8004eba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ebc:	07d8      	lsls	r0, r3, #31
 8004ebe:	d405      	bmi.n	8004ecc <_putc_r+0x2c>
 8004ec0:	89a3      	ldrh	r3, [r4, #12]
 8004ec2:	0599      	lsls	r1, r3, #22
 8004ec4:	d402      	bmi.n	8004ecc <_putc_r+0x2c>
 8004ec6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ec8:	f7ff fbb4 	bl	8004634 <__retarget_lock_acquire_recursive>
 8004ecc:	68a3      	ldr	r3, [r4, #8]
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	60a3      	str	r3, [r4, #8]
 8004ed4:	da05      	bge.n	8004ee2 <_putc_r+0x42>
 8004ed6:	69a2      	ldr	r2, [r4, #24]
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	db1c      	blt.n	8004f16 <_putc_r+0x76>
 8004edc:	b2eb      	uxtb	r3, r5
 8004ede:	2b0a      	cmp	r3, #10
 8004ee0:	d019      	beq.n	8004f16 <_putc_r+0x76>
 8004ee2:	6823      	ldr	r3, [r4, #0]
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	6022      	str	r2, [r4, #0]
 8004ee8:	701d      	strb	r5, [r3, #0]
 8004eea:	b2ed      	uxtb	r5, r5
 8004eec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004eee:	07da      	lsls	r2, r3, #31
 8004ef0:	d405      	bmi.n	8004efe <_putc_r+0x5e>
 8004ef2:	89a3      	ldrh	r3, [r4, #12]
 8004ef4:	059b      	lsls	r3, r3, #22
 8004ef6:	d402      	bmi.n	8004efe <_putc_r+0x5e>
 8004ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004efa:	f7ff fb9c 	bl	8004636 <__retarget_lock_release_recursive>
 8004efe:	4628      	mov	r0, r5
 8004f00:	bd70      	pop	{r4, r5, r6, pc}
 8004f02:	4b09      	ldr	r3, [pc, #36]	; (8004f28 <_putc_r+0x88>)
 8004f04:	429c      	cmp	r4, r3
 8004f06:	d101      	bne.n	8004f0c <_putc_r+0x6c>
 8004f08:	68b4      	ldr	r4, [r6, #8]
 8004f0a:	e7d6      	b.n	8004eba <_putc_r+0x1a>
 8004f0c:	4b07      	ldr	r3, [pc, #28]	; (8004f2c <_putc_r+0x8c>)
 8004f0e:	429c      	cmp	r4, r3
 8004f10:	bf08      	it	eq
 8004f12:	68f4      	ldreq	r4, [r6, #12]
 8004f14:	e7d1      	b.n	8004eba <_putc_r+0x1a>
 8004f16:	4629      	mov	r1, r5
 8004f18:	4622      	mov	r2, r4
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	f7ff f912 	bl	8004144 <__swbuf_r>
 8004f20:	4605      	mov	r5, r0
 8004f22:	e7e3      	b.n	8004eec <_putc_r+0x4c>
 8004f24:	0800527c 	.word	0x0800527c
 8004f28:	0800529c 	.word	0x0800529c
 8004f2c:	0800525c 	.word	0x0800525c

08004f30 <_sbrk_r>:
 8004f30:	b538      	push	{r3, r4, r5, lr}
 8004f32:	4d06      	ldr	r5, [pc, #24]	; (8004f4c <_sbrk_r+0x1c>)
 8004f34:	2300      	movs	r3, #0
 8004f36:	4604      	mov	r4, r0
 8004f38:	4608      	mov	r0, r1
 8004f3a:	602b      	str	r3, [r5, #0]
 8004f3c:	f7fc f9b0 	bl	80012a0 <_sbrk>
 8004f40:	1c43      	adds	r3, r0, #1
 8004f42:	d102      	bne.n	8004f4a <_sbrk_r+0x1a>
 8004f44:	682b      	ldr	r3, [r5, #0]
 8004f46:	b103      	cbz	r3, 8004f4a <_sbrk_r+0x1a>
 8004f48:	6023      	str	r3, [r4, #0]
 8004f4a:	bd38      	pop	{r3, r4, r5, pc}
 8004f4c:	200001dc 	.word	0x200001dc

08004f50 <__sread>:
 8004f50:	b510      	push	{r4, lr}
 8004f52:	460c      	mov	r4, r1
 8004f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f58:	f000 f8a0 	bl	800509c <_read_r>
 8004f5c:	2800      	cmp	r0, #0
 8004f5e:	bfab      	itete	ge
 8004f60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f62:	89a3      	ldrhlt	r3, [r4, #12]
 8004f64:	181b      	addge	r3, r3, r0
 8004f66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f6a:	bfac      	ite	ge
 8004f6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f6e:	81a3      	strhlt	r3, [r4, #12]
 8004f70:	bd10      	pop	{r4, pc}

08004f72 <__swrite>:
 8004f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f76:	461f      	mov	r7, r3
 8004f78:	898b      	ldrh	r3, [r1, #12]
 8004f7a:	05db      	lsls	r3, r3, #23
 8004f7c:	4605      	mov	r5, r0
 8004f7e:	460c      	mov	r4, r1
 8004f80:	4616      	mov	r6, r2
 8004f82:	d505      	bpl.n	8004f90 <__swrite+0x1e>
 8004f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f88:	2302      	movs	r3, #2
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f000 f868 	bl	8005060 <_lseek_r>
 8004f90:	89a3      	ldrh	r3, [r4, #12]
 8004f92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f9a:	81a3      	strh	r3, [r4, #12]
 8004f9c:	4632      	mov	r2, r6
 8004f9e:	463b      	mov	r3, r7
 8004fa0:	4628      	mov	r0, r5
 8004fa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fa6:	f000 b817 	b.w	8004fd8 <_write_r>

08004faa <__sseek>:
 8004faa:	b510      	push	{r4, lr}
 8004fac:	460c      	mov	r4, r1
 8004fae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fb2:	f000 f855 	bl	8005060 <_lseek_r>
 8004fb6:	1c43      	adds	r3, r0, #1
 8004fb8:	89a3      	ldrh	r3, [r4, #12]
 8004fba:	bf15      	itete	ne
 8004fbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8004fbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004fc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004fc6:	81a3      	strheq	r3, [r4, #12]
 8004fc8:	bf18      	it	ne
 8004fca:	81a3      	strhne	r3, [r4, #12]
 8004fcc:	bd10      	pop	{r4, pc}

08004fce <__sclose>:
 8004fce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fd2:	f000 b813 	b.w	8004ffc <_close_r>
	...

08004fd8 <_write_r>:
 8004fd8:	b538      	push	{r3, r4, r5, lr}
 8004fda:	4d07      	ldr	r5, [pc, #28]	; (8004ff8 <_write_r+0x20>)
 8004fdc:	4604      	mov	r4, r0
 8004fde:	4608      	mov	r0, r1
 8004fe0:	4611      	mov	r1, r2
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	602a      	str	r2, [r5, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	f7fb faf3 	bl	80005d2 <_write>
 8004fec:	1c43      	adds	r3, r0, #1
 8004fee:	d102      	bne.n	8004ff6 <_write_r+0x1e>
 8004ff0:	682b      	ldr	r3, [r5, #0]
 8004ff2:	b103      	cbz	r3, 8004ff6 <_write_r+0x1e>
 8004ff4:	6023      	str	r3, [r4, #0]
 8004ff6:	bd38      	pop	{r3, r4, r5, pc}
 8004ff8:	200001dc 	.word	0x200001dc

08004ffc <_close_r>:
 8004ffc:	b538      	push	{r3, r4, r5, lr}
 8004ffe:	4d06      	ldr	r5, [pc, #24]	; (8005018 <_close_r+0x1c>)
 8005000:	2300      	movs	r3, #0
 8005002:	4604      	mov	r4, r0
 8005004:	4608      	mov	r0, r1
 8005006:	602b      	str	r3, [r5, #0]
 8005008:	f7fc f915 	bl	8001236 <_close>
 800500c:	1c43      	adds	r3, r0, #1
 800500e:	d102      	bne.n	8005016 <_close_r+0x1a>
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	b103      	cbz	r3, 8005016 <_close_r+0x1a>
 8005014:	6023      	str	r3, [r4, #0]
 8005016:	bd38      	pop	{r3, r4, r5, pc}
 8005018:	200001dc 	.word	0x200001dc

0800501c <_fstat_r>:
 800501c:	b538      	push	{r3, r4, r5, lr}
 800501e:	4d07      	ldr	r5, [pc, #28]	; (800503c <_fstat_r+0x20>)
 8005020:	2300      	movs	r3, #0
 8005022:	4604      	mov	r4, r0
 8005024:	4608      	mov	r0, r1
 8005026:	4611      	mov	r1, r2
 8005028:	602b      	str	r3, [r5, #0]
 800502a:	f7fc f910 	bl	800124e <_fstat>
 800502e:	1c43      	adds	r3, r0, #1
 8005030:	d102      	bne.n	8005038 <_fstat_r+0x1c>
 8005032:	682b      	ldr	r3, [r5, #0]
 8005034:	b103      	cbz	r3, 8005038 <_fstat_r+0x1c>
 8005036:	6023      	str	r3, [r4, #0]
 8005038:	bd38      	pop	{r3, r4, r5, pc}
 800503a:	bf00      	nop
 800503c:	200001dc 	.word	0x200001dc

08005040 <_isatty_r>:
 8005040:	b538      	push	{r3, r4, r5, lr}
 8005042:	4d06      	ldr	r5, [pc, #24]	; (800505c <_isatty_r+0x1c>)
 8005044:	2300      	movs	r3, #0
 8005046:	4604      	mov	r4, r0
 8005048:	4608      	mov	r0, r1
 800504a:	602b      	str	r3, [r5, #0]
 800504c:	f7fc f90f 	bl	800126e <_isatty>
 8005050:	1c43      	adds	r3, r0, #1
 8005052:	d102      	bne.n	800505a <_isatty_r+0x1a>
 8005054:	682b      	ldr	r3, [r5, #0]
 8005056:	b103      	cbz	r3, 800505a <_isatty_r+0x1a>
 8005058:	6023      	str	r3, [r4, #0]
 800505a:	bd38      	pop	{r3, r4, r5, pc}
 800505c:	200001dc 	.word	0x200001dc

08005060 <_lseek_r>:
 8005060:	b538      	push	{r3, r4, r5, lr}
 8005062:	4d07      	ldr	r5, [pc, #28]	; (8005080 <_lseek_r+0x20>)
 8005064:	4604      	mov	r4, r0
 8005066:	4608      	mov	r0, r1
 8005068:	4611      	mov	r1, r2
 800506a:	2200      	movs	r2, #0
 800506c:	602a      	str	r2, [r5, #0]
 800506e:	461a      	mov	r2, r3
 8005070:	f7fc f908 	bl	8001284 <_lseek>
 8005074:	1c43      	adds	r3, r0, #1
 8005076:	d102      	bne.n	800507e <_lseek_r+0x1e>
 8005078:	682b      	ldr	r3, [r5, #0]
 800507a:	b103      	cbz	r3, 800507e <_lseek_r+0x1e>
 800507c:	6023      	str	r3, [r4, #0]
 800507e:	bd38      	pop	{r3, r4, r5, pc}
 8005080:	200001dc 	.word	0x200001dc

08005084 <__malloc_lock>:
 8005084:	4801      	ldr	r0, [pc, #4]	; (800508c <__malloc_lock+0x8>)
 8005086:	f7ff bad5 	b.w	8004634 <__retarget_lock_acquire_recursive>
 800508a:	bf00      	nop
 800508c:	200001d0 	.word	0x200001d0

08005090 <__malloc_unlock>:
 8005090:	4801      	ldr	r0, [pc, #4]	; (8005098 <__malloc_unlock+0x8>)
 8005092:	f7ff bad0 	b.w	8004636 <__retarget_lock_release_recursive>
 8005096:	bf00      	nop
 8005098:	200001d0 	.word	0x200001d0

0800509c <_read_r>:
 800509c:	b538      	push	{r3, r4, r5, lr}
 800509e:	4d07      	ldr	r5, [pc, #28]	; (80050bc <_read_r+0x20>)
 80050a0:	4604      	mov	r4, r0
 80050a2:	4608      	mov	r0, r1
 80050a4:	4611      	mov	r1, r2
 80050a6:	2200      	movs	r2, #0
 80050a8:	602a      	str	r2, [r5, #0]
 80050aa:	461a      	mov	r2, r3
 80050ac:	f7fc f8a6 	bl	80011fc <_read>
 80050b0:	1c43      	adds	r3, r0, #1
 80050b2:	d102      	bne.n	80050ba <_read_r+0x1e>
 80050b4:	682b      	ldr	r3, [r5, #0]
 80050b6:	b103      	cbz	r3, 80050ba <_read_r+0x1e>
 80050b8:	6023      	str	r3, [r4, #0]
 80050ba:	bd38      	pop	{r3, r4, r5, pc}
 80050bc:	200001dc 	.word	0x200001dc

080050c0 <_init>:
 80050c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050c2:	bf00      	nop
 80050c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050c6:	bc08      	pop	{r3}
 80050c8:	469e      	mov	lr, r3
 80050ca:	4770      	bx	lr

080050cc <_fini>:
 80050cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ce:	bf00      	nop
 80050d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050d2:	bc08      	pop	{r3}
 80050d4:	469e      	mov	lr, r3
 80050d6:	4770      	bx	lr
